
UART_Modul.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008544  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  080086f8  080086f8  000096f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b48  08008b48  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008b48  08008b48  00009b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b50  08008b50  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b50  08008b50  00009b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b54  08008b54  00009b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008b58  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d8  2**0
                  CONTENTS
 10 .bss          00000900  200001d8  200001d8  0000a1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ad8  20000ad8  0000a1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e801  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e9e  00000000  00000000  00018a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  0001a8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000923  00000000  00000000  0001b490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025530  00000000  00000000  0001bdb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dae6  00000000  00000000  000412e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de8b4  00000000  00000000  0004edc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d67d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000470c  00000000  00000000  0012d6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00131dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080086dc 	.word	0x080086dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	080086dc 	.word	0x080086dc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001008:	f000 fce6 	bl	80019d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100c:	f000 f82c 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001010:	f000 f93a 	bl	8001288 <MX_GPIO_Init>
  MX_ETH_Init();
 8001014:	f000 f892 	bl	800113c <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001018:	f000 f908 	bl	800122c <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 800101c:	f000 f8dc 	bl	80011d8 <MX_USART2_UART_Init>
	  /*sprintf(message, "%d\n", data2);
	  HAL_UART_Transmit(&huart2,(uint8_t *)message, strlen(message), 100);
	  HAL_Delay(300);*/

	  //Float mesaj göndermek için
	  sprintf(message, "%.3f\n", data3);
 8001020:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <main+0x54>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fa9f 	bl	8000568 <__aeabi_f2d>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	490b      	ldr	r1, [pc, #44]	@ (800105c <main+0x58>)
 8001030:	480b      	ldr	r0, [pc, #44]	@ (8001060 <main+0x5c>)
 8001032:	f003 ff19 	bl	8004e68 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t *)message, strlen(message), 100);
 8001036:	480a      	ldr	r0, [pc, #40]	@ (8001060 <main+0x5c>)
 8001038:	f7ff f92a 	bl	8000290 <strlen>
 800103c:	4603      	mov	r3, r0
 800103e:	b29a      	uxth	r2, r3
 8001040:	2364      	movs	r3, #100	@ 0x64
 8001042:	4907      	ldr	r1, [pc, #28]	@ (8001060 <main+0x5c>)
 8001044:	4807      	ldr	r0, [pc, #28]	@ (8001064 <main+0x60>)
 8001046:	f002 f927 	bl	8003298 <HAL_UART_Transmit>
	  HAL_Delay(300);
 800104a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800104e:	f000 fd35 	bl	8001abc <HAL_Delay>
	  sprintf(message, "%.3f\n", data3);
 8001052:	bf00      	nop
 8001054:	e7e4      	b.n	8001020 <main+0x1c>
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000
 800105c:	080086f8 	.word	0x080086f8
 8001060:	20000948 	.word	0x20000948
 8001064:	2000041c 	.word	0x2000041c

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	@ 0x50
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2230      	movs	r2, #48	@ 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f003 ff59 	bl	8004f2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <SystemClock_Config+0xcc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	4a27      	ldr	r2, [pc, #156]	@ (8001134 <SystemClock_Config+0xcc>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	@ 0x40
 800109c:	4b25      	ldr	r3, [pc, #148]	@ (8001134 <SystemClock_Config+0xcc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b22      	ldr	r3, [pc, #136]	@ (8001138 <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a21      	ldr	r2, [pc, #132]	@ (8001138 <SystemClock_Config+0xd0>)
 80010b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <SystemClock_Config+0xd0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010dc:	23a8      	movs	r3, #168	@ 0xa8
 80010de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010e4:	2307      	movs	r3, #7
 80010e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fbeb 	bl	80028c8 <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f8:	f000 f986 	bl	8001408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001100:	2302      	movs	r3, #2
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001108:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2105      	movs	r1, #5
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fe4c 	bl	8002db8 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001126:	f000 f96f 	bl	8001408 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	@ 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001140:	4b1f      	ldr	r3, [pc, #124]	@ (80011c0 <MX_ETH_Init+0x84>)
 8001142:	4a20      	ldr	r2, [pc, #128]	@ (80011c4 <MX_ETH_Init+0x88>)
 8001144:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <MX_ETH_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800114c:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <MX_ETH_Init+0x8c>)
 800114e:	2280      	movs	r2, #128	@ 0x80
 8001150:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001152:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <MX_ETH_Init+0x8c>)
 8001154:	22e1      	movs	r2, #225	@ 0xe1
 8001156:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001158:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <MX_ETH_Init+0x8c>)
 800115a:	2200      	movs	r2, #0
 800115c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800115e:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <MX_ETH_Init+0x8c>)
 8001160:	2200      	movs	r2, #0
 8001162:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001164:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <MX_ETH_Init+0x8c>)
 8001166:	2200      	movs	r2, #0
 8001168:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <MX_ETH_Init+0x84>)
 800116c:	4a16      	ldr	r2, [pc, #88]	@ (80011c8 <MX_ETH_Init+0x8c>)
 800116e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001170:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <MX_ETH_Init+0x84>)
 8001172:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001176:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <MX_ETH_Init+0x84>)
 800117a:	4a14      	ldr	r2, [pc, #80]	@ (80011cc <MX_ETH_Init+0x90>)
 800117c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <MX_ETH_Init+0x84>)
 8001180:	4a13      	ldr	r2, [pc, #76]	@ (80011d0 <MX_ETH_Init+0x94>)
 8001182:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001184:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <MX_ETH_Init+0x84>)
 8001186:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800118a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <MX_ETH_Init+0x84>)
 800118e:	f000 fd9f 	bl	8001cd0 <HAL_ETH_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001198:	f000 f936 	bl	8001408 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800119c:	2238      	movs	r2, #56	@ 0x38
 800119e:	2100      	movs	r1, #0
 80011a0:	480c      	ldr	r0, [pc, #48]	@ (80011d4 <MX_ETH_Init+0x98>)
 80011a2:	f003 fec4 	bl	8004f2e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <MX_ETH_Init+0x98>)
 80011a8:	2221      	movs	r2, #33	@ 0x21
 80011aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011ac:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_ETH_Init+0x98>)
 80011ae:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80011b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011b4:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <MX_ETH_Init+0x98>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000036c 	.word	0x2000036c
 80011c4:	40028000 	.word	0x40028000
 80011c8:	2000097c 	.word	0x2000097c
 80011cc:	200002cc 	.word	0x200002cc
 80011d0:	2000022c 	.word	0x2000022c
 80011d4:	200001f4 	.word	0x200001f4

080011d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <MX_USART2_UART_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_USART2_UART_Init+0x4c>)
 8001210:	f001 fff2 	bl	80031f8 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800121a:	f000 f8f5 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000041c 	.word	0x2000041c
 8001228:	40004400 	.word	0x40004400

0800122c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001230:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001232:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001236:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123a:	2204      	movs	r2, #4
 800123c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001240:	2202      	movs	r2, #2
 8001242:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001246:	2200      	movs	r2, #0
 8001248:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124c:	2202      	movs	r2, #2
 800124e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001252:	2201      	movs	r2, #1
 8001254:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800125c:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001264:	2201      	movs	r2, #1
 8001266:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001270:	f001 fa1b 	bl	80026aa <HAL_PCD_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800127a:	f000 f8c5 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000464 	.word	0x20000464

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	@ 0x30
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	4b54      	ldr	r3, [pc, #336]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a53      	ldr	r2, [pc, #332]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b51      	ldr	r3, [pc, #324]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	4b4d      	ldr	r3, [pc, #308]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a4c      	ldr	r2, [pc, #304]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b4a      	ldr	r3, [pc, #296]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b46      	ldr	r3, [pc, #280]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a45      	ldr	r2, [pc, #276]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b43      	ldr	r3, [pc, #268]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b3f      	ldr	r3, [pc, #252]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a3e      	ldr	r2, [pc, #248]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b3c      	ldr	r3, [pc, #240]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b38      	ldr	r3, [pc, #224]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a37      	ldr	r2, [pc, #220]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b35      	ldr	r3, [pc, #212]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b31      	ldr	r3, [pc, #196]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a30      	ldr	r2, [pc, #192]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 8001334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <MX_GPIO_Init+0x16c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f244 0181 	movw	r1, #16513	@ 0x4081
 800134c:	482a      	ldr	r0, [pc, #168]	@ (80013f8 <MX_GPIO_Init+0x170>)
 800134e:	f001 f993 	bl	8002678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2140      	movs	r1, #64	@ 0x40
 8001356:	4829      	ldr	r0, [pc, #164]	@ (80013fc <MX_GPIO_Init+0x174>)
 8001358:	f001 f98e 	bl	8002678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800135c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001362:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4823      	ldr	r0, [pc, #140]	@ (8001400 <MX_GPIO_Init+0x178>)
 8001374:	f000 ffd4 	bl	8002320 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001378:	f244 0381 	movw	r3, #16513	@ 0x4081
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	4819      	ldr	r0, [pc, #100]	@ (80013f8 <MX_GPIO_Init+0x170>)
 8001392:	f000 ffc5 	bl	8002320 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001396:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013a8:	2307      	movs	r3, #7
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4814      	ldr	r0, [pc, #80]	@ (8001404 <MX_GPIO_Init+0x17c>)
 80013b4:	f000 ffb4 	bl	8002320 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013b8:	2340      	movs	r3, #64	@ 0x40
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	480b      	ldr	r0, [pc, #44]	@ (80013fc <MX_GPIO_Init+0x174>)
 80013d0:	f000 ffa6 	bl	8002320 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013d4:	2380      	movs	r3, #128	@ 0x80
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_GPIO_Init+0x174>)
 80013e8:	f000 ff9a 	bl	8002320 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ec:	bf00      	nop
 80013ee:	3730      	adds	r7, #48	@ 0x30
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40021800 	.word	0x40021800
 8001400:	40020800 	.word	0x40020800
 8001404:	40020c00 	.word	0x40020c00

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <Error_Handler+0x8>

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <HAL_MspInit+0x4c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	4a0f      	ldr	r2, [pc, #60]	@ (8001460 <HAL_MspInit+0x4c>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001428:	6453      	str	r3, [r2, #68]	@ 0x44
 800142a:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <HAL_MspInit+0x4c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <HAL_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	4a08      	ldr	r2, [pc, #32]	@ (8001460 <HAL_MspInit+0x4c>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001444:	6413      	str	r3, [r2, #64]	@ 0x40
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <HAL_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800

08001464 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08e      	sub	sp, #56	@ 0x38
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a55      	ldr	r2, [pc, #340]	@ (80015d8 <HAL_ETH_MspInit+0x174>)
 8001482:	4293      	cmp	r3, r2
 8001484:	f040 80a4 	bne.w	80015d0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
 800148c:	4b53      	ldr	r3, [pc, #332]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001490:	4a52      	ldr	r2, [pc, #328]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 8001492:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001496:	6313      	str	r3, [r2, #48]	@ 0x30
 8001498:	4b50      	ldr	r3, [pc, #320]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a0:	623b      	str	r3, [r7, #32]
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	4b4c      	ldr	r3, [pc, #304]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ac:	4a4b      	ldr	r2, [pc, #300]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 80014ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b4:	4b49      	ldr	r3, [pc, #292]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	4b45      	ldr	r3, [pc, #276]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c8:	4a44      	ldr	r2, [pc, #272]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 80014ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d0:	4b42      	ldr	r3, [pc, #264]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	4b3e      	ldr	r3, [pc, #248]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e4:	4a3d      	ldr	r2, [pc, #244]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ec:	4b3b      	ldr	r3, [pc, #236]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001500:	4a36      	ldr	r2, [pc, #216]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6313      	str	r3, [r2, #48]	@ 0x30
 8001508:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	4b30      	ldr	r3, [pc, #192]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151c:	4a2f      	ldr	r2, [pc, #188]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	6313      	str	r3, [r2, #48]	@ 0x30
 8001524:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	4a28      	ldr	r2, [pc, #160]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 800153a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800153e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001540:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <HAL_ETH_MspInit+0x178>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800154c:	2332      	movs	r3, #50	@ 0x32
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800155c:	230b      	movs	r3, #11
 800155e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	481e      	ldr	r0, [pc, #120]	@ (80015e0 <HAL_ETH_MspInit+0x17c>)
 8001568:	f000 feda 	bl	8002320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800156c:	2386      	movs	r3, #134	@ 0x86
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800157c:	230b      	movs	r3, #11
 800157e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001584:	4619      	mov	r1, r3
 8001586:	4817      	ldr	r0, [pc, #92]	@ (80015e4 <HAL_ETH_MspInit+0x180>)
 8001588:	f000 feca 	bl	8002320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800158c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159a:	2303      	movs	r3, #3
 800159c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800159e:	230b      	movs	r3, #11
 80015a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	480f      	ldr	r0, [pc, #60]	@ (80015e8 <HAL_ETH_MspInit+0x184>)
 80015aa:	f000 feb9 	bl	8002320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80015ae:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015c0:	230b      	movs	r3, #11
 80015c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	4808      	ldr	r0, [pc, #32]	@ (80015ec <HAL_ETH_MspInit+0x188>)
 80015cc:	f000 fea8 	bl	8002320 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80015d0:	bf00      	nop
 80015d2:	3738      	adds	r7, #56	@ 0x38
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40028000 	.word	0x40028000
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40021800 	.word	0x40021800

080015f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a28      	ldr	r2, [pc, #160]	@ (80016b0 <HAL_UART_MspInit+0xc0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d149      	bne.n	80016a6 <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <HAL_UART_MspInit+0xc4>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	4a26      	ldr	r2, [pc, #152]	@ (80016b4 <HAL_UART_MspInit+0xc4>)
 800161c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001620:	6413      	str	r3, [r2, #64]	@ 0x40
 8001622:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <HAL_UART_MspInit+0xc4>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <HAL_UART_MspInit+0xc4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a1f      	ldr	r2, [pc, #124]	@ (80016b4 <HAL_UART_MspInit+0xc4>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <HAL_UART_MspInit+0xc4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <HAL_UART_MspInit+0xc4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	4a18      	ldr	r2, [pc, #96]	@ (80016b4 <HAL_UART_MspInit+0xc4>)
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	6313      	str	r3, [r2, #48]	@ 0x30
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <HAL_UART_MspInit+0xc4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001666:	2308      	movs	r3, #8
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001676:	2307      	movs	r3, #7
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	480d      	ldr	r0, [pc, #52]	@ (80016b8 <HAL_UART_MspInit+0xc8>)
 8001682:	f000 fe4d 	bl	8002320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001686:	2320      	movs	r3, #32
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001696:	2307      	movs	r3, #7
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4806      	ldr	r0, [pc, #24]	@ (80016bc <HAL_UART_MspInit+0xcc>)
 80016a2:	f000 fe3d 	bl	8002320 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	@ 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40004400 	.word	0x40004400
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020c00 	.word	0x40020c00

080016c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	@ 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016e0:	d13f      	bne.n	8001762 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	4b21      	ldr	r3, [pc, #132]	@ (800176c <HAL_PCD_MspInit+0xac>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a20      	ldr	r2, [pc, #128]	@ (800176c <HAL_PCD_MspInit+0xac>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <HAL_PCD_MspInit+0xac>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016fe:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001710:	230a      	movs	r3, #10
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4815      	ldr	r0, [pc, #84]	@ (8001770 <HAL_PCD_MspInit+0xb0>)
 800171c:	f000 fe00 	bl	8002320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	480e      	ldr	r0, [pc, #56]	@ (8001770 <HAL_PCD_MspInit+0xb0>)
 8001736:	f000 fdf3 	bl	8002320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <HAL_PCD_MspInit+0xac>)
 800173c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800173e:	4a0b      	ldr	r2, [pc, #44]	@ (800176c <HAL_PCD_MspInit+0xac>)
 8001740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001744:	6353      	str	r3, [r2, #52]	@ 0x34
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <HAL_PCD_MspInit+0xac>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	4a07      	ldr	r2, [pc, #28]	@ (800176c <HAL_PCD_MspInit+0xac>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001754:	6453      	str	r3, [r2, #68]	@ 0x44
 8001756:	4b05      	ldr	r3, [pc, #20]	@ (800176c <HAL_PCD_MspInit+0xac>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	@ 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40020000 	.word	0x40020000

08001774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <NMI_Handler+0x4>

0800177c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <HardFault_Handler+0x4>

08001784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <MemManage_Handler+0x4>

0800178c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <UsageFault_Handler+0x4>

0800179c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ca:	f000 f957 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  return 1;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <_kill>:

int _kill(int pid, int sig)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ec:	f003 fbf2 	bl	8004fd4 <__errno>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2216      	movs	r2, #22
 80017f4:	601a      	str	r2, [r3, #0]
  return -1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_exit>:

void _exit (int status)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800180a:	f04f 31ff 	mov.w	r1, #4294967295
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffe7 	bl	80017e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <_exit+0x12>

08001818 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	e00a      	b.n	8001840 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800182a:	f3af 8000 	nop.w
 800182e:	4601      	mov	r1, r0
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	60ba      	str	r2, [r7, #8]
 8001836:	b2ca      	uxtb	r2, r1
 8001838:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	dbf0      	blt.n	800182a <_read+0x12>
  }

  return len;
 8001848:	687b      	ldr	r3, [r7, #4]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	e009      	b.n	8001878 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	60ba      	str	r2, [r7, #8]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3301      	adds	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	429a      	cmp	r2, r3
 800187e:	dbf1      	blt.n	8001864 <_write+0x12>
  }
  return len;
 8001880:	687b      	ldr	r3, [r7, #4]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_close>:

int _close(int file)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b2:	605a      	str	r2, [r3, #4]
  return 0;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <_isatty>:

int _isatty(int file)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <_sbrk+0x5c>)
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <_sbrk+0x60>)
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001908:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <_sbrk+0x64>)
 8001912:	4a12      	ldr	r2, [pc, #72]	@ (800195c <_sbrk+0x68>)
 8001914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001916:	4b10      	ldr	r3, [pc, #64]	@ (8001958 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	429a      	cmp	r2, r3
 8001922:	d207      	bcs.n	8001934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001924:	f003 fb56 	bl	8004fd4 <__errno>
 8001928:	4603      	mov	r3, r0
 800192a:	220c      	movs	r2, #12
 800192c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	e009      	b.n	8001948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001934:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193a:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <_sbrk+0x64>)
 8001944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20030000 	.word	0x20030000
 8001954:	00000400 	.word	0x00000400
 8001958:	20000984 	.word	0x20000984
 800195c:	20000ad8 	.word	0x20000ad8

08001960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <SystemInit+0x20>)
 8001966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800196a:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <SystemInit+0x20>)
 800196c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001970:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001988:	f7ff ffea 	bl	8001960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800198c:	480c      	ldr	r0, [pc, #48]	@ (80019c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800198e:	490d      	ldr	r1, [pc, #52]	@ (80019c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001990:	4a0d      	ldr	r2, [pc, #52]	@ (80019c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019a4:	4c0a      	ldr	r4, [pc, #40]	@ (80019d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b2:	f003 fb15 	bl	8004fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b6:	f7ff fb25 	bl	8001004 <main>
  bx  lr    
 80019ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80019c8:	08008b58 	.word	0x08008b58
  ldr r2, =_sbss
 80019cc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80019d0:	20000ad8 	.word	0x20000ad8

080019d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC_IRQHandler>
	...

080019d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a18 <HAL_Init+0x40>)
 80019e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <HAL_Init+0x40>)
 80019ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <HAL_Init+0x40>)
 80019fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 f931 	bl	8001c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 f808 	bl	8001a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0c:	f7ff fd02 	bl	8001414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a24:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <HAL_InitTick+0x54>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <HAL_InitTick+0x58>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f93b 	bl	8001cb6 <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f000 f911 	bl	8001c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	@ (8001a78 <HAL_InitTick+0x5c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000004 	.word	0x20000004
 8001a74:	2000000c 	.word	0x2000000c
 8001a78:	20000008 	.word	0x20000008

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2000000c 	.word	0x2000000c
 8001aa0:	20000988 	.word	0x20000988

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000988 	.word	0x20000988

08001abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff ffee 	bl	8001aa4 <HAL_GetTick>
 8001ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d005      	beq.n	8001ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <HAL_Delay+0x44>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ae2:	bf00      	nop
 8001ae4:	f7ff ffde 	bl	8001aa4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8f7      	bhi.n	8001ae4 <HAL_Delay+0x28>
  {
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000000c 	.word	0x2000000c

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	@ (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	@ (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	@ (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	@ 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	@ 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c34:	d301      	bcc.n	8001c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00f      	b.n	8001c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <SysTick_Config+0x40>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c42:	210f      	movs	r1, #15
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f7ff ff8e 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <SysTick_Config+0x40>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <SysTick_Config+0x40>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff47 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c90:	f7ff ff5c 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f7ff ff8e 	bl	8001bbc <NVIC_EncodePriority>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff5d 	bl	8001b68 <__NVIC_SetPriority>
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffb0 	bl	8001c24 <SysTick_Config>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06c      	b.n	8001dbc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d106      	bne.n	8001cfa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2223      	movs	r2, #35	@ 0x23
 8001cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff fbb5 	bl	8001464 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b31      	ldr	r3, [pc, #196]	@ (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a30      	ldr	r2, [pc, #192]	@ (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d16:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc8 <HAL_ETH_Init+0xf8>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4a2b      	ldr	r2, [pc, #172]	@ (8001dc8 <HAL_ETH_Init+0xf8>)
 8001d1c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d20:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d22:	4b29      	ldr	r3, [pc, #164]	@ (8001dc8 <HAL_ETH_Init+0xf8>)
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4927      	ldr	r1, [pc, #156]	@ (8001dc8 <HAL_ETH_Init+0xf8>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001d30:	4b25      	ldr	r3, [pc, #148]	@ (8001dc8 <HAL_ETH_Init+0xf8>)
 8001d32:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d4c:	f7ff feaa 	bl	8001aa4 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d52:	e011      	b.n	8001d78 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d54:	f7ff fea6 	bl	8001aa4 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d62:	d909      	bls.n	8001d78 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2204      	movs	r2, #4
 8001d68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	22e0      	movs	r2, #224	@ 0xe0
 8001d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e021      	b.n	8001dbc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1e4      	bne.n	8001d54 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f958 	bl	8002040 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f9ff 	bl	8002194 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fa55 	bl	8002246 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	461a      	mov	r2, r3
 8001da2:	2100      	movs	r1, #0
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f9bd 	bl	8002124 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2210      	movs	r2, #16
 8001db6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40013800 	.word	0x40013800

08001dcc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4b51      	ldr	r3, [pc, #324]	@ (8001f28 <ETH_SetMACConfig+0x15c>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	7c1b      	ldrb	r3, [r3, #16]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d102      	bne.n	8001df4 <ETH_SetMACConfig+0x28>
 8001dee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001df2:	e000      	b.n	8001df6 <ETH_SetMACConfig+0x2a>
 8001df4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	7c5b      	ldrb	r3, [r3, #17]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d102      	bne.n	8001e04 <ETH_SetMACConfig+0x38>
 8001dfe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e02:	e000      	b.n	8001e06 <ETH_SetMACConfig+0x3a>
 8001e04:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e06:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	7fdb      	ldrb	r3, [r3, #31]
 8001e12:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e14:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	7f92      	ldrb	r2, [r2, #30]
 8001e20:	2a00      	cmp	r2, #0
 8001e22:	d102      	bne.n	8001e2a <ETH_SetMACConfig+0x5e>
 8001e24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e28:	e000      	b.n	8001e2c <ETH_SetMACConfig+0x60>
 8001e2a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e2c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	7f1b      	ldrb	r3, [r3, #28]
 8001e32:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e34:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e3a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	791b      	ldrb	r3, [r3, #4]
 8001e40:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001e42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e4a:	2a00      	cmp	r2, #0
 8001e4c:	d102      	bne.n	8001e54 <ETH_SetMACConfig+0x88>
 8001e4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e52:	e000      	b.n	8001e56 <ETH_SetMACConfig+0x8a>
 8001e54:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e56:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	7bdb      	ldrb	r3, [r3, #15]
 8001e5c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e5e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e6c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e86:	2001      	movs	r0, #1
 8001e88:	f7ff fe18 	bl	8001abc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eaa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001eb2:	2a00      	cmp	r2, #0
 8001eb4:	d101      	bne.n	8001eba <ETH_SetMACConfig+0xee>
 8001eb6:	2280      	movs	r2, #128	@ 0x80
 8001eb8:	e000      	b.n	8001ebc <ETH_SetMACConfig+0xf0>
 8001eba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ebc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ec2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001eca:	2a01      	cmp	r2, #1
 8001ecc:	d101      	bne.n	8001ed2 <ETH_SetMACConfig+0x106>
 8001ece:	2208      	movs	r2, #8
 8001ed0:	e000      	b.n	8001ed4 <ETH_SetMACConfig+0x108>
 8001ed2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001ed4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001edc:	2a01      	cmp	r2, #1
 8001ede:	d101      	bne.n	8001ee4 <ETH_SetMACConfig+0x118>
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	e000      	b.n	8001ee6 <ETH_SetMACConfig+0x11a>
 8001ee4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ee6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001eee:	2a01      	cmp	r2, #1
 8001ef0:	d101      	bne.n	8001ef6 <ETH_SetMACConfig+0x12a>
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	e000      	b.n	8001ef8 <ETH_SetMACConfig+0x12c>
 8001ef6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f10:	2001      	movs	r0, #1
 8001f12:	f7ff fdd3 	bl	8001abc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	619a      	str	r2, [r3, #24]
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	ff20810f 	.word	0xff20810f

08001f2c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4b3d      	ldr	r3, [pc, #244]	@ (800203c <ETH_SetDMAConfig+0x110>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	7b1b      	ldrb	r3, [r3, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <ETH_SetDMAConfig+0x2c>
 8001f52:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f56:	e000      	b.n	8001f5a <ETH_SetDMAConfig+0x2e>
 8001f58:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	7b5b      	ldrb	r3, [r3, #13]
 8001f5e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f60:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	7f52      	ldrb	r2, [r2, #29]
 8001f66:	2a00      	cmp	r2, #0
 8001f68:	d102      	bne.n	8001f70 <ETH_SetDMAConfig+0x44>
 8001f6a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001f6e:	e000      	b.n	8001f72 <ETH_SetDMAConfig+0x46>
 8001f70:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f72:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	7b9b      	ldrb	r3, [r3, #14]
 8001f78:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f7a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f80:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	7f1b      	ldrb	r3, [r3, #28]
 8001f86:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f88:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	7f9b      	ldrb	r3, [r3, #30]
 8001f8e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f90:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f96:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f9e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f7ff fd7a 	bl	8001abc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	791b      	ldrb	r3, [r3, #4]
 8001fda:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fe0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001fe6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001fec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ff4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ff6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ffe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002004:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800200e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002012:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002020:	2001      	movs	r0, #1
 8002022:	f7ff fd4b 	bl	8001abc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6013      	str	r3, [r2, #0]
}
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	f8de3f23 	.word	0xf8de3f23

08002040 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b0a6      	sub	sp, #152	@ 0x98
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002048:	2301      	movs	r3, #1
 800204a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800204e:	2301      	movs	r3, #1
 8002050:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002054:	2300      	movs	r3, #0
 8002056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800205e:	2301      	movs	r3, #1
 8002060:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800206a:	2301      	movs	r3, #1
 800206c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800207c:	2300      	movs	r3, #0
 800207e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002086:	2300      	movs	r3, #0
 8002088:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80020a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80020a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80020b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fe86 	bl	8001dcc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80020c0:	2301      	movs	r3, #1
 80020c2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80020c4:	2301      	movs	r3, #1
 80020c6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80020ec:	2301      	movs	r3, #1
 80020ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020f4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002100:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002102:	2301      	movs	r3, #1
 8002104:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002108:	2300      	movs	r3, #0
 800210a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002110:	f107 0308 	add.w	r3, r7, #8
 8002114:	4619      	mov	r1, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ff08 	bl	8001f2c <ETH_SetDMAConfig>
}
 800211c:	bf00      	nop
 800211e:	3798      	adds	r7, #152	@ 0x98
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3305      	adds	r3, #5
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	3204      	adds	r2, #4
 800213c:	7812      	ldrb	r2, [r2, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	4b11      	ldr	r3, [pc, #68]	@ (800218c <ETH_MACAddressConfig+0x68>)
 8002146:	4413      	add	r3, r2
 8002148:	461a      	mov	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3303      	adds	r3, #3
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	061a      	lsls	r2, r3, #24
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3302      	adds	r3, #2
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3301      	adds	r3, #1
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	4313      	orrs	r3, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <ETH_MACAddressConfig+0x6c>)
 8002176:	4413      	add	r3, r2
 8002178:	461a      	mov	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	6013      	str	r3, [r2, #0]
}
 800217e:	bf00      	nop
 8002180:	371c      	adds	r7, #28
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40028040 	.word	0x40028040
 8002190:	40028044 	.word	0x40028044

08002194 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e03e      	b.n	8002220 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68d9      	ldr	r1, [r3, #12]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2200      	movs	r2, #0
 80021be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2200      	movs	r2, #0
 80021ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	3206      	adds	r2, #6
 80021d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d80c      	bhi.n	8002204 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68d9      	ldr	r1, [r3, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	440b      	add	r3, r1
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	e004      	b.n	800220e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	461a      	mov	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3301      	adds	r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b03      	cmp	r3, #3
 8002224:	d9bd      	bls.n	80021a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002238:	611a      	str	r2, [r3, #16]
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002246:	b480      	push	{r7}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	e046      	b.n	80022e2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6919      	ldr	r1, [r3, #16]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2200      	movs	r2, #0
 8002270:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2200      	movs	r2, #0
 800227c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2200      	movs	r2, #0
 8002288:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002290:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002298:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	3212      	adds	r2, #18
 80022ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d80c      	bhi.n	80022d2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6919      	ldr	r1, [r3, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60da      	str	r2, [r3, #12]
 80022d0:	e004      	b.n	80022dc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	461a      	mov	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3301      	adds	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d9b5      	bls.n	8002254 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002312:	60da      	str	r2, [r3, #12]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	@ 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	e177      	b.n	800262c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800233c:	2201      	movs	r2, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	429a      	cmp	r2, r3
 8002356:	f040 8166 	bne.w	8002626 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b01      	cmp	r3, #1
 8002364:	d005      	beq.n	8002372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800236e:	2b02      	cmp	r3, #2
 8002370:	d130      	bne.n	80023d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a8:	2201      	movs	r2, #1
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 0201 	and.w	r2, r3, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d017      	beq.n	8002410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d123      	bne.n	8002464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	08da      	lsrs	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3208      	adds	r2, #8
 8002424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	220f      	movs	r2, #15
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	08da      	lsrs	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3208      	adds	r2, #8
 800245e:	69b9      	ldr	r1, [r7, #24]
 8002460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0203 	and.w	r2, r3, #3
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80c0 	beq.w	8002626 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	4b66      	ldr	r3, [pc, #408]	@ (8002644 <HAL_GPIO_Init+0x324>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	4a65      	ldr	r2, [pc, #404]	@ (8002644 <HAL_GPIO_Init+0x324>)
 80024b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024b6:	4b63      	ldr	r3, [pc, #396]	@ (8002644 <HAL_GPIO_Init+0x324>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c2:	4a61      	ldr	r2, [pc, #388]	@ (8002648 <HAL_GPIO_Init+0x328>)
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	220f      	movs	r2, #15
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a58      	ldr	r2, [pc, #352]	@ (800264c <HAL_GPIO_Init+0x32c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d037      	beq.n	800255e <HAL_GPIO_Init+0x23e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a57      	ldr	r2, [pc, #348]	@ (8002650 <HAL_GPIO_Init+0x330>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d031      	beq.n	800255a <HAL_GPIO_Init+0x23a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a56      	ldr	r2, [pc, #344]	@ (8002654 <HAL_GPIO_Init+0x334>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d02b      	beq.n	8002556 <HAL_GPIO_Init+0x236>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a55      	ldr	r2, [pc, #340]	@ (8002658 <HAL_GPIO_Init+0x338>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d025      	beq.n	8002552 <HAL_GPIO_Init+0x232>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a54      	ldr	r2, [pc, #336]	@ (800265c <HAL_GPIO_Init+0x33c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01f      	beq.n	800254e <HAL_GPIO_Init+0x22e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a53      	ldr	r2, [pc, #332]	@ (8002660 <HAL_GPIO_Init+0x340>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d019      	beq.n	800254a <HAL_GPIO_Init+0x22a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a52      	ldr	r2, [pc, #328]	@ (8002664 <HAL_GPIO_Init+0x344>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_GPIO_Init+0x226>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a51      	ldr	r2, [pc, #324]	@ (8002668 <HAL_GPIO_Init+0x348>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00d      	beq.n	8002542 <HAL_GPIO_Init+0x222>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a50      	ldr	r2, [pc, #320]	@ (800266c <HAL_GPIO_Init+0x34c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d007      	beq.n	800253e <HAL_GPIO_Init+0x21e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4f      	ldr	r2, [pc, #316]	@ (8002670 <HAL_GPIO_Init+0x350>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d101      	bne.n	800253a <HAL_GPIO_Init+0x21a>
 8002536:	2309      	movs	r3, #9
 8002538:	e012      	b.n	8002560 <HAL_GPIO_Init+0x240>
 800253a:	230a      	movs	r3, #10
 800253c:	e010      	b.n	8002560 <HAL_GPIO_Init+0x240>
 800253e:	2308      	movs	r3, #8
 8002540:	e00e      	b.n	8002560 <HAL_GPIO_Init+0x240>
 8002542:	2307      	movs	r3, #7
 8002544:	e00c      	b.n	8002560 <HAL_GPIO_Init+0x240>
 8002546:	2306      	movs	r3, #6
 8002548:	e00a      	b.n	8002560 <HAL_GPIO_Init+0x240>
 800254a:	2305      	movs	r3, #5
 800254c:	e008      	b.n	8002560 <HAL_GPIO_Init+0x240>
 800254e:	2304      	movs	r3, #4
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x240>
 8002552:	2303      	movs	r3, #3
 8002554:	e004      	b.n	8002560 <HAL_GPIO_Init+0x240>
 8002556:	2302      	movs	r3, #2
 8002558:	e002      	b.n	8002560 <HAL_GPIO_Init+0x240>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_GPIO_Init+0x240>
 800255e:	2300      	movs	r3, #0
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	f002 0203 	and.w	r2, r2, #3
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	4093      	lsls	r3, r2
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002570:	4935      	ldr	r1, [pc, #212]	@ (8002648 <HAL_GPIO_Init+0x328>)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800257e:	4b3d      	ldr	r3, [pc, #244]	@ (8002674 <HAL_GPIO_Init+0x354>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025a2:	4a34      	ldr	r2, [pc, #208]	@ (8002674 <HAL_GPIO_Init+0x354>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a8:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <HAL_GPIO_Init+0x354>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025cc:	4a29      	ldr	r2, [pc, #164]	@ (8002674 <HAL_GPIO_Init+0x354>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025d2:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <HAL_GPIO_Init+0x354>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002674 <HAL_GPIO_Init+0x354>)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <HAL_GPIO_Init+0x354>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002620:	4a14      	ldr	r2, [pc, #80]	@ (8002674 <HAL_GPIO_Init+0x354>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3301      	adds	r3, #1
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	2b0f      	cmp	r3, #15
 8002630:	f67f ae84 	bls.w	800233c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3724      	adds	r7, #36	@ 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800
 8002648:	40013800 	.word	0x40013800
 800264c:	40020000 	.word	0x40020000
 8002650:	40020400 	.word	0x40020400
 8002654:	40020800 	.word	0x40020800
 8002658:	40020c00 	.word	0x40020c00
 800265c:	40021000 	.word	0x40021000
 8002660:	40021400 	.word	0x40021400
 8002664:	40021800 	.word	0x40021800
 8002668:	40021c00 	.word	0x40021c00
 800266c:	40022000 	.word	0x40022000
 8002670:	40022400 	.word	0x40022400
 8002674:	40013c00 	.word	0x40013c00

08002678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
 8002684:	4613      	mov	r3, r2
 8002686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002688:	787b      	ldrb	r3, [r7, #1]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002694:	e003      	b.n	800269e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002696:	887b      	ldrh	r3, [r7, #2]
 8002698:	041a      	lsls	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	619a      	str	r2, [r3, #24]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af02      	add	r7, sp, #8
 80026b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e101      	b.n	80028c0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fff2 	bl	80016c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2203      	movs	r2, #3
 80026e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026ea:	d102      	bne.n	80026f2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 f9ee 	bl	8003ad8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7c1a      	ldrb	r2, [r3, #16]
 8002704:	f88d 2000 	strb.w	r2, [sp]
 8002708:	3304      	adds	r3, #4
 800270a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800270c:	f001 f980 	bl	8003a10 <USB_CoreInit>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2202      	movs	r2, #2
 800271a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e0ce      	b.n	80028c0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f001 f9e6 	bl	8003afa <USB_SetCurrentMode>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0bf      	b.n	80028c0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	e04a      	b.n	80027dc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	3315      	adds	r3, #21
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	3314      	adds	r3, #20
 800276a:	7bfa      	ldrb	r2, [r7, #15]
 800276c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	b298      	uxth	r0, r3
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	332e      	adds	r3, #46	@ 0x2e
 8002782:	4602      	mov	r2, r0
 8002784:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3318      	adds	r3, #24
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	331c      	adds	r3, #28
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	3320      	adds	r3, #32
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	3324      	adds	r3, #36	@ 0x24
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	3301      	adds	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	791b      	ldrb	r3, [r3, #4]
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d3af      	bcc.n	8002746 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]
 80027ea:	e044      	b.n	8002876 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	3301      	adds	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	791b      	ldrb	r3, [r3, #4]
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	429a      	cmp	r2, r3
 800287e:	d3b5      	bcc.n	80027ec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7c1a      	ldrb	r2, [r3, #16]
 8002888:	f88d 2000 	strb.w	r2, [sp]
 800288c:	3304      	adds	r3, #4
 800288e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002890:	f001 f980 	bl	8003b94 <USB_DevInit>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2202      	movs	r2, #2
 800289e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00c      	b.n	80028c0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 fb48 	bl	8003f4e <USB_DevDisconnect>

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e267      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d075      	beq.n	80029d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028e6:	4b88      	ldr	r3, [pc, #544]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d00c      	beq.n	800290c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f2:	4b85      	ldr	r3, [pc, #532]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d112      	bne.n	8002924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fe:	4b82      	ldr	r3, [pc, #520]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002906:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800290a:	d10b      	bne.n	8002924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d05b      	beq.n	80029d0 <HAL_RCC_OscConfig+0x108>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d157      	bne.n	80029d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e242      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800292c:	d106      	bne.n	800293c <HAL_RCC_OscConfig+0x74>
 800292e:	4b76      	ldr	r3, [pc, #472]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a75      	ldr	r2, [pc, #468]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e01d      	b.n	8002978 <HAL_RCC_OscConfig+0xb0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x98>
 8002946:	4b70      	ldr	r3, [pc, #448]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6f      	ldr	r2, [pc, #444]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 800294c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b6d      	ldr	r3, [pc, #436]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6c      	ldr	r2, [pc, #432]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0xb0>
 8002960:	4b69      	ldr	r3, [pc, #420]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a68      	ldr	r2, [pc, #416]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	4b66      	ldr	r3, [pc, #408]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a65      	ldr	r2, [pc, #404]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7ff f890 	bl	8001aa4 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002988:	f7ff f88c 	bl	8001aa4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	@ 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e207      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b5b      	ldr	r3, [pc, #364]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0xc0>
 80029a6:	e014      	b.n	80029d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7ff f87c 	bl	8001aa4 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b0:	f7ff f878 	bl	8001aa4 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	@ 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e1f3      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	4b51      	ldr	r3, [pc, #324]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0xe8>
 80029ce:	e000      	b.n	80029d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d063      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029de:	4b4a      	ldr	r3, [pc, #296]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ea:	4b47      	ldr	r3, [pc, #284]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d11c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f6:	4b44      	ldr	r3, [pc, #272]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d116      	bne.n	8002a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a02:	4b41      	ldr	r3, [pc, #260]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_RCC_OscConfig+0x152>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e1c7      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4937      	ldr	r1, [pc, #220]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2e:	e03a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d020      	beq.n	8002a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a38:	4b34      	ldr	r3, [pc, #208]	@ (8002b0c <HAL_RCC_OscConfig+0x244>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7ff f831 	bl	8001aa4 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a46:	f7ff f82d 	bl	8001aa4 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1a8      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	4b2b      	ldr	r3, [pc, #172]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a64:	4b28      	ldr	r3, [pc, #160]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4925      	ldr	r1, [pc, #148]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]
 8002a78:	e015      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7a:	4b24      	ldr	r3, [pc, #144]	@ (8002b0c <HAL_RCC_OscConfig+0x244>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7ff f810 	bl	8001aa4 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a88:	f7ff f80c 	bl	8001aa4 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e187      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d036      	beq.n	8002b20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d016      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aba:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <HAL_RCC_OscConfig+0x248>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7fe fff0 	bl	8001aa4 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac8:	f7fe ffec 	bl	8001aa4 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e167      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x200>
 8002ae6:	e01b      	b.n	8002b20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae8:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <HAL_RCC_OscConfig+0x248>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7fe ffd9 	bl	8001aa4 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	e00e      	b.n	8002b14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af6:	f7fe ffd5 	bl	8001aa4 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d907      	bls.n	8002b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e150      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	42470000 	.word	0x42470000
 8002b10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	4b88      	ldr	r3, [pc, #544]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ea      	bne.n	8002af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8097 	beq.w	8002c5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b32:	4b81      	ldr	r3, [pc, #516]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10f      	bne.n	8002b5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	4b7d      	ldr	r3, [pc, #500]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	4a7c      	ldr	r2, [pc, #496]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b77      	ldr	r3, [pc, #476]	@ (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d118      	bne.n	8002b9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	4b74      	ldr	r3, [pc, #464]	@ (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a73      	ldr	r2, [pc, #460]	@ (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b76:	f7fe ff95 	bl	8001aa4 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7e:	f7fe ff91 	bl	8001aa4 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e10c      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	4b6a      	ldr	r3, [pc, #424]	@ (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x2ea>
 8002ba4:	4b64      	ldr	r3, [pc, #400]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba8:	4a63      	ldr	r2, [pc, #396]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb0:	e01c      	b.n	8002bec <HAL_RCC_OscConfig+0x324>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x30c>
 8002bba:	4b5f      	ldr	r3, [pc, #380]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbe:	4a5e      	ldr	r2, [pc, #376]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bca:	4a5b      	ldr	r2, [pc, #364]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0x324>
 8002bd4:	4b58      	ldr	r3, [pc, #352]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd8:	4a57      	ldr	r2, [pc, #348]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be0:	4b55      	ldr	r3, [pc, #340]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be4:	4a54      	ldr	r2, [pc, #336]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002be6:	f023 0304 	bic.w	r3, r3, #4
 8002bea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d015      	beq.n	8002c20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7fe ff56 	bl	8001aa4 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7fe ff52 	bl	8001aa4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e0cb      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	4b49      	ldr	r3, [pc, #292]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0ee      	beq.n	8002bfc <HAL_RCC_OscConfig+0x334>
 8002c1e:	e014      	b.n	8002c4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c20:	f7fe ff40 	bl	8001aa4 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f7fe ff3c 	bl	8001aa4 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e0b5      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1ee      	bne.n	8002c28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c50:	4b39      	ldr	r3, [pc, #228]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	4a38      	ldr	r2, [pc, #224]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80a1 	beq.w	8002da8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c66:	4b34      	ldr	r3, [pc, #208]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d05c      	beq.n	8002d2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d141      	bne.n	8002cfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7a:	4b31      	ldr	r3, [pc, #196]	@ (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe ff10 	bl	8001aa4 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe ff0c 	bl	8001aa4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e087      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	4b27      	ldr	r3, [pc, #156]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	061b      	lsls	r3, r3, #24
 8002cca:	491b      	ldr	r1, [pc, #108]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fee5 	bl	8001aa4 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cde:	f7fe fee1 	bl	8001aa4 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e05c      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf0:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x416>
 8002cfc:	e054      	b.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe fece 	bl	8001aa4 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fe feca 	bl	8001aa4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e045      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x444>
 8002d2a:	e03d      	b.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e038      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40007000 	.word	0x40007000
 8002d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d44:	4b1b      	ldr	r3, [pc, #108]	@ (8002db4 <HAL_RCC_OscConfig+0x4ec>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d028      	beq.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d121      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d11a      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d111      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800

08002db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0cc      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b68      	ldr	r3, [pc, #416]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d90c      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b65      	ldr	r3, [pc, #404]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b63      	ldr	r3, [pc, #396]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0b8      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e0c:	4b59      	ldr	r3, [pc, #356]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a58      	ldr	r2, [pc, #352]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e24:	4b53      	ldr	r3, [pc, #332]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a52      	ldr	r2, [pc, #328]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e30:	4b50      	ldr	r3, [pc, #320]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	494d      	ldr	r1, [pc, #308]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d044      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b47      	ldr	r3, [pc, #284]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d119      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e07f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d003      	beq.n	8002e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	4b3f      	ldr	r3, [pc, #252]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e06f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e86:	4b3b      	ldr	r3, [pc, #236]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e067      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e96:	4b37      	ldr	r3, [pc, #220]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4934      	ldr	r1, [pc, #208]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea8:	f7fe fdfc 	bl	8001aa4 <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb0:	f7fe fdf8 	bl	8001aa4 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e04f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 020c 	and.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1eb      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b25      	ldr	r3, [pc, #148]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d20c      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b22      	ldr	r3, [pc, #136]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b20      	ldr	r3, [pc, #128]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e032      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	4b19      	ldr	r3, [pc, #100]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4916      	ldr	r1, [pc, #88]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2a:	4b12      	ldr	r3, [pc, #72]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	490e      	ldr	r1, [pc, #56]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f3e:	f000 f821 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	490a      	ldr	r1, [pc, #40]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	5ccb      	ldrb	r3, [r1, r3]
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	4a09      	ldr	r2, [pc, #36]	@ (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f5a:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fd5c 	bl	8001a1c <HAL_InitTick>

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023c00 	.word	0x40023c00
 8002f74:	40023800 	.word	0x40023800
 8002f78:	08008700 	.word	0x08008700
 8002f7c:	20000004 	.word	0x20000004
 8002f80:	20000008 	.word	0x20000008

08002f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f88:	b094      	sub	sp, #80	@ 0x50
 8002f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f90:	2300      	movs	r3, #0
 8002f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f94:	2300      	movs	r3, #0
 8002f96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f9c:	4b79      	ldr	r3, [pc, #484]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	f200 80e1 	bhi.w	8003170 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d003      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002fb6:	e0db      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fb8:	4b73      	ldr	r3, [pc, #460]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fba:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002fbc:	e0db      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fbe:	4b73      	ldr	r3, [pc, #460]	@ (800318c <HAL_RCC_GetSysClockFreq+0x208>)
 8002fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fc2:	e0d8      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fcc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fce:	4b6d      	ldr	r3, [pc, #436]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d063      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fda:	4b6a      	ldr	r3, [pc, #424]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fe4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fee:	2300      	movs	r3, #0
 8002ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ff2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ff6:	4622      	mov	r2, r4
 8002ff8:	462b      	mov	r3, r5
 8002ffa:	f04f 0000 	mov.w	r0, #0
 8002ffe:	f04f 0100 	mov.w	r1, #0
 8003002:	0159      	lsls	r1, r3, #5
 8003004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003008:	0150      	lsls	r0, r2, #5
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4621      	mov	r1, r4
 8003010:	1a51      	subs	r1, r2, r1
 8003012:	6139      	str	r1, [r7, #16]
 8003014:	4629      	mov	r1, r5
 8003016:	eb63 0301 	sbc.w	r3, r3, r1
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003028:	4659      	mov	r1, fp
 800302a:	018b      	lsls	r3, r1, #6
 800302c:	4651      	mov	r1, sl
 800302e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003032:	4651      	mov	r1, sl
 8003034:	018a      	lsls	r2, r1, #6
 8003036:	4651      	mov	r1, sl
 8003038:	ebb2 0801 	subs.w	r8, r2, r1
 800303c:	4659      	mov	r1, fp
 800303e:	eb63 0901 	sbc.w	r9, r3, r1
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800304e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003056:	4690      	mov	r8, r2
 8003058:	4699      	mov	r9, r3
 800305a:	4623      	mov	r3, r4
 800305c:	eb18 0303 	adds.w	r3, r8, r3
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	462b      	mov	r3, r5
 8003064:	eb49 0303 	adc.w	r3, r9, r3
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003076:	4629      	mov	r1, r5
 8003078:	024b      	lsls	r3, r1, #9
 800307a:	4621      	mov	r1, r4
 800307c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003080:	4621      	mov	r1, r4
 8003082:	024a      	lsls	r2, r1, #9
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800308a:	2200      	movs	r2, #0
 800308c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800308e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003090:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003094:	f7fd fe08 	bl	8000ca8 <__aeabi_uldivmod>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4613      	mov	r3, r2
 800309e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030a0:	e058      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a2:	4b38      	ldr	r3, [pc, #224]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	2200      	movs	r2, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	4611      	mov	r1, r2
 80030ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030b2:	623b      	str	r3, [r7, #32]
 80030b4:	2300      	movs	r3, #0
 80030b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030bc:	4642      	mov	r2, r8
 80030be:	464b      	mov	r3, r9
 80030c0:	f04f 0000 	mov.w	r0, #0
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	0159      	lsls	r1, r3, #5
 80030ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ce:	0150      	lsls	r0, r2, #5
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4641      	mov	r1, r8
 80030d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030da:	4649      	mov	r1, r9
 80030dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030f4:	ebb2 040a 	subs.w	r4, r2, sl
 80030f8:	eb63 050b 	sbc.w	r5, r3, fp
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	00eb      	lsls	r3, r5, #3
 8003106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800310a:	00e2      	lsls	r2, r4, #3
 800310c:	4614      	mov	r4, r2
 800310e:	461d      	mov	r5, r3
 8003110:	4643      	mov	r3, r8
 8003112:	18e3      	adds	r3, r4, r3
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	464b      	mov	r3, r9
 8003118:	eb45 0303 	adc.w	r3, r5, r3
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800312a:	4629      	mov	r1, r5
 800312c:	028b      	lsls	r3, r1, #10
 800312e:	4621      	mov	r1, r4
 8003130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003134:	4621      	mov	r1, r4
 8003136:	028a      	lsls	r2, r1, #10
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800313e:	2200      	movs	r2, #0
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	61fa      	str	r2, [r7, #28]
 8003144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003148:	f7fd fdae 	bl	8000ca8 <__aeabi_uldivmod>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4613      	mov	r3, r2
 8003152:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003154:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x200>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	3301      	adds	r3, #1
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003164:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800316e:	e002      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003170:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <HAL_RCC_GetSysClockFreq+0x204>)
 8003172:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003178:	4618      	mov	r0, r3
 800317a:	3750      	adds	r7, #80	@ 0x50
 800317c:	46bd      	mov	sp, r7
 800317e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	00f42400 	.word	0x00f42400
 800318c:	007a1200 	.word	0x007a1200

08003190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003194:	4b03      	ldr	r3, [pc, #12]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000004 	.word	0x20000004

080031a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031ac:	f7ff fff0 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	0a9b      	lsrs	r3, r3, #10
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	@ (80031cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40023800 	.word	0x40023800
 80031cc:	08008710 	.word	0x08008710

080031d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031d4:	f7ff ffdc 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0b5b      	lsrs	r3, r3, #13
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4903      	ldr	r1, [pc, #12]	@ (80031f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	08008710 	.word	0x08008710

080031f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e042      	b.n	8003290 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fe f9e6 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2224      	movs	r2, #36	@ 0x24
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800323a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f973 	bl	8003528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	@ 0x28
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d175      	bne.n	80033a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_UART_Transmit+0x2c>
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e06e      	b.n	80033a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2221      	movs	r2, #33	@ 0x21
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d6:	f7fe fbe5 	bl	8001aa4 <HAL_GetTick>
 80032da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	88fa      	ldrh	r2, [r7, #6]
 80032e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032f0:	d108      	bne.n	8003304 <HAL_UART_Transmit+0x6c>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e003      	b.n	800330c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800330c:	e02e      	b.n	800336c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	2180      	movs	r1, #128	@ 0x80
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f848 	bl	80033ae <UART_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e03a      	b.n	80033a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10b      	bne.n	800334e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003344:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	3302      	adds	r3, #2
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e007      	b.n	800335e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	3301      	adds	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1cb      	bne.n	800330e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2200      	movs	r2, #0
 800337e:	2140      	movs	r1, #64	@ 0x40
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f814 	bl	80033ae <UART_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e006      	b.n	80033a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	e000      	b.n	80033a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033a4:	2302      	movs	r3, #2
  }
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b086      	sub	sp, #24
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	4613      	mov	r3, r2
 80033bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033be:	e03b      	b.n	8003438 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c6:	d037      	beq.n	8003438 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c8:	f7fe fb6c 	bl	8001aa4 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	6a3a      	ldr	r2, [r7, #32]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d302      	bcc.n	80033de <UART_WaitOnFlagUntilTimeout+0x30>
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e03a      	b.n	8003458 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d023      	beq.n	8003438 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b80      	cmp	r3, #128	@ 0x80
 80033f4:	d020      	beq.n	8003438 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b40      	cmp	r3, #64	@ 0x40
 80033fa:	d01d      	beq.n	8003438 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b08      	cmp	r3, #8
 8003408:	d116      	bne.n	8003438 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f81d 	bl	8003460 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2208      	movs	r2, #8
 800342a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e00f      	b.n	8003458 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4013      	ands	r3, r2
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	429a      	cmp	r2, r3
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	429a      	cmp	r2, r3
 8003454:	d0b4      	beq.n	80033c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003460:	b480      	push	{r7}
 8003462:	b095      	sub	sp, #84	@ 0x54
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	330c      	adds	r3, #12
 800346e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800347e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	330c      	adds	r3, #12
 8003486:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003488:	643a      	str	r2, [r7, #64]	@ 0x40
 800348a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800348e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e5      	bne.n	8003468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3314      	adds	r3, #20
 80034a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3314      	adds	r3, #20
 80034ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e5      	bne.n	800349c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d119      	bne.n	800350c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f023 0310 	bic.w	r3, r3, #16
 80034ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034f8:	61ba      	str	r2, [r7, #24]
 80034fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6979      	ldr	r1, [r7, #20]
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	613b      	str	r3, [r7, #16]
   return(result);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e5      	bne.n	80034d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800351a:	bf00      	nop
 800351c:	3754      	adds	r7, #84	@ 0x54
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800352c:	b0c0      	sub	sp, #256	@ 0x100
 800352e:	af00      	add	r7, sp, #0
 8003530:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003544:	68d9      	ldr	r1, [r3, #12]
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	ea40 0301 	orr.w	r3, r0, r1
 8003550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	431a      	orrs	r2, r3
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	431a      	orrs	r2, r3
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003580:	f021 010c 	bic.w	r1, r1, #12
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800358e:	430b      	orrs	r3, r1
 8003590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800359e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a2:	6999      	ldr	r1, [r3, #24]
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	ea40 0301 	orr.w	r3, r0, r1
 80035ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4b8f      	ldr	r3, [pc, #572]	@ (80037f4 <UART_SetConfig+0x2cc>)
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d005      	beq.n	80035c8 <UART_SetConfig+0xa0>
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4b8d      	ldr	r3, [pc, #564]	@ (80037f8 <UART_SetConfig+0x2d0>)
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d104      	bne.n	80035d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035c8:	f7ff fe02 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 80035cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80035d0:	e003      	b.n	80035da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035d2:	f7ff fde9 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 80035d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035e4:	f040 810c 	bne.w	8003800 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ec:	2200      	movs	r2, #0
 80035ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80035f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80035fa:	4622      	mov	r2, r4
 80035fc:	462b      	mov	r3, r5
 80035fe:	1891      	adds	r1, r2, r2
 8003600:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003602:	415b      	adcs	r3, r3
 8003604:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800360a:	4621      	mov	r1, r4
 800360c:	eb12 0801 	adds.w	r8, r2, r1
 8003610:	4629      	mov	r1, r5
 8003612:	eb43 0901 	adc.w	r9, r3, r1
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800362a:	4690      	mov	r8, r2
 800362c:	4699      	mov	r9, r3
 800362e:	4623      	mov	r3, r4
 8003630:	eb18 0303 	adds.w	r3, r8, r3
 8003634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003638:	462b      	mov	r3, r5
 800363a:	eb49 0303 	adc.w	r3, r9, r3
 800363e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800364e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003656:	460b      	mov	r3, r1
 8003658:	18db      	adds	r3, r3, r3
 800365a:	653b      	str	r3, [r7, #80]	@ 0x50
 800365c:	4613      	mov	r3, r2
 800365e:	eb42 0303 	adc.w	r3, r2, r3
 8003662:	657b      	str	r3, [r7, #84]	@ 0x54
 8003664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003668:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800366c:	f7fd fb1c 	bl	8000ca8 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4b61      	ldr	r3, [pc, #388]	@ (80037fc <UART_SetConfig+0x2d4>)
 8003676:	fba3 2302 	umull	r2, r3, r3, r2
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	011c      	lsls	r4, r3, #4
 800367e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003682:	2200      	movs	r2, #0
 8003684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003688:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800368c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003690:	4642      	mov	r2, r8
 8003692:	464b      	mov	r3, r9
 8003694:	1891      	adds	r1, r2, r2
 8003696:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003698:	415b      	adcs	r3, r3
 800369a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800369c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036a0:	4641      	mov	r1, r8
 80036a2:	eb12 0a01 	adds.w	sl, r2, r1
 80036a6:	4649      	mov	r1, r9
 80036a8:	eb43 0b01 	adc.w	fp, r3, r1
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036c0:	4692      	mov	sl, r2
 80036c2:	469b      	mov	fp, r3
 80036c4:	4643      	mov	r3, r8
 80036c6:	eb1a 0303 	adds.w	r3, sl, r3
 80036ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036ce:	464b      	mov	r3, r9
 80036d0:	eb4b 0303 	adc.w	r3, fp, r3
 80036d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036ec:	460b      	mov	r3, r1
 80036ee:	18db      	adds	r3, r3, r3
 80036f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80036f2:	4613      	mov	r3, r2
 80036f4:	eb42 0303 	adc.w	r3, r2, r3
 80036f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003702:	f7fd fad1 	bl	8000ca8 <__aeabi_uldivmod>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4611      	mov	r1, r2
 800370c:	4b3b      	ldr	r3, [pc, #236]	@ (80037fc <UART_SetConfig+0x2d4>)
 800370e:	fba3 2301 	umull	r2, r3, r3, r1
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2264      	movs	r2, #100	@ 0x64
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	1acb      	subs	r3, r1, r3
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003722:	4b36      	ldr	r3, [pc, #216]	@ (80037fc <UART_SetConfig+0x2d4>)
 8003724:	fba3 2302 	umull	r2, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003730:	441c      	add	r4, r3
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800373c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003740:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	1891      	adds	r1, r2, r2
 800374a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800374c:	415b      	adcs	r3, r3
 800374e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003754:	4641      	mov	r1, r8
 8003756:	1851      	adds	r1, r2, r1
 8003758:	6339      	str	r1, [r7, #48]	@ 0x30
 800375a:	4649      	mov	r1, r9
 800375c:	414b      	adcs	r3, r1
 800375e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800376c:	4659      	mov	r1, fp
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4651      	mov	r1, sl
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4642      	mov	r2, r8
 8003782:	189b      	adds	r3, r3, r2
 8003784:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003788:	464b      	mov	r3, r9
 800378a:	460a      	mov	r2, r1
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80037a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037a8:	460b      	mov	r3, r1
 80037aa:	18db      	adds	r3, r3, r3
 80037ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ae:	4613      	mov	r3, r2
 80037b0:	eb42 0303 	adc.w	r3, r2, r3
 80037b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80037be:	f7fd fa73 	bl	8000ca8 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <UART_SetConfig+0x2d4>)
 80037c8:	fba3 1302 	umull	r1, r3, r3, r2
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	2164      	movs	r1, #100	@ 0x64
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	3332      	adds	r3, #50	@ 0x32
 80037da:	4a08      	ldr	r2, [pc, #32]	@ (80037fc <UART_SetConfig+0x2d4>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	f003 0207 	and.w	r2, r3, #7
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4422      	add	r2, r4
 80037ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037f0:	e106      	b.n	8003a00 <UART_SetConfig+0x4d8>
 80037f2:	bf00      	nop
 80037f4:	40011000 	.word	0x40011000
 80037f8:	40011400 	.word	0x40011400
 80037fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003804:	2200      	movs	r2, #0
 8003806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800380a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800380e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003812:	4642      	mov	r2, r8
 8003814:	464b      	mov	r3, r9
 8003816:	1891      	adds	r1, r2, r2
 8003818:	6239      	str	r1, [r7, #32]
 800381a:	415b      	adcs	r3, r3
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
 800381e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003822:	4641      	mov	r1, r8
 8003824:	1854      	adds	r4, r2, r1
 8003826:	4649      	mov	r1, r9
 8003828:	eb43 0501 	adc.w	r5, r3, r1
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	00eb      	lsls	r3, r5, #3
 8003836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800383a:	00e2      	lsls	r2, r4, #3
 800383c:	4614      	mov	r4, r2
 800383e:	461d      	mov	r5, r3
 8003840:	4643      	mov	r3, r8
 8003842:	18e3      	adds	r3, r4, r3
 8003844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003848:	464b      	mov	r3, r9
 800384a:	eb45 0303 	adc.w	r3, r5, r3
 800384e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800385e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800386e:	4629      	mov	r1, r5
 8003870:	008b      	lsls	r3, r1, #2
 8003872:	4621      	mov	r1, r4
 8003874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003878:	4621      	mov	r1, r4
 800387a:	008a      	lsls	r2, r1, #2
 800387c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003880:	f7fd fa12 	bl	8000ca8 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4b60      	ldr	r3, [pc, #384]	@ (8003a0c <UART_SetConfig+0x4e4>)
 800388a:	fba3 2302 	umull	r2, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	011c      	lsls	r4, r3, #4
 8003892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800389c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80038a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80038a4:	4642      	mov	r2, r8
 80038a6:	464b      	mov	r3, r9
 80038a8:	1891      	adds	r1, r2, r2
 80038aa:	61b9      	str	r1, [r7, #24]
 80038ac:	415b      	adcs	r3, r3
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038b4:	4641      	mov	r1, r8
 80038b6:	1851      	adds	r1, r2, r1
 80038b8:	6139      	str	r1, [r7, #16]
 80038ba:	4649      	mov	r1, r9
 80038bc:	414b      	adcs	r3, r1
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038cc:	4659      	mov	r1, fp
 80038ce:	00cb      	lsls	r3, r1, #3
 80038d0:	4651      	mov	r1, sl
 80038d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038d6:	4651      	mov	r1, sl
 80038d8:	00ca      	lsls	r2, r1, #3
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	4603      	mov	r3, r0
 80038e0:	4642      	mov	r2, r8
 80038e2:	189b      	adds	r3, r3, r2
 80038e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038e8:	464b      	mov	r3, r9
 80038ea:	460a      	mov	r2, r1
 80038ec:	eb42 0303 	adc.w	r3, r2, r3
 80038f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800390c:	4649      	mov	r1, r9
 800390e:	008b      	lsls	r3, r1, #2
 8003910:	4641      	mov	r1, r8
 8003912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003916:	4641      	mov	r1, r8
 8003918:	008a      	lsls	r2, r1, #2
 800391a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800391e:	f7fd f9c3 	bl	8000ca8 <__aeabi_uldivmod>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4611      	mov	r1, r2
 8003928:	4b38      	ldr	r3, [pc, #224]	@ (8003a0c <UART_SetConfig+0x4e4>)
 800392a:	fba3 2301 	umull	r2, r3, r3, r1
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	2264      	movs	r2, #100	@ 0x64
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	1acb      	subs	r3, r1, r3
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	3332      	adds	r3, #50	@ 0x32
 800393c:	4a33      	ldr	r2, [pc, #204]	@ (8003a0c <UART_SetConfig+0x4e4>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003948:	441c      	add	r4, r3
 800394a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800394e:	2200      	movs	r2, #0
 8003950:	673b      	str	r3, [r7, #112]	@ 0x70
 8003952:	677a      	str	r2, [r7, #116]	@ 0x74
 8003954:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003958:	4642      	mov	r2, r8
 800395a:	464b      	mov	r3, r9
 800395c:	1891      	adds	r1, r2, r2
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	415b      	adcs	r3, r3
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003968:	4641      	mov	r1, r8
 800396a:	1851      	adds	r1, r2, r1
 800396c:	6039      	str	r1, [r7, #0]
 800396e:	4649      	mov	r1, r9
 8003970:	414b      	adcs	r3, r1
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003980:	4659      	mov	r1, fp
 8003982:	00cb      	lsls	r3, r1, #3
 8003984:	4651      	mov	r1, sl
 8003986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398a:	4651      	mov	r1, sl
 800398c:	00ca      	lsls	r2, r1, #3
 800398e:	4610      	mov	r0, r2
 8003990:	4619      	mov	r1, r3
 8003992:	4603      	mov	r3, r0
 8003994:	4642      	mov	r2, r8
 8003996:	189b      	adds	r3, r3, r2
 8003998:	66bb      	str	r3, [r7, #104]	@ 0x68
 800399a:	464b      	mov	r3, r9
 800399c:	460a      	mov	r2, r1
 800399e:	eb42 0303 	adc.w	r3, r2, r3
 80039a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80039ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80039bc:	4649      	mov	r1, r9
 80039be:	008b      	lsls	r3, r1, #2
 80039c0:	4641      	mov	r1, r8
 80039c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c6:	4641      	mov	r1, r8
 80039c8:	008a      	lsls	r2, r1, #2
 80039ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80039ce:	f7fd f96b 	bl	8000ca8 <__aeabi_uldivmod>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a0c <UART_SetConfig+0x4e4>)
 80039d8:	fba3 1302 	umull	r1, r3, r3, r2
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	2164      	movs	r1, #100	@ 0x64
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	3332      	adds	r3, #50	@ 0x32
 80039ea:	4a08      	ldr	r2, [pc, #32]	@ (8003a0c <UART_SetConfig+0x4e4>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	f003 020f 	and.w	r2, r3, #15
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4422      	add	r2, r4
 80039fe:	609a      	str	r2, [r3, #8]
}
 8003a00:	bf00      	nop
 8003a02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003a06:	46bd      	mov	sp, r7
 8003a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a0c:	51eb851f 	.word	0x51eb851f

08003a10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a10:	b084      	sub	sp, #16
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	f107 001c 	add.w	r0, r7, #28
 8003a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d123      	bne.n	8003a72 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003a3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d105      	bne.n	8003a66 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 faa0 	bl	8003fac <USB_CoreReset>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e01b      	b.n	8003aaa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fa94 	bl	8003fac <USB_CoreReset>
 8003a84:	4603      	mov	r3, r0
 8003a86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d106      	bne.n	8003a9e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a9c:	e005      	b.n	8003aaa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003aaa:	7fbb      	ldrb	r3, [r7, #30]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d10b      	bne.n	8003ac8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f043 0206 	orr.w	r2, r3, #6
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f043 0220 	orr.w	r2, r3, #32
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ad4:	b004      	add	sp, #16
 8003ad6:	4770      	bx	lr

08003ad8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f023 0201 	bic.w	r2, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	460b      	mov	r3, r1
 8003b04:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d115      	bne.n	8003b48 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003b28:	200a      	movs	r0, #10
 8003b2a:	f7fd ffc7 	bl	8001abc <HAL_Delay>
      ms += 10U;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	330a      	adds	r3, #10
 8003b32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fa2b 	bl	8003f90 <USB_GetMode>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d01e      	beq.n	8003b7e <USB_SetCurrentMode+0x84>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2bc7      	cmp	r3, #199	@ 0xc7
 8003b44:	d9f0      	bls.n	8003b28 <USB_SetCurrentMode+0x2e>
 8003b46:	e01a      	b.n	8003b7e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d115      	bne.n	8003b7a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003b5a:	200a      	movs	r0, #10
 8003b5c:	f7fd ffae 	bl	8001abc <HAL_Delay>
      ms += 10U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	330a      	adds	r3, #10
 8003b64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fa12 	bl	8003f90 <USB_GetMode>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <USB_SetCurrentMode+0x84>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2bc7      	cmp	r3, #199	@ 0xc7
 8003b76:	d9f0      	bls.n	8003b5a <USB_SetCurrentMode+0x60>
 8003b78:	e001      	b.n	8003b7e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e005      	b.n	8003b8a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2bc8      	cmp	r3, #200	@ 0xc8
 8003b82:	d101      	bne.n	8003b88 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b94:	b084      	sub	sp, #16
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	e009      	b.n	8003bc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	3340      	adds	r3, #64	@ 0x40
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	2b0e      	cmp	r3, #14
 8003bcc:	d9f2      	bls.n	8003bb4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003bce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d11c      	bne.n	8003c10 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003be4:	f043 0302 	orr.w	r3, r3, #2
 8003be8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c0e:	e00b      	b.n	8003c28 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c14:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c20:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003c2e:	461a      	mov	r2, r3
 8003c30:	2300      	movs	r3, #0
 8003c32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d10d      	bne.n	8003c58 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d104      	bne.n	8003c4e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c44:	2100      	movs	r1, #0
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f968 	bl	8003f1c <USB_SetDevSpeed>
 8003c4c:	e008      	b.n	8003c60 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c4e:	2101      	movs	r1, #1
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f963 	bl	8003f1c <USB_SetDevSpeed>
 8003c56:	e003      	b.n	8003c60 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c58:	2103      	movs	r1, #3
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f95e 	bl	8003f1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c60:	2110      	movs	r1, #16
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8fa 	bl	8003e5c <USB_FlushTxFifo>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f924 	bl	8003ec0 <USB_FlushRxFifo>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c88:	461a      	mov	r2, r3
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c94:	461a      	mov	r2, r3
 8003c96:	2300      	movs	r3, #0
 8003c98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	e043      	b.n	8003d34 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cc2:	d118      	bne.n	8003cf6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	e013      	b.n	8003d08 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cec:	461a      	mov	r2, r3
 8003cee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	e008      	b.n	8003d08 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d02:	461a      	mov	r2, r3
 8003d04:	2300      	movs	r3, #0
 8003d06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d14:	461a      	mov	r2, r3
 8003d16:	2300      	movs	r3, #0
 8003d18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d26:	461a      	mov	r2, r3
 8003d28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	3301      	adds	r3, #1
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003d38:	461a      	mov	r2, r3
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d3b5      	bcc.n	8003cac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	e043      	b.n	8003dce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d5c:	d118      	bne.n	8003d90 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d70:	461a      	mov	r2, r3
 8003d72:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	e013      	b.n	8003da2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d86:	461a      	mov	r2, r3
 8003d88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e008      	b.n	8003da2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2300      	movs	r3, #0
 8003da0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dae:	461a      	mov	r2, r3
 8003db0:	2300      	movs	r3, #0
 8003db2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003dc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d3b5      	bcc.n	8003d46 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003de8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003dfa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003dfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f043 0210 	orr.w	r2, r3, #16
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699a      	ldr	r2, [r3, #24]
 8003e14:	4b10      	ldr	r3, [pc, #64]	@ (8003e58 <USB_DevInit+0x2c4>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f043 0208 	orr.w	r2, r3, #8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d107      	bne.n	8003e48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e40:	f043 0304 	orr.w	r3, r3, #4
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e54:	b004      	add	sp, #16
 8003e56:	4770      	bx	lr
 8003e58:	803c3800 	.word	0x803c3800

08003e5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e76:	d901      	bls.n	8003e7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e01b      	b.n	8003eb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	daf2      	bge.n	8003e6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	019b      	lsls	r3, r3, #6
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3301      	adds	r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ea0:	d901      	bls.n	8003ea6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e006      	b.n	8003eb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d0f0      	beq.n	8003e94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ed8:	d901      	bls.n	8003ede <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e018      	b.n	8003f10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	daf2      	bge.n	8003ecc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2210      	movs	r2, #16
 8003eee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003efc:	d901      	bls.n	8003f02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e006      	b.n	8003f10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d0f0      	beq.n	8003ef0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	68f9      	ldr	r1, [r7, #12]
 8003f38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b085      	sub	sp, #20
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003f68:	f023 0303 	bic.w	r3, r3, #3
 8003f6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f7c:	f043 0302 	orr.w	r3, r3, #2
 8003f80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003fc4:	d901      	bls.n	8003fca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e01b      	b.n	8004002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	daf2      	bge.n	8003fb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f043 0201 	orr.w	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003fee:	d901      	bls.n	8003ff4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e006      	b.n	8004002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d0f0      	beq.n	8003fe2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <__cvt>:
 800400e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004012:	ec57 6b10 	vmov	r6, r7, d0
 8004016:	2f00      	cmp	r7, #0
 8004018:	460c      	mov	r4, r1
 800401a:	4619      	mov	r1, r3
 800401c:	463b      	mov	r3, r7
 800401e:	bfbb      	ittet	lt
 8004020:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004024:	461f      	movlt	r7, r3
 8004026:	2300      	movge	r3, #0
 8004028:	232d      	movlt	r3, #45	@ 0x2d
 800402a:	700b      	strb	r3, [r1, #0]
 800402c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800402e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004032:	4691      	mov	r9, r2
 8004034:	f023 0820 	bic.w	r8, r3, #32
 8004038:	bfbc      	itt	lt
 800403a:	4632      	movlt	r2, r6
 800403c:	4616      	movlt	r6, r2
 800403e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004042:	d005      	beq.n	8004050 <__cvt+0x42>
 8004044:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004048:	d100      	bne.n	800404c <__cvt+0x3e>
 800404a:	3401      	adds	r4, #1
 800404c:	2102      	movs	r1, #2
 800404e:	e000      	b.n	8004052 <__cvt+0x44>
 8004050:	2103      	movs	r1, #3
 8004052:	ab03      	add	r3, sp, #12
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	ab02      	add	r3, sp, #8
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	ec47 6b10 	vmov	d0, r6, r7
 800405e:	4653      	mov	r3, sl
 8004060:	4622      	mov	r2, r4
 8004062:	f001 f875 	bl	8005150 <_dtoa_r>
 8004066:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800406a:	4605      	mov	r5, r0
 800406c:	d119      	bne.n	80040a2 <__cvt+0x94>
 800406e:	f019 0f01 	tst.w	r9, #1
 8004072:	d00e      	beq.n	8004092 <__cvt+0x84>
 8004074:	eb00 0904 	add.w	r9, r0, r4
 8004078:	2200      	movs	r2, #0
 800407a:	2300      	movs	r3, #0
 800407c:	4630      	mov	r0, r6
 800407e:	4639      	mov	r1, r7
 8004080:	f7fc fd32 	bl	8000ae8 <__aeabi_dcmpeq>
 8004084:	b108      	cbz	r0, 800408a <__cvt+0x7c>
 8004086:	f8cd 900c 	str.w	r9, [sp, #12]
 800408a:	2230      	movs	r2, #48	@ 0x30
 800408c:	9b03      	ldr	r3, [sp, #12]
 800408e:	454b      	cmp	r3, r9
 8004090:	d31e      	bcc.n	80040d0 <__cvt+0xc2>
 8004092:	9b03      	ldr	r3, [sp, #12]
 8004094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004096:	1b5b      	subs	r3, r3, r5
 8004098:	4628      	mov	r0, r5
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	b004      	add	sp, #16
 800409e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80040a6:	eb00 0904 	add.w	r9, r0, r4
 80040aa:	d1e5      	bne.n	8004078 <__cvt+0x6a>
 80040ac:	7803      	ldrb	r3, [r0, #0]
 80040ae:	2b30      	cmp	r3, #48	@ 0x30
 80040b0:	d10a      	bne.n	80040c8 <__cvt+0xba>
 80040b2:	2200      	movs	r2, #0
 80040b4:	2300      	movs	r3, #0
 80040b6:	4630      	mov	r0, r6
 80040b8:	4639      	mov	r1, r7
 80040ba:	f7fc fd15 	bl	8000ae8 <__aeabi_dcmpeq>
 80040be:	b918      	cbnz	r0, 80040c8 <__cvt+0xba>
 80040c0:	f1c4 0401 	rsb	r4, r4, #1
 80040c4:	f8ca 4000 	str.w	r4, [sl]
 80040c8:	f8da 3000 	ldr.w	r3, [sl]
 80040cc:	4499      	add	r9, r3
 80040ce:	e7d3      	b.n	8004078 <__cvt+0x6a>
 80040d0:	1c59      	adds	r1, r3, #1
 80040d2:	9103      	str	r1, [sp, #12]
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	e7d9      	b.n	800408c <__cvt+0x7e>

080040d8 <__exponent>:
 80040d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040da:	2900      	cmp	r1, #0
 80040dc:	bfba      	itte	lt
 80040de:	4249      	neglt	r1, r1
 80040e0:	232d      	movlt	r3, #45	@ 0x2d
 80040e2:	232b      	movge	r3, #43	@ 0x2b
 80040e4:	2909      	cmp	r1, #9
 80040e6:	7002      	strb	r2, [r0, #0]
 80040e8:	7043      	strb	r3, [r0, #1]
 80040ea:	dd29      	ble.n	8004140 <__exponent+0x68>
 80040ec:	f10d 0307 	add.w	r3, sp, #7
 80040f0:	461d      	mov	r5, r3
 80040f2:	270a      	movs	r7, #10
 80040f4:	461a      	mov	r2, r3
 80040f6:	fbb1 f6f7 	udiv	r6, r1, r7
 80040fa:	fb07 1416 	mls	r4, r7, r6, r1
 80040fe:	3430      	adds	r4, #48	@ 0x30
 8004100:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004104:	460c      	mov	r4, r1
 8004106:	2c63      	cmp	r4, #99	@ 0x63
 8004108:	f103 33ff 	add.w	r3, r3, #4294967295
 800410c:	4631      	mov	r1, r6
 800410e:	dcf1      	bgt.n	80040f4 <__exponent+0x1c>
 8004110:	3130      	adds	r1, #48	@ 0x30
 8004112:	1e94      	subs	r4, r2, #2
 8004114:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004118:	1c41      	adds	r1, r0, #1
 800411a:	4623      	mov	r3, r4
 800411c:	42ab      	cmp	r3, r5
 800411e:	d30a      	bcc.n	8004136 <__exponent+0x5e>
 8004120:	f10d 0309 	add.w	r3, sp, #9
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	42ac      	cmp	r4, r5
 8004128:	bf88      	it	hi
 800412a:	2300      	movhi	r3, #0
 800412c:	3302      	adds	r3, #2
 800412e:	4403      	add	r3, r0
 8004130:	1a18      	subs	r0, r3, r0
 8004132:	b003      	add	sp, #12
 8004134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004136:	f813 6b01 	ldrb.w	r6, [r3], #1
 800413a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800413e:	e7ed      	b.n	800411c <__exponent+0x44>
 8004140:	2330      	movs	r3, #48	@ 0x30
 8004142:	3130      	adds	r1, #48	@ 0x30
 8004144:	7083      	strb	r3, [r0, #2]
 8004146:	70c1      	strb	r1, [r0, #3]
 8004148:	1d03      	adds	r3, r0, #4
 800414a:	e7f1      	b.n	8004130 <__exponent+0x58>

0800414c <_printf_float>:
 800414c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004150:	b08d      	sub	sp, #52	@ 0x34
 8004152:	460c      	mov	r4, r1
 8004154:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004158:	4616      	mov	r6, r2
 800415a:	461f      	mov	r7, r3
 800415c:	4605      	mov	r5, r0
 800415e:	f000 feef 	bl	8004f40 <_localeconv_r>
 8004162:	6803      	ldr	r3, [r0, #0]
 8004164:	9304      	str	r3, [sp, #16]
 8004166:	4618      	mov	r0, r3
 8004168:	f7fc f892 	bl	8000290 <strlen>
 800416c:	2300      	movs	r3, #0
 800416e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004170:	f8d8 3000 	ldr.w	r3, [r8]
 8004174:	9005      	str	r0, [sp, #20]
 8004176:	3307      	adds	r3, #7
 8004178:	f023 0307 	bic.w	r3, r3, #7
 800417c:	f103 0208 	add.w	r2, r3, #8
 8004180:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004184:	f8d4 b000 	ldr.w	fp, [r4]
 8004188:	f8c8 2000 	str.w	r2, [r8]
 800418c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004190:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004194:	9307      	str	r3, [sp, #28]
 8004196:	f8cd 8018 	str.w	r8, [sp, #24]
 800419a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800419e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041a2:	4b9c      	ldr	r3, [pc, #624]	@ (8004414 <_printf_float+0x2c8>)
 80041a4:	f04f 32ff 	mov.w	r2, #4294967295
 80041a8:	f7fc fcd0 	bl	8000b4c <__aeabi_dcmpun>
 80041ac:	bb70      	cbnz	r0, 800420c <_printf_float+0xc0>
 80041ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041b2:	4b98      	ldr	r3, [pc, #608]	@ (8004414 <_printf_float+0x2c8>)
 80041b4:	f04f 32ff 	mov.w	r2, #4294967295
 80041b8:	f7fc fcaa 	bl	8000b10 <__aeabi_dcmple>
 80041bc:	bb30      	cbnz	r0, 800420c <_printf_float+0xc0>
 80041be:	2200      	movs	r2, #0
 80041c0:	2300      	movs	r3, #0
 80041c2:	4640      	mov	r0, r8
 80041c4:	4649      	mov	r1, r9
 80041c6:	f7fc fc99 	bl	8000afc <__aeabi_dcmplt>
 80041ca:	b110      	cbz	r0, 80041d2 <_printf_float+0x86>
 80041cc:	232d      	movs	r3, #45	@ 0x2d
 80041ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041d2:	4a91      	ldr	r2, [pc, #580]	@ (8004418 <_printf_float+0x2cc>)
 80041d4:	4b91      	ldr	r3, [pc, #580]	@ (800441c <_printf_float+0x2d0>)
 80041d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041da:	bf94      	ite	ls
 80041dc:	4690      	movls	r8, r2
 80041de:	4698      	movhi	r8, r3
 80041e0:	2303      	movs	r3, #3
 80041e2:	6123      	str	r3, [r4, #16]
 80041e4:	f02b 0304 	bic.w	r3, fp, #4
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	f04f 0900 	mov.w	r9, #0
 80041ee:	9700      	str	r7, [sp, #0]
 80041f0:	4633      	mov	r3, r6
 80041f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80041f4:	4621      	mov	r1, r4
 80041f6:	4628      	mov	r0, r5
 80041f8:	f000 f9d2 	bl	80045a0 <_printf_common>
 80041fc:	3001      	adds	r0, #1
 80041fe:	f040 808d 	bne.w	800431c <_printf_float+0x1d0>
 8004202:	f04f 30ff 	mov.w	r0, #4294967295
 8004206:	b00d      	add	sp, #52	@ 0x34
 8004208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800420c:	4642      	mov	r2, r8
 800420e:	464b      	mov	r3, r9
 8004210:	4640      	mov	r0, r8
 8004212:	4649      	mov	r1, r9
 8004214:	f7fc fc9a 	bl	8000b4c <__aeabi_dcmpun>
 8004218:	b140      	cbz	r0, 800422c <_printf_float+0xe0>
 800421a:	464b      	mov	r3, r9
 800421c:	2b00      	cmp	r3, #0
 800421e:	bfbc      	itt	lt
 8004220:	232d      	movlt	r3, #45	@ 0x2d
 8004222:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004226:	4a7e      	ldr	r2, [pc, #504]	@ (8004420 <_printf_float+0x2d4>)
 8004228:	4b7e      	ldr	r3, [pc, #504]	@ (8004424 <_printf_float+0x2d8>)
 800422a:	e7d4      	b.n	80041d6 <_printf_float+0x8a>
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004232:	9206      	str	r2, [sp, #24]
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	d13b      	bne.n	80042b0 <_printf_float+0x164>
 8004238:	2306      	movs	r3, #6
 800423a:	6063      	str	r3, [r4, #4]
 800423c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004240:	2300      	movs	r3, #0
 8004242:	6022      	str	r2, [r4, #0]
 8004244:	9303      	str	r3, [sp, #12]
 8004246:	ab0a      	add	r3, sp, #40	@ 0x28
 8004248:	e9cd a301 	strd	sl, r3, [sp, #4]
 800424c:	ab09      	add	r3, sp, #36	@ 0x24
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	6861      	ldr	r1, [r4, #4]
 8004252:	ec49 8b10 	vmov	d0, r8, r9
 8004256:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800425a:	4628      	mov	r0, r5
 800425c:	f7ff fed7 	bl	800400e <__cvt>
 8004260:	9b06      	ldr	r3, [sp, #24]
 8004262:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004264:	2b47      	cmp	r3, #71	@ 0x47
 8004266:	4680      	mov	r8, r0
 8004268:	d129      	bne.n	80042be <_printf_float+0x172>
 800426a:	1cc8      	adds	r0, r1, #3
 800426c:	db02      	blt.n	8004274 <_printf_float+0x128>
 800426e:	6863      	ldr	r3, [r4, #4]
 8004270:	4299      	cmp	r1, r3
 8004272:	dd41      	ble.n	80042f8 <_printf_float+0x1ac>
 8004274:	f1aa 0a02 	sub.w	sl, sl, #2
 8004278:	fa5f fa8a 	uxtb.w	sl, sl
 800427c:	3901      	subs	r1, #1
 800427e:	4652      	mov	r2, sl
 8004280:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004284:	9109      	str	r1, [sp, #36]	@ 0x24
 8004286:	f7ff ff27 	bl	80040d8 <__exponent>
 800428a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800428c:	1813      	adds	r3, r2, r0
 800428e:	2a01      	cmp	r2, #1
 8004290:	4681      	mov	r9, r0
 8004292:	6123      	str	r3, [r4, #16]
 8004294:	dc02      	bgt.n	800429c <_printf_float+0x150>
 8004296:	6822      	ldr	r2, [r4, #0]
 8004298:	07d2      	lsls	r2, r2, #31
 800429a:	d501      	bpl.n	80042a0 <_printf_float+0x154>
 800429c:	3301      	adds	r3, #1
 800429e:	6123      	str	r3, [r4, #16]
 80042a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0a2      	beq.n	80041ee <_printf_float+0xa2>
 80042a8:	232d      	movs	r3, #45	@ 0x2d
 80042aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042ae:	e79e      	b.n	80041ee <_printf_float+0xa2>
 80042b0:	9a06      	ldr	r2, [sp, #24]
 80042b2:	2a47      	cmp	r2, #71	@ 0x47
 80042b4:	d1c2      	bne.n	800423c <_printf_float+0xf0>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1c0      	bne.n	800423c <_printf_float+0xf0>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e7bd      	b.n	800423a <_printf_float+0xee>
 80042be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80042c2:	d9db      	bls.n	800427c <_printf_float+0x130>
 80042c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80042c8:	d118      	bne.n	80042fc <_printf_float+0x1b0>
 80042ca:	2900      	cmp	r1, #0
 80042cc:	6863      	ldr	r3, [r4, #4]
 80042ce:	dd0b      	ble.n	80042e8 <_printf_float+0x19c>
 80042d0:	6121      	str	r1, [r4, #16]
 80042d2:	b913      	cbnz	r3, 80042da <_printf_float+0x18e>
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	07d0      	lsls	r0, r2, #31
 80042d8:	d502      	bpl.n	80042e0 <_printf_float+0x194>
 80042da:	3301      	adds	r3, #1
 80042dc:	440b      	add	r3, r1
 80042de:	6123      	str	r3, [r4, #16]
 80042e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80042e2:	f04f 0900 	mov.w	r9, #0
 80042e6:	e7db      	b.n	80042a0 <_printf_float+0x154>
 80042e8:	b913      	cbnz	r3, 80042f0 <_printf_float+0x1a4>
 80042ea:	6822      	ldr	r2, [r4, #0]
 80042ec:	07d2      	lsls	r2, r2, #31
 80042ee:	d501      	bpl.n	80042f4 <_printf_float+0x1a8>
 80042f0:	3302      	adds	r3, #2
 80042f2:	e7f4      	b.n	80042de <_printf_float+0x192>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e7f2      	b.n	80042de <_printf_float+0x192>
 80042f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80042fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042fe:	4299      	cmp	r1, r3
 8004300:	db05      	blt.n	800430e <_printf_float+0x1c2>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	6121      	str	r1, [r4, #16]
 8004306:	07d8      	lsls	r0, r3, #31
 8004308:	d5ea      	bpl.n	80042e0 <_printf_float+0x194>
 800430a:	1c4b      	adds	r3, r1, #1
 800430c:	e7e7      	b.n	80042de <_printf_float+0x192>
 800430e:	2900      	cmp	r1, #0
 8004310:	bfd4      	ite	le
 8004312:	f1c1 0202 	rsble	r2, r1, #2
 8004316:	2201      	movgt	r2, #1
 8004318:	4413      	add	r3, r2
 800431a:	e7e0      	b.n	80042de <_printf_float+0x192>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	055a      	lsls	r2, r3, #21
 8004320:	d407      	bmi.n	8004332 <_printf_float+0x1e6>
 8004322:	6923      	ldr	r3, [r4, #16]
 8004324:	4642      	mov	r2, r8
 8004326:	4631      	mov	r1, r6
 8004328:	4628      	mov	r0, r5
 800432a:	47b8      	blx	r7
 800432c:	3001      	adds	r0, #1
 800432e:	d12b      	bne.n	8004388 <_printf_float+0x23c>
 8004330:	e767      	b.n	8004202 <_printf_float+0xb6>
 8004332:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004336:	f240 80dd 	bls.w	80044f4 <_printf_float+0x3a8>
 800433a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800433e:	2200      	movs	r2, #0
 8004340:	2300      	movs	r3, #0
 8004342:	f7fc fbd1 	bl	8000ae8 <__aeabi_dcmpeq>
 8004346:	2800      	cmp	r0, #0
 8004348:	d033      	beq.n	80043b2 <_printf_float+0x266>
 800434a:	4a37      	ldr	r2, [pc, #220]	@ (8004428 <_printf_float+0x2dc>)
 800434c:	2301      	movs	r3, #1
 800434e:	4631      	mov	r1, r6
 8004350:	4628      	mov	r0, r5
 8004352:	47b8      	blx	r7
 8004354:	3001      	adds	r0, #1
 8004356:	f43f af54 	beq.w	8004202 <_printf_float+0xb6>
 800435a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800435e:	4543      	cmp	r3, r8
 8004360:	db02      	blt.n	8004368 <_printf_float+0x21c>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	07d8      	lsls	r0, r3, #31
 8004366:	d50f      	bpl.n	8004388 <_printf_float+0x23c>
 8004368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800436c:	4631      	mov	r1, r6
 800436e:	4628      	mov	r0, r5
 8004370:	47b8      	blx	r7
 8004372:	3001      	adds	r0, #1
 8004374:	f43f af45 	beq.w	8004202 <_printf_float+0xb6>
 8004378:	f04f 0900 	mov.w	r9, #0
 800437c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004380:	f104 0a1a 	add.w	sl, r4, #26
 8004384:	45c8      	cmp	r8, r9
 8004386:	dc09      	bgt.n	800439c <_printf_float+0x250>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	079b      	lsls	r3, r3, #30
 800438c:	f100 8103 	bmi.w	8004596 <_printf_float+0x44a>
 8004390:	68e0      	ldr	r0, [r4, #12]
 8004392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004394:	4298      	cmp	r0, r3
 8004396:	bfb8      	it	lt
 8004398:	4618      	movlt	r0, r3
 800439a:	e734      	b.n	8004206 <_printf_float+0xba>
 800439c:	2301      	movs	r3, #1
 800439e:	4652      	mov	r2, sl
 80043a0:	4631      	mov	r1, r6
 80043a2:	4628      	mov	r0, r5
 80043a4:	47b8      	blx	r7
 80043a6:	3001      	adds	r0, #1
 80043a8:	f43f af2b 	beq.w	8004202 <_printf_float+0xb6>
 80043ac:	f109 0901 	add.w	r9, r9, #1
 80043b0:	e7e8      	b.n	8004384 <_printf_float+0x238>
 80043b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	dc39      	bgt.n	800442c <_printf_float+0x2e0>
 80043b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004428 <_printf_float+0x2dc>)
 80043ba:	2301      	movs	r3, #1
 80043bc:	4631      	mov	r1, r6
 80043be:	4628      	mov	r0, r5
 80043c0:	47b8      	blx	r7
 80043c2:	3001      	adds	r0, #1
 80043c4:	f43f af1d 	beq.w	8004202 <_printf_float+0xb6>
 80043c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80043cc:	ea59 0303 	orrs.w	r3, r9, r3
 80043d0:	d102      	bne.n	80043d8 <_printf_float+0x28c>
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	07d9      	lsls	r1, r3, #31
 80043d6:	d5d7      	bpl.n	8004388 <_printf_float+0x23c>
 80043d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043dc:	4631      	mov	r1, r6
 80043de:	4628      	mov	r0, r5
 80043e0:	47b8      	blx	r7
 80043e2:	3001      	adds	r0, #1
 80043e4:	f43f af0d 	beq.w	8004202 <_printf_float+0xb6>
 80043e8:	f04f 0a00 	mov.w	sl, #0
 80043ec:	f104 0b1a 	add.w	fp, r4, #26
 80043f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043f2:	425b      	negs	r3, r3
 80043f4:	4553      	cmp	r3, sl
 80043f6:	dc01      	bgt.n	80043fc <_printf_float+0x2b0>
 80043f8:	464b      	mov	r3, r9
 80043fa:	e793      	b.n	8004324 <_printf_float+0x1d8>
 80043fc:	2301      	movs	r3, #1
 80043fe:	465a      	mov	r2, fp
 8004400:	4631      	mov	r1, r6
 8004402:	4628      	mov	r0, r5
 8004404:	47b8      	blx	r7
 8004406:	3001      	adds	r0, #1
 8004408:	f43f aefb 	beq.w	8004202 <_printf_float+0xb6>
 800440c:	f10a 0a01 	add.w	sl, sl, #1
 8004410:	e7ee      	b.n	80043f0 <_printf_float+0x2a4>
 8004412:	bf00      	nop
 8004414:	7fefffff 	.word	0x7fefffff
 8004418:	08008718 	.word	0x08008718
 800441c:	0800871c 	.word	0x0800871c
 8004420:	08008720 	.word	0x08008720
 8004424:	08008724 	.word	0x08008724
 8004428:	08008728 	.word	0x08008728
 800442c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800442e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004432:	4553      	cmp	r3, sl
 8004434:	bfa8      	it	ge
 8004436:	4653      	movge	r3, sl
 8004438:	2b00      	cmp	r3, #0
 800443a:	4699      	mov	r9, r3
 800443c:	dc36      	bgt.n	80044ac <_printf_float+0x360>
 800443e:	f04f 0b00 	mov.w	fp, #0
 8004442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004446:	f104 021a 	add.w	r2, r4, #26
 800444a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800444c:	9306      	str	r3, [sp, #24]
 800444e:	eba3 0309 	sub.w	r3, r3, r9
 8004452:	455b      	cmp	r3, fp
 8004454:	dc31      	bgt.n	80044ba <_printf_float+0x36e>
 8004456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004458:	459a      	cmp	sl, r3
 800445a:	dc3a      	bgt.n	80044d2 <_printf_float+0x386>
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	07da      	lsls	r2, r3, #31
 8004460:	d437      	bmi.n	80044d2 <_printf_float+0x386>
 8004462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004464:	ebaa 0903 	sub.w	r9, sl, r3
 8004468:	9b06      	ldr	r3, [sp, #24]
 800446a:	ebaa 0303 	sub.w	r3, sl, r3
 800446e:	4599      	cmp	r9, r3
 8004470:	bfa8      	it	ge
 8004472:	4699      	movge	r9, r3
 8004474:	f1b9 0f00 	cmp.w	r9, #0
 8004478:	dc33      	bgt.n	80044e2 <_printf_float+0x396>
 800447a:	f04f 0800 	mov.w	r8, #0
 800447e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004482:	f104 0b1a 	add.w	fp, r4, #26
 8004486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004488:	ebaa 0303 	sub.w	r3, sl, r3
 800448c:	eba3 0309 	sub.w	r3, r3, r9
 8004490:	4543      	cmp	r3, r8
 8004492:	f77f af79 	ble.w	8004388 <_printf_float+0x23c>
 8004496:	2301      	movs	r3, #1
 8004498:	465a      	mov	r2, fp
 800449a:	4631      	mov	r1, r6
 800449c:	4628      	mov	r0, r5
 800449e:	47b8      	blx	r7
 80044a0:	3001      	adds	r0, #1
 80044a2:	f43f aeae 	beq.w	8004202 <_printf_float+0xb6>
 80044a6:	f108 0801 	add.w	r8, r8, #1
 80044aa:	e7ec      	b.n	8004486 <_printf_float+0x33a>
 80044ac:	4642      	mov	r2, r8
 80044ae:	4631      	mov	r1, r6
 80044b0:	4628      	mov	r0, r5
 80044b2:	47b8      	blx	r7
 80044b4:	3001      	adds	r0, #1
 80044b6:	d1c2      	bne.n	800443e <_printf_float+0x2f2>
 80044b8:	e6a3      	b.n	8004202 <_printf_float+0xb6>
 80044ba:	2301      	movs	r3, #1
 80044bc:	4631      	mov	r1, r6
 80044be:	4628      	mov	r0, r5
 80044c0:	9206      	str	r2, [sp, #24]
 80044c2:	47b8      	blx	r7
 80044c4:	3001      	adds	r0, #1
 80044c6:	f43f ae9c 	beq.w	8004202 <_printf_float+0xb6>
 80044ca:	9a06      	ldr	r2, [sp, #24]
 80044cc:	f10b 0b01 	add.w	fp, fp, #1
 80044d0:	e7bb      	b.n	800444a <_printf_float+0x2fe>
 80044d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044d6:	4631      	mov	r1, r6
 80044d8:	4628      	mov	r0, r5
 80044da:	47b8      	blx	r7
 80044dc:	3001      	adds	r0, #1
 80044de:	d1c0      	bne.n	8004462 <_printf_float+0x316>
 80044e0:	e68f      	b.n	8004202 <_printf_float+0xb6>
 80044e2:	9a06      	ldr	r2, [sp, #24]
 80044e4:	464b      	mov	r3, r9
 80044e6:	4442      	add	r2, r8
 80044e8:	4631      	mov	r1, r6
 80044ea:	4628      	mov	r0, r5
 80044ec:	47b8      	blx	r7
 80044ee:	3001      	adds	r0, #1
 80044f0:	d1c3      	bne.n	800447a <_printf_float+0x32e>
 80044f2:	e686      	b.n	8004202 <_printf_float+0xb6>
 80044f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80044f8:	f1ba 0f01 	cmp.w	sl, #1
 80044fc:	dc01      	bgt.n	8004502 <_printf_float+0x3b6>
 80044fe:	07db      	lsls	r3, r3, #31
 8004500:	d536      	bpl.n	8004570 <_printf_float+0x424>
 8004502:	2301      	movs	r3, #1
 8004504:	4642      	mov	r2, r8
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	47b8      	blx	r7
 800450c:	3001      	adds	r0, #1
 800450e:	f43f ae78 	beq.w	8004202 <_printf_float+0xb6>
 8004512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004516:	4631      	mov	r1, r6
 8004518:	4628      	mov	r0, r5
 800451a:	47b8      	blx	r7
 800451c:	3001      	adds	r0, #1
 800451e:	f43f ae70 	beq.w	8004202 <_printf_float+0xb6>
 8004522:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004526:	2200      	movs	r2, #0
 8004528:	2300      	movs	r3, #0
 800452a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800452e:	f7fc fadb 	bl	8000ae8 <__aeabi_dcmpeq>
 8004532:	b9c0      	cbnz	r0, 8004566 <_printf_float+0x41a>
 8004534:	4653      	mov	r3, sl
 8004536:	f108 0201 	add.w	r2, r8, #1
 800453a:	4631      	mov	r1, r6
 800453c:	4628      	mov	r0, r5
 800453e:	47b8      	blx	r7
 8004540:	3001      	adds	r0, #1
 8004542:	d10c      	bne.n	800455e <_printf_float+0x412>
 8004544:	e65d      	b.n	8004202 <_printf_float+0xb6>
 8004546:	2301      	movs	r3, #1
 8004548:	465a      	mov	r2, fp
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	f43f ae56 	beq.w	8004202 <_printf_float+0xb6>
 8004556:	f108 0801 	add.w	r8, r8, #1
 800455a:	45d0      	cmp	r8, sl
 800455c:	dbf3      	blt.n	8004546 <_printf_float+0x3fa>
 800455e:	464b      	mov	r3, r9
 8004560:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004564:	e6df      	b.n	8004326 <_printf_float+0x1da>
 8004566:	f04f 0800 	mov.w	r8, #0
 800456a:	f104 0b1a 	add.w	fp, r4, #26
 800456e:	e7f4      	b.n	800455a <_printf_float+0x40e>
 8004570:	2301      	movs	r3, #1
 8004572:	4642      	mov	r2, r8
 8004574:	e7e1      	b.n	800453a <_printf_float+0x3ee>
 8004576:	2301      	movs	r3, #1
 8004578:	464a      	mov	r2, r9
 800457a:	4631      	mov	r1, r6
 800457c:	4628      	mov	r0, r5
 800457e:	47b8      	blx	r7
 8004580:	3001      	adds	r0, #1
 8004582:	f43f ae3e 	beq.w	8004202 <_printf_float+0xb6>
 8004586:	f108 0801 	add.w	r8, r8, #1
 800458a:	68e3      	ldr	r3, [r4, #12]
 800458c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800458e:	1a5b      	subs	r3, r3, r1
 8004590:	4543      	cmp	r3, r8
 8004592:	dcf0      	bgt.n	8004576 <_printf_float+0x42a>
 8004594:	e6fc      	b.n	8004390 <_printf_float+0x244>
 8004596:	f04f 0800 	mov.w	r8, #0
 800459a:	f104 0919 	add.w	r9, r4, #25
 800459e:	e7f4      	b.n	800458a <_printf_float+0x43e>

080045a0 <_printf_common>:
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	4616      	mov	r6, r2
 80045a6:	4698      	mov	r8, r3
 80045a8:	688a      	ldr	r2, [r1, #8]
 80045aa:	690b      	ldr	r3, [r1, #16]
 80045ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045b0:	4293      	cmp	r3, r2
 80045b2:	bfb8      	it	lt
 80045b4:	4613      	movlt	r3, r2
 80045b6:	6033      	str	r3, [r6, #0]
 80045b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045bc:	4607      	mov	r7, r0
 80045be:	460c      	mov	r4, r1
 80045c0:	b10a      	cbz	r2, 80045c6 <_printf_common+0x26>
 80045c2:	3301      	adds	r3, #1
 80045c4:	6033      	str	r3, [r6, #0]
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	0699      	lsls	r1, r3, #26
 80045ca:	bf42      	ittt	mi
 80045cc:	6833      	ldrmi	r3, [r6, #0]
 80045ce:	3302      	addmi	r3, #2
 80045d0:	6033      	strmi	r3, [r6, #0]
 80045d2:	6825      	ldr	r5, [r4, #0]
 80045d4:	f015 0506 	ands.w	r5, r5, #6
 80045d8:	d106      	bne.n	80045e8 <_printf_common+0x48>
 80045da:	f104 0a19 	add.w	sl, r4, #25
 80045de:	68e3      	ldr	r3, [r4, #12]
 80045e0:	6832      	ldr	r2, [r6, #0]
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	42ab      	cmp	r3, r5
 80045e6:	dc26      	bgt.n	8004636 <_printf_common+0x96>
 80045e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045ec:	6822      	ldr	r2, [r4, #0]
 80045ee:	3b00      	subs	r3, #0
 80045f0:	bf18      	it	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	0692      	lsls	r2, r2, #26
 80045f6:	d42b      	bmi.n	8004650 <_printf_common+0xb0>
 80045f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045fc:	4641      	mov	r1, r8
 80045fe:	4638      	mov	r0, r7
 8004600:	47c8      	blx	r9
 8004602:	3001      	adds	r0, #1
 8004604:	d01e      	beq.n	8004644 <_printf_common+0xa4>
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	6922      	ldr	r2, [r4, #16]
 800460a:	f003 0306 	and.w	r3, r3, #6
 800460e:	2b04      	cmp	r3, #4
 8004610:	bf02      	ittt	eq
 8004612:	68e5      	ldreq	r5, [r4, #12]
 8004614:	6833      	ldreq	r3, [r6, #0]
 8004616:	1aed      	subeq	r5, r5, r3
 8004618:	68a3      	ldr	r3, [r4, #8]
 800461a:	bf0c      	ite	eq
 800461c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004620:	2500      	movne	r5, #0
 8004622:	4293      	cmp	r3, r2
 8004624:	bfc4      	itt	gt
 8004626:	1a9b      	subgt	r3, r3, r2
 8004628:	18ed      	addgt	r5, r5, r3
 800462a:	2600      	movs	r6, #0
 800462c:	341a      	adds	r4, #26
 800462e:	42b5      	cmp	r5, r6
 8004630:	d11a      	bne.n	8004668 <_printf_common+0xc8>
 8004632:	2000      	movs	r0, #0
 8004634:	e008      	b.n	8004648 <_printf_common+0xa8>
 8004636:	2301      	movs	r3, #1
 8004638:	4652      	mov	r2, sl
 800463a:	4641      	mov	r1, r8
 800463c:	4638      	mov	r0, r7
 800463e:	47c8      	blx	r9
 8004640:	3001      	adds	r0, #1
 8004642:	d103      	bne.n	800464c <_printf_common+0xac>
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800464c:	3501      	adds	r5, #1
 800464e:	e7c6      	b.n	80045de <_printf_common+0x3e>
 8004650:	18e1      	adds	r1, r4, r3
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	2030      	movs	r0, #48	@ 0x30
 8004656:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800465a:	4422      	add	r2, r4
 800465c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004660:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004664:	3302      	adds	r3, #2
 8004666:	e7c7      	b.n	80045f8 <_printf_common+0x58>
 8004668:	2301      	movs	r3, #1
 800466a:	4622      	mov	r2, r4
 800466c:	4641      	mov	r1, r8
 800466e:	4638      	mov	r0, r7
 8004670:	47c8      	blx	r9
 8004672:	3001      	adds	r0, #1
 8004674:	d0e6      	beq.n	8004644 <_printf_common+0xa4>
 8004676:	3601      	adds	r6, #1
 8004678:	e7d9      	b.n	800462e <_printf_common+0x8e>
	...

0800467c <_printf_i>:
 800467c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004680:	7e0f      	ldrb	r7, [r1, #24]
 8004682:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004684:	2f78      	cmp	r7, #120	@ 0x78
 8004686:	4691      	mov	r9, r2
 8004688:	4680      	mov	r8, r0
 800468a:	460c      	mov	r4, r1
 800468c:	469a      	mov	sl, r3
 800468e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004692:	d807      	bhi.n	80046a4 <_printf_i+0x28>
 8004694:	2f62      	cmp	r7, #98	@ 0x62
 8004696:	d80a      	bhi.n	80046ae <_printf_i+0x32>
 8004698:	2f00      	cmp	r7, #0
 800469a:	f000 80d2 	beq.w	8004842 <_printf_i+0x1c6>
 800469e:	2f58      	cmp	r7, #88	@ 0x58
 80046a0:	f000 80b9 	beq.w	8004816 <_printf_i+0x19a>
 80046a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046ac:	e03a      	b.n	8004724 <_printf_i+0xa8>
 80046ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046b2:	2b15      	cmp	r3, #21
 80046b4:	d8f6      	bhi.n	80046a4 <_printf_i+0x28>
 80046b6:	a101      	add	r1, pc, #4	@ (adr r1, 80046bc <_printf_i+0x40>)
 80046b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046bc:	08004715 	.word	0x08004715
 80046c0:	08004729 	.word	0x08004729
 80046c4:	080046a5 	.word	0x080046a5
 80046c8:	080046a5 	.word	0x080046a5
 80046cc:	080046a5 	.word	0x080046a5
 80046d0:	080046a5 	.word	0x080046a5
 80046d4:	08004729 	.word	0x08004729
 80046d8:	080046a5 	.word	0x080046a5
 80046dc:	080046a5 	.word	0x080046a5
 80046e0:	080046a5 	.word	0x080046a5
 80046e4:	080046a5 	.word	0x080046a5
 80046e8:	08004829 	.word	0x08004829
 80046ec:	08004753 	.word	0x08004753
 80046f0:	080047e3 	.word	0x080047e3
 80046f4:	080046a5 	.word	0x080046a5
 80046f8:	080046a5 	.word	0x080046a5
 80046fc:	0800484b 	.word	0x0800484b
 8004700:	080046a5 	.word	0x080046a5
 8004704:	08004753 	.word	0x08004753
 8004708:	080046a5 	.word	0x080046a5
 800470c:	080046a5 	.word	0x080046a5
 8004710:	080047eb 	.word	0x080047eb
 8004714:	6833      	ldr	r3, [r6, #0]
 8004716:	1d1a      	adds	r2, r3, #4
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6032      	str	r2, [r6, #0]
 800471c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004720:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004724:	2301      	movs	r3, #1
 8004726:	e09d      	b.n	8004864 <_printf_i+0x1e8>
 8004728:	6833      	ldr	r3, [r6, #0]
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	1d19      	adds	r1, r3, #4
 800472e:	6031      	str	r1, [r6, #0]
 8004730:	0606      	lsls	r6, r0, #24
 8004732:	d501      	bpl.n	8004738 <_printf_i+0xbc>
 8004734:	681d      	ldr	r5, [r3, #0]
 8004736:	e003      	b.n	8004740 <_printf_i+0xc4>
 8004738:	0645      	lsls	r5, r0, #25
 800473a:	d5fb      	bpl.n	8004734 <_printf_i+0xb8>
 800473c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004740:	2d00      	cmp	r5, #0
 8004742:	da03      	bge.n	800474c <_printf_i+0xd0>
 8004744:	232d      	movs	r3, #45	@ 0x2d
 8004746:	426d      	negs	r5, r5
 8004748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800474c:	4859      	ldr	r0, [pc, #356]	@ (80048b4 <_printf_i+0x238>)
 800474e:	230a      	movs	r3, #10
 8004750:	e011      	b.n	8004776 <_printf_i+0xfa>
 8004752:	6821      	ldr	r1, [r4, #0]
 8004754:	6833      	ldr	r3, [r6, #0]
 8004756:	0608      	lsls	r0, r1, #24
 8004758:	f853 5b04 	ldr.w	r5, [r3], #4
 800475c:	d402      	bmi.n	8004764 <_printf_i+0xe8>
 800475e:	0649      	lsls	r1, r1, #25
 8004760:	bf48      	it	mi
 8004762:	b2ad      	uxthmi	r5, r5
 8004764:	2f6f      	cmp	r7, #111	@ 0x6f
 8004766:	4853      	ldr	r0, [pc, #332]	@ (80048b4 <_printf_i+0x238>)
 8004768:	6033      	str	r3, [r6, #0]
 800476a:	bf14      	ite	ne
 800476c:	230a      	movne	r3, #10
 800476e:	2308      	moveq	r3, #8
 8004770:	2100      	movs	r1, #0
 8004772:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004776:	6866      	ldr	r6, [r4, #4]
 8004778:	60a6      	str	r6, [r4, #8]
 800477a:	2e00      	cmp	r6, #0
 800477c:	bfa2      	ittt	ge
 800477e:	6821      	ldrge	r1, [r4, #0]
 8004780:	f021 0104 	bicge.w	r1, r1, #4
 8004784:	6021      	strge	r1, [r4, #0]
 8004786:	b90d      	cbnz	r5, 800478c <_printf_i+0x110>
 8004788:	2e00      	cmp	r6, #0
 800478a:	d04b      	beq.n	8004824 <_printf_i+0x1a8>
 800478c:	4616      	mov	r6, r2
 800478e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004792:	fb03 5711 	mls	r7, r3, r1, r5
 8004796:	5dc7      	ldrb	r7, [r0, r7]
 8004798:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800479c:	462f      	mov	r7, r5
 800479e:	42bb      	cmp	r3, r7
 80047a0:	460d      	mov	r5, r1
 80047a2:	d9f4      	bls.n	800478e <_printf_i+0x112>
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d10b      	bne.n	80047c0 <_printf_i+0x144>
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	07df      	lsls	r7, r3, #31
 80047ac:	d508      	bpl.n	80047c0 <_printf_i+0x144>
 80047ae:	6923      	ldr	r3, [r4, #16]
 80047b0:	6861      	ldr	r1, [r4, #4]
 80047b2:	4299      	cmp	r1, r3
 80047b4:	bfde      	ittt	le
 80047b6:	2330      	movle	r3, #48	@ 0x30
 80047b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047c0:	1b92      	subs	r2, r2, r6
 80047c2:	6122      	str	r2, [r4, #16]
 80047c4:	f8cd a000 	str.w	sl, [sp]
 80047c8:	464b      	mov	r3, r9
 80047ca:	aa03      	add	r2, sp, #12
 80047cc:	4621      	mov	r1, r4
 80047ce:	4640      	mov	r0, r8
 80047d0:	f7ff fee6 	bl	80045a0 <_printf_common>
 80047d4:	3001      	adds	r0, #1
 80047d6:	d14a      	bne.n	800486e <_printf_i+0x1f2>
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	b004      	add	sp, #16
 80047de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	f043 0320 	orr.w	r3, r3, #32
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	4833      	ldr	r0, [pc, #204]	@ (80048b8 <_printf_i+0x23c>)
 80047ec:	2778      	movs	r7, #120	@ 0x78
 80047ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	6831      	ldr	r1, [r6, #0]
 80047f6:	061f      	lsls	r7, r3, #24
 80047f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80047fc:	d402      	bmi.n	8004804 <_printf_i+0x188>
 80047fe:	065f      	lsls	r7, r3, #25
 8004800:	bf48      	it	mi
 8004802:	b2ad      	uxthmi	r5, r5
 8004804:	6031      	str	r1, [r6, #0]
 8004806:	07d9      	lsls	r1, r3, #31
 8004808:	bf44      	itt	mi
 800480a:	f043 0320 	orrmi.w	r3, r3, #32
 800480e:	6023      	strmi	r3, [r4, #0]
 8004810:	b11d      	cbz	r5, 800481a <_printf_i+0x19e>
 8004812:	2310      	movs	r3, #16
 8004814:	e7ac      	b.n	8004770 <_printf_i+0xf4>
 8004816:	4827      	ldr	r0, [pc, #156]	@ (80048b4 <_printf_i+0x238>)
 8004818:	e7e9      	b.n	80047ee <_printf_i+0x172>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	f023 0320 	bic.w	r3, r3, #32
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	e7f6      	b.n	8004812 <_printf_i+0x196>
 8004824:	4616      	mov	r6, r2
 8004826:	e7bd      	b.n	80047a4 <_printf_i+0x128>
 8004828:	6833      	ldr	r3, [r6, #0]
 800482a:	6825      	ldr	r5, [r4, #0]
 800482c:	6961      	ldr	r1, [r4, #20]
 800482e:	1d18      	adds	r0, r3, #4
 8004830:	6030      	str	r0, [r6, #0]
 8004832:	062e      	lsls	r6, r5, #24
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	d501      	bpl.n	800483c <_printf_i+0x1c0>
 8004838:	6019      	str	r1, [r3, #0]
 800483a:	e002      	b.n	8004842 <_printf_i+0x1c6>
 800483c:	0668      	lsls	r0, r5, #25
 800483e:	d5fb      	bpl.n	8004838 <_printf_i+0x1bc>
 8004840:	8019      	strh	r1, [r3, #0]
 8004842:	2300      	movs	r3, #0
 8004844:	6123      	str	r3, [r4, #16]
 8004846:	4616      	mov	r6, r2
 8004848:	e7bc      	b.n	80047c4 <_printf_i+0x148>
 800484a:	6833      	ldr	r3, [r6, #0]
 800484c:	1d1a      	adds	r2, r3, #4
 800484e:	6032      	str	r2, [r6, #0]
 8004850:	681e      	ldr	r6, [r3, #0]
 8004852:	6862      	ldr	r2, [r4, #4]
 8004854:	2100      	movs	r1, #0
 8004856:	4630      	mov	r0, r6
 8004858:	f7fb fcca 	bl	80001f0 <memchr>
 800485c:	b108      	cbz	r0, 8004862 <_printf_i+0x1e6>
 800485e:	1b80      	subs	r0, r0, r6
 8004860:	6060      	str	r0, [r4, #4]
 8004862:	6863      	ldr	r3, [r4, #4]
 8004864:	6123      	str	r3, [r4, #16]
 8004866:	2300      	movs	r3, #0
 8004868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800486c:	e7aa      	b.n	80047c4 <_printf_i+0x148>
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	4632      	mov	r2, r6
 8004872:	4649      	mov	r1, r9
 8004874:	4640      	mov	r0, r8
 8004876:	47d0      	blx	sl
 8004878:	3001      	adds	r0, #1
 800487a:	d0ad      	beq.n	80047d8 <_printf_i+0x15c>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	079b      	lsls	r3, r3, #30
 8004880:	d413      	bmi.n	80048aa <_printf_i+0x22e>
 8004882:	68e0      	ldr	r0, [r4, #12]
 8004884:	9b03      	ldr	r3, [sp, #12]
 8004886:	4298      	cmp	r0, r3
 8004888:	bfb8      	it	lt
 800488a:	4618      	movlt	r0, r3
 800488c:	e7a6      	b.n	80047dc <_printf_i+0x160>
 800488e:	2301      	movs	r3, #1
 8004890:	4632      	mov	r2, r6
 8004892:	4649      	mov	r1, r9
 8004894:	4640      	mov	r0, r8
 8004896:	47d0      	blx	sl
 8004898:	3001      	adds	r0, #1
 800489a:	d09d      	beq.n	80047d8 <_printf_i+0x15c>
 800489c:	3501      	adds	r5, #1
 800489e:	68e3      	ldr	r3, [r4, #12]
 80048a0:	9903      	ldr	r1, [sp, #12]
 80048a2:	1a5b      	subs	r3, r3, r1
 80048a4:	42ab      	cmp	r3, r5
 80048a6:	dcf2      	bgt.n	800488e <_printf_i+0x212>
 80048a8:	e7eb      	b.n	8004882 <_printf_i+0x206>
 80048aa:	2500      	movs	r5, #0
 80048ac:	f104 0619 	add.w	r6, r4, #25
 80048b0:	e7f5      	b.n	800489e <_printf_i+0x222>
 80048b2:	bf00      	nop
 80048b4:	0800872a 	.word	0x0800872a
 80048b8:	0800873b 	.word	0x0800873b

080048bc <_scanf_float>:
 80048bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c0:	b087      	sub	sp, #28
 80048c2:	4617      	mov	r7, r2
 80048c4:	9303      	str	r3, [sp, #12]
 80048c6:	688b      	ldr	r3, [r1, #8]
 80048c8:	1e5a      	subs	r2, r3, #1
 80048ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80048ce:	bf81      	itttt	hi
 80048d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80048d4:	eb03 0b05 	addhi.w	fp, r3, r5
 80048d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80048dc:	608b      	strhi	r3, [r1, #8]
 80048de:	680b      	ldr	r3, [r1, #0]
 80048e0:	460a      	mov	r2, r1
 80048e2:	f04f 0500 	mov.w	r5, #0
 80048e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80048ea:	f842 3b1c 	str.w	r3, [r2], #28
 80048ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80048f2:	4680      	mov	r8, r0
 80048f4:	460c      	mov	r4, r1
 80048f6:	bf98      	it	ls
 80048f8:	f04f 0b00 	movls.w	fp, #0
 80048fc:	9201      	str	r2, [sp, #4]
 80048fe:	4616      	mov	r6, r2
 8004900:	46aa      	mov	sl, r5
 8004902:	46a9      	mov	r9, r5
 8004904:	9502      	str	r5, [sp, #8]
 8004906:	68a2      	ldr	r2, [r4, #8]
 8004908:	b152      	cbz	r2, 8004920 <_scanf_float+0x64>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004910:	d864      	bhi.n	80049dc <_scanf_float+0x120>
 8004912:	2b40      	cmp	r3, #64	@ 0x40
 8004914:	d83c      	bhi.n	8004990 <_scanf_float+0xd4>
 8004916:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800491a:	b2c8      	uxtb	r0, r1
 800491c:	280e      	cmp	r0, #14
 800491e:	d93a      	bls.n	8004996 <_scanf_float+0xda>
 8004920:	f1b9 0f00 	cmp.w	r9, #0
 8004924:	d003      	beq.n	800492e <_scanf_float+0x72>
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004932:	f1ba 0f01 	cmp.w	sl, #1
 8004936:	f200 8117 	bhi.w	8004b68 <_scanf_float+0x2ac>
 800493a:	9b01      	ldr	r3, [sp, #4]
 800493c:	429e      	cmp	r6, r3
 800493e:	f200 8108 	bhi.w	8004b52 <_scanf_float+0x296>
 8004942:	2001      	movs	r0, #1
 8004944:	b007      	add	sp, #28
 8004946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800494e:	2a0d      	cmp	r2, #13
 8004950:	d8e6      	bhi.n	8004920 <_scanf_float+0x64>
 8004952:	a101      	add	r1, pc, #4	@ (adr r1, 8004958 <_scanf_float+0x9c>)
 8004954:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004958:	08004a9f 	.word	0x08004a9f
 800495c:	08004921 	.word	0x08004921
 8004960:	08004921 	.word	0x08004921
 8004964:	08004921 	.word	0x08004921
 8004968:	08004aff 	.word	0x08004aff
 800496c:	08004ad7 	.word	0x08004ad7
 8004970:	08004921 	.word	0x08004921
 8004974:	08004921 	.word	0x08004921
 8004978:	08004aad 	.word	0x08004aad
 800497c:	08004921 	.word	0x08004921
 8004980:	08004921 	.word	0x08004921
 8004984:	08004921 	.word	0x08004921
 8004988:	08004921 	.word	0x08004921
 800498c:	08004a65 	.word	0x08004a65
 8004990:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004994:	e7db      	b.n	800494e <_scanf_float+0x92>
 8004996:	290e      	cmp	r1, #14
 8004998:	d8c2      	bhi.n	8004920 <_scanf_float+0x64>
 800499a:	a001      	add	r0, pc, #4	@ (adr r0, 80049a0 <_scanf_float+0xe4>)
 800499c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80049a0:	08004a55 	.word	0x08004a55
 80049a4:	08004921 	.word	0x08004921
 80049a8:	08004a55 	.word	0x08004a55
 80049ac:	08004aeb 	.word	0x08004aeb
 80049b0:	08004921 	.word	0x08004921
 80049b4:	080049fd 	.word	0x080049fd
 80049b8:	08004a3b 	.word	0x08004a3b
 80049bc:	08004a3b 	.word	0x08004a3b
 80049c0:	08004a3b 	.word	0x08004a3b
 80049c4:	08004a3b 	.word	0x08004a3b
 80049c8:	08004a3b 	.word	0x08004a3b
 80049cc:	08004a3b 	.word	0x08004a3b
 80049d0:	08004a3b 	.word	0x08004a3b
 80049d4:	08004a3b 	.word	0x08004a3b
 80049d8:	08004a3b 	.word	0x08004a3b
 80049dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80049de:	d809      	bhi.n	80049f4 <_scanf_float+0x138>
 80049e0:	2b60      	cmp	r3, #96	@ 0x60
 80049e2:	d8b2      	bhi.n	800494a <_scanf_float+0x8e>
 80049e4:	2b54      	cmp	r3, #84	@ 0x54
 80049e6:	d07b      	beq.n	8004ae0 <_scanf_float+0x224>
 80049e8:	2b59      	cmp	r3, #89	@ 0x59
 80049ea:	d199      	bne.n	8004920 <_scanf_float+0x64>
 80049ec:	2d07      	cmp	r5, #7
 80049ee:	d197      	bne.n	8004920 <_scanf_float+0x64>
 80049f0:	2508      	movs	r5, #8
 80049f2:	e02c      	b.n	8004a4e <_scanf_float+0x192>
 80049f4:	2b74      	cmp	r3, #116	@ 0x74
 80049f6:	d073      	beq.n	8004ae0 <_scanf_float+0x224>
 80049f8:	2b79      	cmp	r3, #121	@ 0x79
 80049fa:	e7f6      	b.n	80049ea <_scanf_float+0x12e>
 80049fc:	6821      	ldr	r1, [r4, #0]
 80049fe:	05c8      	lsls	r0, r1, #23
 8004a00:	d51b      	bpl.n	8004a3a <_scanf_float+0x17e>
 8004a02:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004a06:	6021      	str	r1, [r4, #0]
 8004a08:	f109 0901 	add.w	r9, r9, #1
 8004a0c:	f1bb 0f00 	cmp.w	fp, #0
 8004a10:	d003      	beq.n	8004a1a <_scanf_float+0x15e>
 8004a12:	3201      	adds	r2, #1
 8004a14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004a18:	60a2      	str	r2, [r4, #8]
 8004a1a:	68a3      	ldr	r3, [r4, #8]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	60a3      	str	r3, [r4, #8]
 8004a20:	6923      	ldr	r3, [r4, #16]
 8004a22:	3301      	adds	r3, #1
 8004a24:	6123      	str	r3, [r4, #16]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	607b      	str	r3, [r7, #4]
 8004a2e:	f340 8087 	ble.w	8004b40 <_scanf_float+0x284>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	3301      	adds	r3, #1
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	e765      	b.n	8004906 <_scanf_float+0x4a>
 8004a3a:	eb1a 0105 	adds.w	r1, sl, r5
 8004a3e:	f47f af6f 	bne.w	8004920 <_scanf_float+0x64>
 8004a42:	6822      	ldr	r2, [r4, #0]
 8004a44:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004a48:	6022      	str	r2, [r4, #0]
 8004a4a:	460d      	mov	r5, r1
 8004a4c:	468a      	mov	sl, r1
 8004a4e:	f806 3b01 	strb.w	r3, [r6], #1
 8004a52:	e7e2      	b.n	8004a1a <_scanf_float+0x15e>
 8004a54:	6822      	ldr	r2, [r4, #0]
 8004a56:	0610      	lsls	r0, r2, #24
 8004a58:	f57f af62 	bpl.w	8004920 <_scanf_float+0x64>
 8004a5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a60:	6022      	str	r2, [r4, #0]
 8004a62:	e7f4      	b.n	8004a4e <_scanf_float+0x192>
 8004a64:	f1ba 0f00 	cmp.w	sl, #0
 8004a68:	d10e      	bne.n	8004a88 <_scanf_float+0x1cc>
 8004a6a:	f1b9 0f00 	cmp.w	r9, #0
 8004a6e:	d10e      	bne.n	8004a8e <_scanf_float+0x1d2>
 8004a70:	6822      	ldr	r2, [r4, #0]
 8004a72:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004a76:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004a7a:	d108      	bne.n	8004a8e <_scanf_float+0x1d2>
 8004a7c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004a80:	6022      	str	r2, [r4, #0]
 8004a82:	f04f 0a01 	mov.w	sl, #1
 8004a86:	e7e2      	b.n	8004a4e <_scanf_float+0x192>
 8004a88:	f1ba 0f02 	cmp.w	sl, #2
 8004a8c:	d055      	beq.n	8004b3a <_scanf_float+0x27e>
 8004a8e:	2d01      	cmp	r5, #1
 8004a90:	d002      	beq.n	8004a98 <_scanf_float+0x1dc>
 8004a92:	2d04      	cmp	r5, #4
 8004a94:	f47f af44 	bne.w	8004920 <_scanf_float+0x64>
 8004a98:	3501      	adds	r5, #1
 8004a9a:	b2ed      	uxtb	r5, r5
 8004a9c:	e7d7      	b.n	8004a4e <_scanf_float+0x192>
 8004a9e:	f1ba 0f01 	cmp.w	sl, #1
 8004aa2:	f47f af3d 	bne.w	8004920 <_scanf_float+0x64>
 8004aa6:	f04f 0a02 	mov.w	sl, #2
 8004aaa:	e7d0      	b.n	8004a4e <_scanf_float+0x192>
 8004aac:	b97d      	cbnz	r5, 8004ace <_scanf_float+0x212>
 8004aae:	f1b9 0f00 	cmp.w	r9, #0
 8004ab2:	f47f af38 	bne.w	8004926 <_scanf_float+0x6a>
 8004ab6:	6822      	ldr	r2, [r4, #0]
 8004ab8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004abc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004ac0:	f040 8108 	bne.w	8004cd4 <_scanf_float+0x418>
 8004ac4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004ac8:	6022      	str	r2, [r4, #0]
 8004aca:	2501      	movs	r5, #1
 8004acc:	e7bf      	b.n	8004a4e <_scanf_float+0x192>
 8004ace:	2d03      	cmp	r5, #3
 8004ad0:	d0e2      	beq.n	8004a98 <_scanf_float+0x1dc>
 8004ad2:	2d05      	cmp	r5, #5
 8004ad4:	e7de      	b.n	8004a94 <_scanf_float+0x1d8>
 8004ad6:	2d02      	cmp	r5, #2
 8004ad8:	f47f af22 	bne.w	8004920 <_scanf_float+0x64>
 8004adc:	2503      	movs	r5, #3
 8004ade:	e7b6      	b.n	8004a4e <_scanf_float+0x192>
 8004ae0:	2d06      	cmp	r5, #6
 8004ae2:	f47f af1d 	bne.w	8004920 <_scanf_float+0x64>
 8004ae6:	2507      	movs	r5, #7
 8004ae8:	e7b1      	b.n	8004a4e <_scanf_float+0x192>
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	0591      	lsls	r1, r2, #22
 8004aee:	f57f af17 	bpl.w	8004920 <_scanf_float+0x64>
 8004af2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004af6:	6022      	str	r2, [r4, #0]
 8004af8:	f8cd 9008 	str.w	r9, [sp, #8]
 8004afc:	e7a7      	b.n	8004a4e <_scanf_float+0x192>
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004b04:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004b08:	d006      	beq.n	8004b18 <_scanf_float+0x25c>
 8004b0a:	0550      	lsls	r0, r2, #21
 8004b0c:	f57f af08 	bpl.w	8004920 <_scanf_float+0x64>
 8004b10:	f1b9 0f00 	cmp.w	r9, #0
 8004b14:	f000 80de 	beq.w	8004cd4 <_scanf_float+0x418>
 8004b18:	0591      	lsls	r1, r2, #22
 8004b1a:	bf58      	it	pl
 8004b1c:	9902      	ldrpl	r1, [sp, #8]
 8004b1e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004b22:	bf58      	it	pl
 8004b24:	eba9 0101 	subpl.w	r1, r9, r1
 8004b28:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004b2c:	bf58      	it	pl
 8004b2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004b32:	6022      	str	r2, [r4, #0]
 8004b34:	f04f 0900 	mov.w	r9, #0
 8004b38:	e789      	b.n	8004a4e <_scanf_float+0x192>
 8004b3a:	f04f 0a03 	mov.w	sl, #3
 8004b3e:	e786      	b.n	8004a4e <_scanf_float+0x192>
 8004b40:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004b44:	4639      	mov	r1, r7
 8004b46:	4640      	mov	r0, r8
 8004b48:	4798      	blx	r3
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	f43f aedb 	beq.w	8004906 <_scanf_float+0x4a>
 8004b50:	e6e6      	b.n	8004920 <_scanf_float+0x64>
 8004b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b5a:	463a      	mov	r2, r7
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	4798      	blx	r3
 8004b60:	6923      	ldr	r3, [r4, #16]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	6123      	str	r3, [r4, #16]
 8004b66:	e6e8      	b.n	800493a <_scanf_float+0x7e>
 8004b68:	1e6b      	subs	r3, r5, #1
 8004b6a:	2b06      	cmp	r3, #6
 8004b6c:	d824      	bhi.n	8004bb8 <_scanf_float+0x2fc>
 8004b6e:	2d02      	cmp	r5, #2
 8004b70:	d836      	bhi.n	8004be0 <_scanf_float+0x324>
 8004b72:	9b01      	ldr	r3, [sp, #4]
 8004b74:	429e      	cmp	r6, r3
 8004b76:	f67f aee4 	bls.w	8004942 <_scanf_float+0x86>
 8004b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b82:	463a      	mov	r2, r7
 8004b84:	4640      	mov	r0, r8
 8004b86:	4798      	blx	r3
 8004b88:	6923      	ldr	r3, [r4, #16]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	6123      	str	r3, [r4, #16]
 8004b8e:	e7f0      	b.n	8004b72 <_scanf_float+0x2b6>
 8004b90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b94:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004b98:	463a      	mov	r2, r7
 8004b9a:	4640      	mov	r0, r8
 8004b9c:	4798      	blx	r3
 8004b9e:	6923      	ldr	r3, [r4, #16]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	6123      	str	r3, [r4, #16]
 8004ba4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ba8:	fa5f fa8a 	uxtb.w	sl, sl
 8004bac:	f1ba 0f02 	cmp.w	sl, #2
 8004bb0:	d1ee      	bne.n	8004b90 <_scanf_float+0x2d4>
 8004bb2:	3d03      	subs	r5, #3
 8004bb4:	b2ed      	uxtb	r5, r5
 8004bb6:	1b76      	subs	r6, r6, r5
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	05da      	lsls	r2, r3, #23
 8004bbc:	d530      	bpl.n	8004c20 <_scanf_float+0x364>
 8004bbe:	055b      	lsls	r3, r3, #21
 8004bc0:	d511      	bpl.n	8004be6 <_scanf_float+0x32a>
 8004bc2:	9b01      	ldr	r3, [sp, #4]
 8004bc4:	429e      	cmp	r6, r3
 8004bc6:	f67f aebc 	bls.w	8004942 <_scanf_float+0x86>
 8004bca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004bce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bd2:	463a      	mov	r2, r7
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	4798      	blx	r3
 8004bd8:	6923      	ldr	r3, [r4, #16]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	6123      	str	r3, [r4, #16]
 8004bde:	e7f0      	b.n	8004bc2 <_scanf_float+0x306>
 8004be0:	46aa      	mov	sl, r5
 8004be2:	46b3      	mov	fp, r6
 8004be4:	e7de      	b.n	8004ba4 <_scanf_float+0x2e8>
 8004be6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004bea:	6923      	ldr	r3, [r4, #16]
 8004bec:	2965      	cmp	r1, #101	@ 0x65
 8004bee:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bf2:	f106 35ff 	add.w	r5, r6, #4294967295
 8004bf6:	6123      	str	r3, [r4, #16]
 8004bf8:	d00c      	beq.n	8004c14 <_scanf_float+0x358>
 8004bfa:	2945      	cmp	r1, #69	@ 0x45
 8004bfc:	d00a      	beq.n	8004c14 <_scanf_float+0x358>
 8004bfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c02:	463a      	mov	r2, r7
 8004c04:	4640      	mov	r0, r8
 8004c06:	4798      	blx	r3
 8004c08:	6923      	ldr	r3, [r4, #16]
 8004c0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	1eb5      	subs	r5, r6, #2
 8004c12:	6123      	str	r3, [r4, #16]
 8004c14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c18:	463a      	mov	r2, r7
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	4798      	blx	r3
 8004c1e:	462e      	mov	r6, r5
 8004c20:	6822      	ldr	r2, [r4, #0]
 8004c22:	f012 0210 	ands.w	r2, r2, #16
 8004c26:	d001      	beq.n	8004c2c <_scanf_float+0x370>
 8004c28:	2000      	movs	r0, #0
 8004c2a:	e68b      	b.n	8004944 <_scanf_float+0x88>
 8004c2c:	7032      	strb	r2, [r6, #0]
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c38:	d11c      	bne.n	8004c74 <_scanf_float+0x3b8>
 8004c3a:	9b02      	ldr	r3, [sp, #8]
 8004c3c:	454b      	cmp	r3, r9
 8004c3e:	eba3 0209 	sub.w	r2, r3, r9
 8004c42:	d123      	bne.n	8004c8c <_scanf_float+0x3d0>
 8004c44:	9901      	ldr	r1, [sp, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	4640      	mov	r0, r8
 8004c4a:	f002 fbf9 	bl	8007440 <_strtod_r>
 8004c4e:	9b03      	ldr	r3, [sp, #12]
 8004c50:	6821      	ldr	r1, [r4, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f011 0f02 	tst.w	r1, #2
 8004c58:	ec57 6b10 	vmov	r6, r7, d0
 8004c5c:	f103 0204 	add.w	r2, r3, #4
 8004c60:	d01f      	beq.n	8004ca2 <_scanf_float+0x3e6>
 8004c62:	9903      	ldr	r1, [sp, #12]
 8004c64:	600a      	str	r2, [r1, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	e9c3 6700 	strd	r6, r7, [r3]
 8004c6c:	68e3      	ldr	r3, [r4, #12]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60e3      	str	r3, [r4, #12]
 8004c72:	e7d9      	b.n	8004c28 <_scanf_float+0x36c>
 8004c74:	9b04      	ldr	r3, [sp, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0e4      	beq.n	8004c44 <_scanf_float+0x388>
 8004c7a:	9905      	ldr	r1, [sp, #20]
 8004c7c:	230a      	movs	r3, #10
 8004c7e:	3101      	adds	r1, #1
 8004c80:	4640      	mov	r0, r8
 8004c82:	f002 fc5d 	bl	8007540 <_strtol_r>
 8004c86:	9b04      	ldr	r3, [sp, #16]
 8004c88:	9e05      	ldr	r6, [sp, #20]
 8004c8a:	1ac2      	subs	r2, r0, r3
 8004c8c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004c90:	429e      	cmp	r6, r3
 8004c92:	bf28      	it	cs
 8004c94:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004c98:	4910      	ldr	r1, [pc, #64]	@ (8004cdc <_scanf_float+0x420>)
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f000 f8e4 	bl	8004e68 <siprintf>
 8004ca0:	e7d0      	b.n	8004c44 <_scanf_float+0x388>
 8004ca2:	f011 0f04 	tst.w	r1, #4
 8004ca6:	9903      	ldr	r1, [sp, #12]
 8004ca8:	600a      	str	r2, [r1, #0]
 8004caa:	d1dc      	bne.n	8004c66 <_scanf_float+0x3aa>
 8004cac:	681d      	ldr	r5, [r3, #0]
 8004cae:	4632      	mov	r2, r6
 8004cb0:	463b      	mov	r3, r7
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	4639      	mov	r1, r7
 8004cb6:	f7fb ff49 	bl	8000b4c <__aeabi_dcmpun>
 8004cba:	b128      	cbz	r0, 8004cc8 <_scanf_float+0x40c>
 8004cbc:	4808      	ldr	r0, [pc, #32]	@ (8004ce0 <_scanf_float+0x424>)
 8004cbe:	f000 f9b7 	bl	8005030 <nanf>
 8004cc2:	ed85 0a00 	vstr	s0, [r5]
 8004cc6:	e7d1      	b.n	8004c6c <_scanf_float+0x3b0>
 8004cc8:	4630      	mov	r0, r6
 8004cca:	4639      	mov	r1, r7
 8004ccc:	f7fb ff9c 	bl	8000c08 <__aeabi_d2f>
 8004cd0:	6028      	str	r0, [r5, #0]
 8004cd2:	e7cb      	b.n	8004c6c <_scanf_float+0x3b0>
 8004cd4:	f04f 0900 	mov.w	r9, #0
 8004cd8:	e629      	b.n	800492e <_scanf_float+0x72>
 8004cda:	bf00      	nop
 8004cdc:	0800874c 	.word	0x0800874c
 8004ce0:	08008ae5 	.word	0x08008ae5

08004ce4 <std>:
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	b510      	push	{r4, lr}
 8004ce8:	4604      	mov	r4, r0
 8004cea:	e9c0 3300 	strd	r3, r3, [r0]
 8004cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cf2:	6083      	str	r3, [r0, #8]
 8004cf4:	8181      	strh	r1, [r0, #12]
 8004cf6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004cf8:	81c2      	strh	r2, [r0, #14]
 8004cfa:	6183      	str	r3, [r0, #24]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	2208      	movs	r2, #8
 8004d00:	305c      	adds	r0, #92	@ 0x5c
 8004d02:	f000 f914 	bl	8004f2e <memset>
 8004d06:	4b0d      	ldr	r3, [pc, #52]	@ (8004d3c <std+0x58>)
 8004d08:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d40 <std+0x5c>)
 8004d0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d44 <std+0x60>)
 8004d10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d12:	4b0d      	ldr	r3, [pc, #52]	@ (8004d48 <std+0x64>)
 8004d14:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d16:	4b0d      	ldr	r3, [pc, #52]	@ (8004d4c <std+0x68>)
 8004d18:	6224      	str	r4, [r4, #32]
 8004d1a:	429c      	cmp	r4, r3
 8004d1c:	d006      	beq.n	8004d2c <std+0x48>
 8004d1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d22:	4294      	cmp	r4, r2
 8004d24:	d002      	beq.n	8004d2c <std+0x48>
 8004d26:	33d0      	adds	r3, #208	@ 0xd0
 8004d28:	429c      	cmp	r4, r3
 8004d2a:	d105      	bne.n	8004d38 <std+0x54>
 8004d2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d34:	f000 b978 	b.w	8005028 <__retarget_lock_init_recursive>
 8004d38:	bd10      	pop	{r4, pc}
 8004d3a:	bf00      	nop
 8004d3c:	08004ea9 	.word	0x08004ea9
 8004d40:	08004ecb 	.word	0x08004ecb
 8004d44:	08004f03 	.word	0x08004f03
 8004d48:	08004f27 	.word	0x08004f27
 8004d4c:	2000098c 	.word	0x2000098c

08004d50 <stdio_exit_handler>:
 8004d50:	4a02      	ldr	r2, [pc, #8]	@ (8004d5c <stdio_exit_handler+0xc>)
 8004d52:	4903      	ldr	r1, [pc, #12]	@ (8004d60 <stdio_exit_handler+0x10>)
 8004d54:	4803      	ldr	r0, [pc, #12]	@ (8004d64 <stdio_exit_handler+0x14>)
 8004d56:	f000 b869 	b.w	8004e2c <_fwalk_sglue>
 8004d5a:	bf00      	nop
 8004d5c:	20000010 	.word	0x20000010
 8004d60:	080078fd 	.word	0x080078fd
 8004d64:	20000020 	.word	0x20000020

08004d68 <cleanup_stdio>:
 8004d68:	6841      	ldr	r1, [r0, #4]
 8004d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d9c <cleanup_stdio+0x34>)
 8004d6c:	4299      	cmp	r1, r3
 8004d6e:	b510      	push	{r4, lr}
 8004d70:	4604      	mov	r4, r0
 8004d72:	d001      	beq.n	8004d78 <cleanup_stdio+0x10>
 8004d74:	f002 fdc2 	bl	80078fc <_fflush_r>
 8004d78:	68a1      	ldr	r1, [r4, #8]
 8004d7a:	4b09      	ldr	r3, [pc, #36]	@ (8004da0 <cleanup_stdio+0x38>)
 8004d7c:	4299      	cmp	r1, r3
 8004d7e:	d002      	beq.n	8004d86 <cleanup_stdio+0x1e>
 8004d80:	4620      	mov	r0, r4
 8004d82:	f002 fdbb 	bl	80078fc <_fflush_r>
 8004d86:	68e1      	ldr	r1, [r4, #12]
 8004d88:	4b06      	ldr	r3, [pc, #24]	@ (8004da4 <cleanup_stdio+0x3c>)
 8004d8a:	4299      	cmp	r1, r3
 8004d8c:	d004      	beq.n	8004d98 <cleanup_stdio+0x30>
 8004d8e:	4620      	mov	r0, r4
 8004d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d94:	f002 bdb2 	b.w	80078fc <_fflush_r>
 8004d98:	bd10      	pop	{r4, pc}
 8004d9a:	bf00      	nop
 8004d9c:	2000098c 	.word	0x2000098c
 8004da0:	200009f4 	.word	0x200009f4
 8004da4:	20000a5c 	.word	0x20000a5c

08004da8 <global_stdio_init.part.0>:
 8004da8:	b510      	push	{r4, lr}
 8004daa:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <global_stdio_init.part.0+0x30>)
 8004dac:	4c0b      	ldr	r4, [pc, #44]	@ (8004ddc <global_stdio_init.part.0+0x34>)
 8004dae:	4a0c      	ldr	r2, [pc, #48]	@ (8004de0 <global_stdio_init.part.0+0x38>)
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	4620      	mov	r0, r4
 8004db4:	2200      	movs	r2, #0
 8004db6:	2104      	movs	r1, #4
 8004db8:	f7ff ff94 	bl	8004ce4 <std>
 8004dbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	2109      	movs	r1, #9
 8004dc4:	f7ff ff8e 	bl	8004ce4 <std>
 8004dc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004dcc:	2202      	movs	r2, #2
 8004dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd2:	2112      	movs	r1, #18
 8004dd4:	f7ff bf86 	b.w	8004ce4 <std>
 8004dd8:	20000ac4 	.word	0x20000ac4
 8004ddc:	2000098c 	.word	0x2000098c
 8004de0:	08004d51 	.word	0x08004d51

08004de4 <__sfp_lock_acquire>:
 8004de4:	4801      	ldr	r0, [pc, #4]	@ (8004dec <__sfp_lock_acquire+0x8>)
 8004de6:	f000 b920 	b.w	800502a <__retarget_lock_acquire_recursive>
 8004dea:	bf00      	nop
 8004dec:	20000acd 	.word	0x20000acd

08004df0 <__sfp_lock_release>:
 8004df0:	4801      	ldr	r0, [pc, #4]	@ (8004df8 <__sfp_lock_release+0x8>)
 8004df2:	f000 b91b 	b.w	800502c <__retarget_lock_release_recursive>
 8004df6:	bf00      	nop
 8004df8:	20000acd 	.word	0x20000acd

08004dfc <__sinit>:
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	4604      	mov	r4, r0
 8004e00:	f7ff fff0 	bl	8004de4 <__sfp_lock_acquire>
 8004e04:	6a23      	ldr	r3, [r4, #32]
 8004e06:	b11b      	cbz	r3, 8004e10 <__sinit+0x14>
 8004e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e0c:	f7ff bff0 	b.w	8004df0 <__sfp_lock_release>
 8004e10:	4b04      	ldr	r3, [pc, #16]	@ (8004e24 <__sinit+0x28>)
 8004e12:	6223      	str	r3, [r4, #32]
 8004e14:	4b04      	ldr	r3, [pc, #16]	@ (8004e28 <__sinit+0x2c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1f5      	bne.n	8004e08 <__sinit+0xc>
 8004e1c:	f7ff ffc4 	bl	8004da8 <global_stdio_init.part.0>
 8004e20:	e7f2      	b.n	8004e08 <__sinit+0xc>
 8004e22:	bf00      	nop
 8004e24:	08004d69 	.word	0x08004d69
 8004e28:	20000ac4 	.word	0x20000ac4

08004e2c <_fwalk_sglue>:
 8004e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e30:	4607      	mov	r7, r0
 8004e32:	4688      	mov	r8, r1
 8004e34:	4614      	mov	r4, r2
 8004e36:	2600      	movs	r6, #0
 8004e38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e3c:	f1b9 0901 	subs.w	r9, r9, #1
 8004e40:	d505      	bpl.n	8004e4e <_fwalk_sglue+0x22>
 8004e42:	6824      	ldr	r4, [r4, #0]
 8004e44:	2c00      	cmp	r4, #0
 8004e46:	d1f7      	bne.n	8004e38 <_fwalk_sglue+0xc>
 8004e48:	4630      	mov	r0, r6
 8004e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e4e:	89ab      	ldrh	r3, [r5, #12]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d907      	bls.n	8004e64 <_fwalk_sglue+0x38>
 8004e54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	d003      	beq.n	8004e64 <_fwalk_sglue+0x38>
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	4638      	mov	r0, r7
 8004e60:	47c0      	blx	r8
 8004e62:	4306      	orrs	r6, r0
 8004e64:	3568      	adds	r5, #104	@ 0x68
 8004e66:	e7e9      	b.n	8004e3c <_fwalk_sglue+0x10>

08004e68 <siprintf>:
 8004e68:	b40e      	push	{r1, r2, r3}
 8004e6a:	b500      	push	{lr}
 8004e6c:	b09c      	sub	sp, #112	@ 0x70
 8004e6e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004e70:	9002      	str	r0, [sp, #8]
 8004e72:	9006      	str	r0, [sp, #24]
 8004e74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e78:	4809      	ldr	r0, [pc, #36]	@ (8004ea0 <siprintf+0x38>)
 8004e7a:	9107      	str	r1, [sp, #28]
 8004e7c:	9104      	str	r1, [sp, #16]
 8004e7e:	4909      	ldr	r1, [pc, #36]	@ (8004ea4 <siprintf+0x3c>)
 8004e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e84:	9105      	str	r1, [sp, #20]
 8004e86:	6800      	ldr	r0, [r0, #0]
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	a902      	add	r1, sp, #8
 8004e8c:	f002 fbb6 	bl	80075fc <_svfiprintf_r>
 8004e90:	9b02      	ldr	r3, [sp, #8]
 8004e92:	2200      	movs	r2, #0
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	b01c      	add	sp, #112	@ 0x70
 8004e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e9c:	b003      	add	sp, #12
 8004e9e:	4770      	bx	lr
 8004ea0:	2000001c 	.word	0x2000001c
 8004ea4:	ffff0208 	.word	0xffff0208

08004ea8 <__sread>:
 8004ea8:	b510      	push	{r4, lr}
 8004eaa:	460c      	mov	r4, r1
 8004eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb0:	f000 f86c 	bl	8004f8c <_read_r>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	bfab      	itete	ge
 8004eb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004eba:	89a3      	ldrhlt	r3, [r4, #12]
 8004ebc:	181b      	addge	r3, r3, r0
 8004ebe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ec2:	bfac      	ite	ge
 8004ec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ec6:	81a3      	strhlt	r3, [r4, #12]
 8004ec8:	bd10      	pop	{r4, pc}

08004eca <__swrite>:
 8004eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ece:	461f      	mov	r7, r3
 8004ed0:	898b      	ldrh	r3, [r1, #12]
 8004ed2:	05db      	lsls	r3, r3, #23
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	4616      	mov	r6, r2
 8004eda:	d505      	bpl.n	8004ee8 <__swrite+0x1e>
 8004edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f000 f840 	bl	8004f68 <_lseek_r>
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ef2:	81a3      	strh	r3, [r4, #12]
 8004ef4:	4632      	mov	r2, r6
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	4628      	mov	r0, r5
 8004efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004efe:	f000 b857 	b.w	8004fb0 <_write_r>

08004f02 <__sseek>:
 8004f02:	b510      	push	{r4, lr}
 8004f04:	460c      	mov	r4, r1
 8004f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0a:	f000 f82d 	bl	8004f68 <_lseek_r>
 8004f0e:	1c43      	adds	r3, r0, #1
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	bf15      	itete	ne
 8004f14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f1e:	81a3      	strheq	r3, [r4, #12]
 8004f20:	bf18      	it	ne
 8004f22:	81a3      	strhne	r3, [r4, #12]
 8004f24:	bd10      	pop	{r4, pc}

08004f26 <__sclose>:
 8004f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f2a:	f000 b80d 	b.w	8004f48 <_close_r>

08004f2e <memset>:
 8004f2e:	4402      	add	r2, r0
 8004f30:	4603      	mov	r3, r0
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d100      	bne.n	8004f38 <memset+0xa>
 8004f36:	4770      	bx	lr
 8004f38:	f803 1b01 	strb.w	r1, [r3], #1
 8004f3c:	e7f9      	b.n	8004f32 <memset+0x4>
	...

08004f40 <_localeconv_r>:
 8004f40:	4800      	ldr	r0, [pc, #0]	@ (8004f44 <_localeconv_r+0x4>)
 8004f42:	4770      	bx	lr
 8004f44:	2000015c 	.word	0x2000015c

08004f48 <_close_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4d06      	ldr	r5, [pc, #24]	@ (8004f64 <_close_r+0x1c>)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4608      	mov	r0, r1
 8004f52:	602b      	str	r3, [r5, #0]
 8004f54:	f7fc fc99 	bl	800188a <_close>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_close_r+0x1a>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_close_r+0x1a>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	20000ac8 	.word	0x20000ac8

08004f68 <_lseek_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4d07      	ldr	r5, [pc, #28]	@ (8004f88 <_lseek_r+0x20>)
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	4608      	mov	r0, r1
 8004f70:	4611      	mov	r1, r2
 8004f72:	2200      	movs	r2, #0
 8004f74:	602a      	str	r2, [r5, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f7fc fcae 	bl	80018d8 <_lseek>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d102      	bne.n	8004f86 <_lseek_r+0x1e>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	b103      	cbz	r3, 8004f86 <_lseek_r+0x1e>
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	20000ac8 	.word	0x20000ac8

08004f8c <_read_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4d07      	ldr	r5, [pc, #28]	@ (8004fac <_read_r+0x20>)
 8004f90:	4604      	mov	r4, r0
 8004f92:	4608      	mov	r0, r1
 8004f94:	4611      	mov	r1, r2
 8004f96:	2200      	movs	r2, #0
 8004f98:	602a      	str	r2, [r5, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f7fc fc3c 	bl	8001818 <_read>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_read_r+0x1e>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_read_r+0x1e>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	20000ac8 	.word	0x20000ac8

08004fb0 <_write_r>:
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	4d07      	ldr	r5, [pc, #28]	@ (8004fd0 <_write_r+0x20>)
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	4608      	mov	r0, r1
 8004fb8:	4611      	mov	r1, r2
 8004fba:	2200      	movs	r2, #0
 8004fbc:	602a      	str	r2, [r5, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f7fc fc47 	bl	8001852 <_write>
 8004fc4:	1c43      	adds	r3, r0, #1
 8004fc6:	d102      	bne.n	8004fce <_write_r+0x1e>
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	b103      	cbz	r3, 8004fce <_write_r+0x1e>
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	bd38      	pop	{r3, r4, r5, pc}
 8004fd0:	20000ac8 	.word	0x20000ac8

08004fd4 <__errno>:
 8004fd4:	4b01      	ldr	r3, [pc, #4]	@ (8004fdc <__errno+0x8>)
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	2000001c 	.word	0x2000001c

08004fe0 <__libc_init_array>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4d0d      	ldr	r5, [pc, #52]	@ (8005018 <__libc_init_array+0x38>)
 8004fe4:	4c0d      	ldr	r4, [pc, #52]	@ (800501c <__libc_init_array+0x3c>)
 8004fe6:	1b64      	subs	r4, r4, r5
 8004fe8:	10a4      	asrs	r4, r4, #2
 8004fea:	2600      	movs	r6, #0
 8004fec:	42a6      	cmp	r6, r4
 8004fee:	d109      	bne.n	8005004 <__libc_init_array+0x24>
 8004ff0:	4d0b      	ldr	r5, [pc, #44]	@ (8005020 <__libc_init_array+0x40>)
 8004ff2:	4c0c      	ldr	r4, [pc, #48]	@ (8005024 <__libc_init_array+0x44>)
 8004ff4:	f003 fb72 	bl	80086dc <_init>
 8004ff8:	1b64      	subs	r4, r4, r5
 8004ffa:	10a4      	asrs	r4, r4, #2
 8004ffc:	2600      	movs	r6, #0
 8004ffe:	42a6      	cmp	r6, r4
 8005000:	d105      	bne.n	800500e <__libc_init_array+0x2e>
 8005002:	bd70      	pop	{r4, r5, r6, pc}
 8005004:	f855 3b04 	ldr.w	r3, [r5], #4
 8005008:	4798      	blx	r3
 800500a:	3601      	adds	r6, #1
 800500c:	e7ee      	b.n	8004fec <__libc_init_array+0xc>
 800500e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005012:	4798      	blx	r3
 8005014:	3601      	adds	r6, #1
 8005016:	e7f2      	b.n	8004ffe <__libc_init_array+0x1e>
 8005018:	08008b50 	.word	0x08008b50
 800501c:	08008b50 	.word	0x08008b50
 8005020:	08008b50 	.word	0x08008b50
 8005024:	08008b54 	.word	0x08008b54

08005028 <__retarget_lock_init_recursive>:
 8005028:	4770      	bx	lr

0800502a <__retarget_lock_acquire_recursive>:
 800502a:	4770      	bx	lr

0800502c <__retarget_lock_release_recursive>:
 800502c:	4770      	bx	lr
	...

08005030 <nanf>:
 8005030:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005038 <nanf+0x8>
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	7fc00000 	.word	0x7fc00000

0800503c <quorem>:
 800503c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005040:	6903      	ldr	r3, [r0, #16]
 8005042:	690c      	ldr	r4, [r1, #16]
 8005044:	42a3      	cmp	r3, r4
 8005046:	4607      	mov	r7, r0
 8005048:	db7e      	blt.n	8005148 <quorem+0x10c>
 800504a:	3c01      	subs	r4, #1
 800504c:	f101 0814 	add.w	r8, r1, #20
 8005050:	00a3      	lsls	r3, r4, #2
 8005052:	f100 0514 	add.w	r5, r0, #20
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005062:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005066:	3301      	adds	r3, #1
 8005068:	429a      	cmp	r2, r3
 800506a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800506e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005072:	d32e      	bcc.n	80050d2 <quorem+0x96>
 8005074:	f04f 0a00 	mov.w	sl, #0
 8005078:	46c4      	mov	ip, r8
 800507a:	46ae      	mov	lr, r5
 800507c:	46d3      	mov	fp, sl
 800507e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005082:	b298      	uxth	r0, r3
 8005084:	fb06 a000 	mla	r0, r6, r0, sl
 8005088:	0c02      	lsrs	r2, r0, #16
 800508a:	0c1b      	lsrs	r3, r3, #16
 800508c:	fb06 2303 	mla	r3, r6, r3, r2
 8005090:	f8de 2000 	ldr.w	r2, [lr]
 8005094:	b280      	uxth	r0, r0
 8005096:	b292      	uxth	r2, r2
 8005098:	1a12      	subs	r2, r2, r0
 800509a:	445a      	add	r2, fp
 800509c:	f8de 0000 	ldr.w	r0, [lr]
 80050a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80050aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80050ae:	b292      	uxth	r2, r2
 80050b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80050b4:	45e1      	cmp	r9, ip
 80050b6:	f84e 2b04 	str.w	r2, [lr], #4
 80050ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80050be:	d2de      	bcs.n	800507e <quorem+0x42>
 80050c0:	9b00      	ldr	r3, [sp, #0]
 80050c2:	58eb      	ldr	r3, [r5, r3]
 80050c4:	b92b      	cbnz	r3, 80050d2 <quorem+0x96>
 80050c6:	9b01      	ldr	r3, [sp, #4]
 80050c8:	3b04      	subs	r3, #4
 80050ca:	429d      	cmp	r5, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	d32f      	bcc.n	8005130 <quorem+0xf4>
 80050d0:	613c      	str	r4, [r7, #16]
 80050d2:	4638      	mov	r0, r7
 80050d4:	f001 f9c4 	bl	8006460 <__mcmp>
 80050d8:	2800      	cmp	r0, #0
 80050da:	db25      	blt.n	8005128 <quorem+0xec>
 80050dc:	4629      	mov	r1, r5
 80050de:	2000      	movs	r0, #0
 80050e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80050e4:	f8d1 c000 	ldr.w	ip, [r1]
 80050e8:	fa1f fe82 	uxth.w	lr, r2
 80050ec:	fa1f f38c 	uxth.w	r3, ip
 80050f0:	eba3 030e 	sub.w	r3, r3, lr
 80050f4:	4403      	add	r3, r0
 80050f6:	0c12      	lsrs	r2, r2, #16
 80050f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80050fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005100:	b29b      	uxth	r3, r3
 8005102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005106:	45c1      	cmp	r9, r8
 8005108:	f841 3b04 	str.w	r3, [r1], #4
 800510c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005110:	d2e6      	bcs.n	80050e0 <quorem+0xa4>
 8005112:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005116:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800511a:	b922      	cbnz	r2, 8005126 <quorem+0xea>
 800511c:	3b04      	subs	r3, #4
 800511e:	429d      	cmp	r5, r3
 8005120:	461a      	mov	r2, r3
 8005122:	d30b      	bcc.n	800513c <quorem+0x100>
 8005124:	613c      	str	r4, [r7, #16]
 8005126:	3601      	adds	r6, #1
 8005128:	4630      	mov	r0, r6
 800512a:	b003      	add	sp, #12
 800512c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	3b04      	subs	r3, #4
 8005134:	2a00      	cmp	r2, #0
 8005136:	d1cb      	bne.n	80050d0 <quorem+0x94>
 8005138:	3c01      	subs	r4, #1
 800513a:	e7c6      	b.n	80050ca <quorem+0x8e>
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	3b04      	subs	r3, #4
 8005140:	2a00      	cmp	r2, #0
 8005142:	d1ef      	bne.n	8005124 <quorem+0xe8>
 8005144:	3c01      	subs	r4, #1
 8005146:	e7ea      	b.n	800511e <quorem+0xe2>
 8005148:	2000      	movs	r0, #0
 800514a:	e7ee      	b.n	800512a <quorem+0xee>
 800514c:	0000      	movs	r0, r0
	...

08005150 <_dtoa_r>:
 8005150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005154:	69c7      	ldr	r7, [r0, #28]
 8005156:	b099      	sub	sp, #100	@ 0x64
 8005158:	ed8d 0b02 	vstr	d0, [sp, #8]
 800515c:	ec55 4b10 	vmov	r4, r5, d0
 8005160:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005162:	9109      	str	r1, [sp, #36]	@ 0x24
 8005164:	4683      	mov	fp, r0
 8005166:	920e      	str	r2, [sp, #56]	@ 0x38
 8005168:	9313      	str	r3, [sp, #76]	@ 0x4c
 800516a:	b97f      	cbnz	r7, 800518c <_dtoa_r+0x3c>
 800516c:	2010      	movs	r0, #16
 800516e:	f000 fdfd 	bl	8005d6c <malloc>
 8005172:	4602      	mov	r2, r0
 8005174:	f8cb 001c 	str.w	r0, [fp, #28]
 8005178:	b920      	cbnz	r0, 8005184 <_dtoa_r+0x34>
 800517a:	4ba7      	ldr	r3, [pc, #668]	@ (8005418 <_dtoa_r+0x2c8>)
 800517c:	21ef      	movs	r1, #239	@ 0xef
 800517e:	48a7      	ldr	r0, [pc, #668]	@ (800541c <_dtoa_r+0x2cc>)
 8005180:	f002 fc36 	bl	80079f0 <__assert_func>
 8005184:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005188:	6007      	str	r7, [r0, #0]
 800518a:	60c7      	str	r7, [r0, #12]
 800518c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005190:	6819      	ldr	r1, [r3, #0]
 8005192:	b159      	cbz	r1, 80051ac <_dtoa_r+0x5c>
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	604a      	str	r2, [r1, #4]
 8005198:	2301      	movs	r3, #1
 800519a:	4093      	lsls	r3, r2
 800519c:	608b      	str	r3, [r1, #8]
 800519e:	4658      	mov	r0, fp
 80051a0:	f000 feda 	bl	8005f58 <_Bfree>
 80051a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	1e2b      	subs	r3, r5, #0
 80051ae:	bfb9      	ittee	lt
 80051b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80051b4:	9303      	strlt	r3, [sp, #12]
 80051b6:	2300      	movge	r3, #0
 80051b8:	6033      	strge	r3, [r6, #0]
 80051ba:	9f03      	ldr	r7, [sp, #12]
 80051bc:	4b98      	ldr	r3, [pc, #608]	@ (8005420 <_dtoa_r+0x2d0>)
 80051be:	bfbc      	itt	lt
 80051c0:	2201      	movlt	r2, #1
 80051c2:	6032      	strlt	r2, [r6, #0]
 80051c4:	43bb      	bics	r3, r7
 80051c6:	d112      	bne.n	80051ee <_dtoa_r+0x9e>
 80051c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80051ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80051d4:	4323      	orrs	r3, r4
 80051d6:	f000 854d 	beq.w	8005c74 <_dtoa_r+0xb24>
 80051da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80051dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005434 <_dtoa_r+0x2e4>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 854f 	beq.w	8005c84 <_dtoa_r+0xb34>
 80051e6:	f10a 0303 	add.w	r3, sl, #3
 80051ea:	f000 bd49 	b.w	8005c80 <_dtoa_r+0xb30>
 80051ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80051f2:	2200      	movs	r2, #0
 80051f4:	ec51 0b17 	vmov	r0, r1, d7
 80051f8:	2300      	movs	r3, #0
 80051fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80051fe:	f7fb fc73 	bl	8000ae8 <__aeabi_dcmpeq>
 8005202:	4680      	mov	r8, r0
 8005204:	b158      	cbz	r0, 800521e <_dtoa_r+0xce>
 8005206:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005208:	2301      	movs	r3, #1
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800520e:	b113      	cbz	r3, 8005216 <_dtoa_r+0xc6>
 8005210:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005212:	4b84      	ldr	r3, [pc, #528]	@ (8005424 <_dtoa_r+0x2d4>)
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005438 <_dtoa_r+0x2e8>
 800521a:	f000 bd33 	b.w	8005c84 <_dtoa_r+0xb34>
 800521e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005222:	aa16      	add	r2, sp, #88	@ 0x58
 8005224:	a917      	add	r1, sp, #92	@ 0x5c
 8005226:	4658      	mov	r0, fp
 8005228:	f001 fa3a 	bl	80066a0 <__d2b>
 800522c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005230:	4681      	mov	r9, r0
 8005232:	2e00      	cmp	r6, #0
 8005234:	d077      	beq.n	8005326 <_dtoa_r+0x1d6>
 8005236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005238:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800523c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005244:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005248:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800524c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005250:	4619      	mov	r1, r3
 8005252:	2200      	movs	r2, #0
 8005254:	4b74      	ldr	r3, [pc, #464]	@ (8005428 <_dtoa_r+0x2d8>)
 8005256:	f7fb f827 	bl	80002a8 <__aeabi_dsub>
 800525a:	a369      	add	r3, pc, #420	@ (adr r3, 8005400 <_dtoa_r+0x2b0>)
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	f7fb f9da 	bl	8000618 <__aeabi_dmul>
 8005264:	a368      	add	r3, pc, #416	@ (adr r3, 8005408 <_dtoa_r+0x2b8>)
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	f7fb f81f 	bl	80002ac <__adddf3>
 800526e:	4604      	mov	r4, r0
 8005270:	4630      	mov	r0, r6
 8005272:	460d      	mov	r5, r1
 8005274:	f7fb f966 	bl	8000544 <__aeabi_i2d>
 8005278:	a365      	add	r3, pc, #404	@ (adr r3, 8005410 <_dtoa_r+0x2c0>)
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f7fb f9cb 	bl	8000618 <__aeabi_dmul>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4620      	mov	r0, r4
 8005288:	4629      	mov	r1, r5
 800528a:	f7fb f80f 	bl	80002ac <__adddf3>
 800528e:	4604      	mov	r4, r0
 8005290:	460d      	mov	r5, r1
 8005292:	f7fb fc71 	bl	8000b78 <__aeabi_d2iz>
 8005296:	2200      	movs	r2, #0
 8005298:	4607      	mov	r7, r0
 800529a:	2300      	movs	r3, #0
 800529c:	4620      	mov	r0, r4
 800529e:	4629      	mov	r1, r5
 80052a0:	f7fb fc2c 	bl	8000afc <__aeabi_dcmplt>
 80052a4:	b140      	cbz	r0, 80052b8 <_dtoa_r+0x168>
 80052a6:	4638      	mov	r0, r7
 80052a8:	f7fb f94c 	bl	8000544 <__aeabi_i2d>
 80052ac:	4622      	mov	r2, r4
 80052ae:	462b      	mov	r3, r5
 80052b0:	f7fb fc1a 	bl	8000ae8 <__aeabi_dcmpeq>
 80052b4:	b900      	cbnz	r0, 80052b8 <_dtoa_r+0x168>
 80052b6:	3f01      	subs	r7, #1
 80052b8:	2f16      	cmp	r7, #22
 80052ba:	d851      	bhi.n	8005360 <_dtoa_r+0x210>
 80052bc:	4b5b      	ldr	r3, [pc, #364]	@ (800542c <_dtoa_r+0x2dc>)
 80052be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052ca:	f7fb fc17 	bl	8000afc <__aeabi_dcmplt>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d048      	beq.n	8005364 <_dtoa_r+0x214>
 80052d2:	3f01      	subs	r7, #1
 80052d4:	2300      	movs	r3, #0
 80052d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80052d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80052da:	1b9b      	subs	r3, r3, r6
 80052dc:	1e5a      	subs	r2, r3, #1
 80052de:	bf44      	itt	mi
 80052e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80052e4:	2300      	movmi	r3, #0
 80052e6:	9208      	str	r2, [sp, #32]
 80052e8:	bf54      	ite	pl
 80052ea:	f04f 0800 	movpl.w	r8, #0
 80052ee:	9308      	strmi	r3, [sp, #32]
 80052f0:	2f00      	cmp	r7, #0
 80052f2:	db39      	blt.n	8005368 <_dtoa_r+0x218>
 80052f4:	9b08      	ldr	r3, [sp, #32]
 80052f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80052f8:	443b      	add	r3, r7
 80052fa:	9308      	str	r3, [sp, #32]
 80052fc:	2300      	movs	r3, #0
 80052fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005302:	2b09      	cmp	r3, #9
 8005304:	d864      	bhi.n	80053d0 <_dtoa_r+0x280>
 8005306:	2b05      	cmp	r3, #5
 8005308:	bfc4      	itt	gt
 800530a:	3b04      	subgt	r3, #4
 800530c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800530e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005310:	f1a3 0302 	sub.w	r3, r3, #2
 8005314:	bfcc      	ite	gt
 8005316:	2400      	movgt	r4, #0
 8005318:	2401      	movle	r4, #1
 800531a:	2b03      	cmp	r3, #3
 800531c:	d863      	bhi.n	80053e6 <_dtoa_r+0x296>
 800531e:	e8df f003 	tbb	[pc, r3]
 8005322:	372a      	.short	0x372a
 8005324:	5535      	.short	0x5535
 8005326:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800532a:	441e      	add	r6, r3
 800532c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005330:	2b20      	cmp	r3, #32
 8005332:	bfc1      	itttt	gt
 8005334:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005338:	409f      	lslgt	r7, r3
 800533a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800533e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005342:	bfd6      	itet	le
 8005344:	f1c3 0320 	rsble	r3, r3, #32
 8005348:	ea47 0003 	orrgt.w	r0, r7, r3
 800534c:	fa04 f003 	lslle.w	r0, r4, r3
 8005350:	f7fb f8e8 	bl	8000524 <__aeabi_ui2d>
 8005354:	2201      	movs	r2, #1
 8005356:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800535a:	3e01      	subs	r6, #1
 800535c:	9214      	str	r2, [sp, #80]	@ 0x50
 800535e:	e777      	b.n	8005250 <_dtoa_r+0x100>
 8005360:	2301      	movs	r3, #1
 8005362:	e7b8      	b.n	80052d6 <_dtoa_r+0x186>
 8005364:	9012      	str	r0, [sp, #72]	@ 0x48
 8005366:	e7b7      	b.n	80052d8 <_dtoa_r+0x188>
 8005368:	427b      	negs	r3, r7
 800536a:	930a      	str	r3, [sp, #40]	@ 0x28
 800536c:	2300      	movs	r3, #0
 800536e:	eba8 0807 	sub.w	r8, r8, r7
 8005372:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005374:	e7c4      	b.n	8005300 <_dtoa_r+0x1b0>
 8005376:	2300      	movs	r3, #0
 8005378:	930b      	str	r3, [sp, #44]	@ 0x2c
 800537a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800537c:	2b00      	cmp	r3, #0
 800537e:	dc35      	bgt.n	80053ec <_dtoa_r+0x29c>
 8005380:	2301      	movs	r3, #1
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	9307      	str	r3, [sp, #28]
 8005386:	461a      	mov	r2, r3
 8005388:	920e      	str	r2, [sp, #56]	@ 0x38
 800538a:	e00b      	b.n	80053a4 <_dtoa_r+0x254>
 800538c:	2301      	movs	r3, #1
 800538e:	e7f3      	b.n	8005378 <_dtoa_r+0x228>
 8005390:	2300      	movs	r3, #0
 8005392:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005394:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	3301      	adds	r3, #1
 800539c:	2b01      	cmp	r3, #1
 800539e:	9307      	str	r3, [sp, #28]
 80053a0:	bfb8      	it	lt
 80053a2:	2301      	movlt	r3, #1
 80053a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80053a8:	2100      	movs	r1, #0
 80053aa:	2204      	movs	r2, #4
 80053ac:	f102 0514 	add.w	r5, r2, #20
 80053b0:	429d      	cmp	r5, r3
 80053b2:	d91f      	bls.n	80053f4 <_dtoa_r+0x2a4>
 80053b4:	6041      	str	r1, [r0, #4]
 80053b6:	4658      	mov	r0, fp
 80053b8:	f000 fd8e 	bl	8005ed8 <_Balloc>
 80053bc:	4682      	mov	sl, r0
 80053be:	2800      	cmp	r0, #0
 80053c0:	d13c      	bne.n	800543c <_dtoa_r+0x2ec>
 80053c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005430 <_dtoa_r+0x2e0>)
 80053c4:	4602      	mov	r2, r0
 80053c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80053ca:	e6d8      	b.n	800517e <_dtoa_r+0x2e>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e7e0      	b.n	8005392 <_dtoa_r+0x242>
 80053d0:	2401      	movs	r4, #1
 80053d2:	2300      	movs	r3, #0
 80053d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80053d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80053d8:	f04f 33ff 	mov.w	r3, #4294967295
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	9307      	str	r3, [sp, #28]
 80053e0:	2200      	movs	r2, #0
 80053e2:	2312      	movs	r3, #18
 80053e4:	e7d0      	b.n	8005388 <_dtoa_r+0x238>
 80053e6:	2301      	movs	r3, #1
 80053e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053ea:	e7f5      	b.n	80053d8 <_dtoa_r+0x288>
 80053ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	9307      	str	r3, [sp, #28]
 80053f2:	e7d7      	b.n	80053a4 <_dtoa_r+0x254>
 80053f4:	3101      	adds	r1, #1
 80053f6:	0052      	lsls	r2, r2, #1
 80053f8:	e7d8      	b.n	80053ac <_dtoa_r+0x25c>
 80053fa:	bf00      	nop
 80053fc:	f3af 8000 	nop.w
 8005400:	636f4361 	.word	0x636f4361
 8005404:	3fd287a7 	.word	0x3fd287a7
 8005408:	8b60c8b3 	.word	0x8b60c8b3
 800540c:	3fc68a28 	.word	0x3fc68a28
 8005410:	509f79fb 	.word	0x509f79fb
 8005414:	3fd34413 	.word	0x3fd34413
 8005418:	0800875e 	.word	0x0800875e
 800541c:	08008775 	.word	0x08008775
 8005420:	7ff00000 	.word	0x7ff00000
 8005424:	08008729 	.word	0x08008729
 8005428:	3ff80000 	.word	0x3ff80000
 800542c:	08008870 	.word	0x08008870
 8005430:	080087cd 	.word	0x080087cd
 8005434:	0800875a 	.word	0x0800875a
 8005438:	08008728 	.word	0x08008728
 800543c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005440:	6018      	str	r0, [r3, #0]
 8005442:	9b07      	ldr	r3, [sp, #28]
 8005444:	2b0e      	cmp	r3, #14
 8005446:	f200 80a4 	bhi.w	8005592 <_dtoa_r+0x442>
 800544a:	2c00      	cmp	r4, #0
 800544c:	f000 80a1 	beq.w	8005592 <_dtoa_r+0x442>
 8005450:	2f00      	cmp	r7, #0
 8005452:	dd33      	ble.n	80054bc <_dtoa_r+0x36c>
 8005454:	4bad      	ldr	r3, [pc, #692]	@ (800570c <_dtoa_r+0x5bc>)
 8005456:	f007 020f 	and.w	r2, r7, #15
 800545a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800545e:	ed93 7b00 	vldr	d7, [r3]
 8005462:	05f8      	lsls	r0, r7, #23
 8005464:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005468:	ea4f 1427 	mov.w	r4, r7, asr #4
 800546c:	d516      	bpl.n	800549c <_dtoa_r+0x34c>
 800546e:	4ba8      	ldr	r3, [pc, #672]	@ (8005710 <_dtoa_r+0x5c0>)
 8005470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005474:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005478:	f7fb f9f8 	bl	800086c <__aeabi_ddiv>
 800547c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005480:	f004 040f 	and.w	r4, r4, #15
 8005484:	2603      	movs	r6, #3
 8005486:	4da2      	ldr	r5, [pc, #648]	@ (8005710 <_dtoa_r+0x5c0>)
 8005488:	b954      	cbnz	r4, 80054a0 <_dtoa_r+0x350>
 800548a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800548e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005492:	f7fb f9eb 	bl	800086c <__aeabi_ddiv>
 8005496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800549a:	e028      	b.n	80054ee <_dtoa_r+0x39e>
 800549c:	2602      	movs	r6, #2
 800549e:	e7f2      	b.n	8005486 <_dtoa_r+0x336>
 80054a0:	07e1      	lsls	r1, r4, #31
 80054a2:	d508      	bpl.n	80054b6 <_dtoa_r+0x366>
 80054a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054ac:	f7fb f8b4 	bl	8000618 <__aeabi_dmul>
 80054b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054b4:	3601      	adds	r6, #1
 80054b6:	1064      	asrs	r4, r4, #1
 80054b8:	3508      	adds	r5, #8
 80054ba:	e7e5      	b.n	8005488 <_dtoa_r+0x338>
 80054bc:	f000 80d2 	beq.w	8005664 <_dtoa_r+0x514>
 80054c0:	427c      	negs	r4, r7
 80054c2:	4b92      	ldr	r3, [pc, #584]	@ (800570c <_dtoa_r+0x5bc>)
 80054c4:	4d92      	ldr	r5, [pc, #584]	@ (8005710 <_dtoa_r+0x5c0>)
 80054c6:	f004 020f 	and.w	r2, r4, #15
 80054ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054d6:	f7fb f89f 	bl	8000618 <__aeabi_dmul>
 80054da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054de:	1124      	asrs	r4, r4, #4
 80054e0:	2300      	movs	r3, #0
 80054e2:	2602      	movs	r6, #2
 80054e4:	2c00      	cmp	r4, #0
 80054e6:	f040 80b2 	bne.w	800564e <_dtoa_r+0x4fe>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1d3      	bne.n	8005496 <_dtoa_r+0x346>
 80054ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80054f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 80b7 	beq.w	8005668 <_dtoa_r+0x518>
 80054fa:	4b86      	ldr	r3, [pc, #536]	@ (8005714 <_dtoa_r+0x5c4>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	4620      	mov	r0, r4
 8005500:	4629      	mov	r1, r5
 8005502:	f7fb fafb 	bl	8000afc <__aeabi_dcmplt>
 8005506:	2800      	cmp	r0, #0
 8005508:	f000 80ae 	beq.w	8005668 <_dtoa_r+0x518>
 800550c:	9b07      	ldr	r3, [sp, #28]
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 80aa 	beq.w	8005668 <_dtoa_r+0x518>
 8005514:	9b00      	ldr	r3, [sp, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	dd37      	ble.n	800558a <_dtoa_r+0x43a>
 800551a:	1e7b      	subs	r3, r7, #1
 800551c:	9304      	str	r3, [sp, #16]
 800551e:	4620      	mov	r0, r4
 8005520:	4b7d      	ldr	r3, [pc, #500]	@ (8005718 <_dtoa_r+0x5c8>)
 8005522:	2200      	movs	r2, #0
 8005524:	4629      	mov	r1, r5
 8005526:	f7fb f877 	bl	8000618 <__aeabi_dmul>
 800552a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800552e:	9c00      	ldr	r4, [sp, #0]
 8005530:	3601      	adds	r6, #1
 8005532:	4630      	mov	r0, r6
 8005534:	f7fb f806 	bl	8000544 <__aeabi_i2d>
 8005538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800553c:	f7fb f86c 	bl	8000618 <__aeabi_dmul>
 8005540:	4b76      	ldr	r3, [pc, #472]	@ (800571c <_dtoa_r+0x5cc>)
 8005542:	2200      	movs	r2, #0
 8005544:	f7fa feb2 	bl	80002ac <__adddf3>
 8005548:	4605      	mov	r5, r0
 800554a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800554e:	2c00      	cmp	r4, #0
 8005550:	f040 808d 	bne.w	800566e <_dtoa_r+0x51e>
 8005554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005558:	4b71      	ldr	r3, [pc, #452]	@ (8005720 <_dtoa_r+0x5d0>)
 800555a:	2200      	movs	r2, #0
 800555c:	f7fa fea4 	bl	80002a8 <__aeabi_dsub>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005568:	462a      	mov	r2, r5
 800556a:	4633      	mov	r3, r6
 800556c:	f7fb fae4 	bl	8000b38 <__aeabi_dcmpgt>
 8005570:	2800      	cmp	r0, #0
 8005572:	f040 828b 	bne.w	8005a8c <_dtoa_r+0x93c>
 8005576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800557a:	462a      	mov	r2, r5
 800557c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005580:	f7fb fabc 	bl	8000afc <__aeabi_dcmplt>
 8005584:	2800      	cmp	r0, #0
 8005586:	f040 8128 	bne.w	80057da <_dtoa_r+0x68a>
 800558a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800558e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005592:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005594:	2b00      	cmp	r3, #0
 8005596:	f2c0 815a 	blt.w	800584e <_dtoa_r+0x6fe>
 800559a:	2f0e      	cmp	r7, #14
 800559c:	f300 8157 	bgt.w	800584e <_dtoa_r+0x6fe>
 80055a0:	4b5a      	ldr	r3, [pc, #360]	@ (800570c <_dtoa_r+0x5bc>)
 80055a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80055a6:	ed93 7b00 	vldr	d7, [r3]
 80055aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	ed8d 7b00 	vstr	d7, [sp]
 80055b2:	da03      	bge.n	80055bc <_dtoa_r+0x46c>
 80055b4:	9b07      	ldr	r3, [sp, #28]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f340 8101 	ble.w	80057be <_dtoa_r+0x66e>
 80055bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80055c0:	4656      	mov	r6, sl
 80055c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055c6:	4620      	mov	r0, r4
 80055c8:	4629      	mov	r1, r5
 80055ca:	f7fb f94f 	bl	800086c <__aeabi_ddiv>
 80055ce:	f7fb fad3 	bl	8000b78 <__aeabi_d2iz>
 80055d2:	4680      	mov	r8, r0
 80055d4:	f7fa ffb6 	bl	8000544 <__aeabi_i2d>
 80055d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055dc:	f7fb f81c 	bl	8000618 <__aeabi_dmul>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4620      	mov	r0, r4
 80055e6:	4629      	mov	r1, r5
 80055e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80055ec:	f7fa fe5c 	bl	80002a8 <__aeabi_dsub>
 80055f0:	f806 4b01 	strb.w	r4, [r6], #1
 80055f4:	9d07      	ldr	r5, [sp, #28]
 80055f6:	eba6 040a 	sub.w	r4, r6, sl
 80055fa:	42a5      	cmp	r5, r4
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	f040 8117 	bne.w	8005832 <_dtoa_r+0x6e2>
 8005604:	f7fa fe52 	bl	80002ac <__adddf3>
 8005608:	e9dd 2300 	ldrd	r2, r3, [sp]
 800560c:	4604      	mov	r4, r0
 800560e:	460d      	mov	r5, r1
 8005610:	f7fb fa92 	bl	8000b38 <__aeabi_dcmpgt>
 8005614:	2800      	cmp	r0, #0
 8005616:	f040 80f9 	bne.w	800580c <_dtoa_r+0x6bc>
 800561a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800561e:	4620      	mov	r0, r4
 8005620:	4629      	mov	r1, r5
 8005622:	f7fb fa61 	bl	8000ae8 <__aeabi_dcmpeq>
 8005626:	b118      	cbz	r0, 8005630 <_dtoa_r+0x4e0>
 8005628:	f018 0f01 	tst.w	r8, #1
 800562c:	f040 80ee 	bne.w	800580c <_dtoa_r+0x6bc>
 8005630:	4649      	mov	r1, r9
 8005632:	4658      	mov	r0, fp
 8005634:	f000 fc90 	bl	8005f58 <_Bfree>
 8005638:	2300      	movs	r3, #0
 800563a:	7033      	strb	r3, [r6, #0]
 800563c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800563e:	3701      	adds	r7, #1
 8005640:	601f      	str	r7, [r3, #0]
 8005642:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 831d 	beq.w	8005c84 <_dtoa_r+0xb34>
 800564a:	601e      	str	r6, [r3, #0]
 800564c:	e31a      	b.n	8005c84 <_dtoa_r+0xb34>
 800564e:	07e2      	lsls	r2, r4, #31
 8005650:	d505      	bpl.n	800565e <_dtoa_r+0x50e>
 8005652:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005656:	f7fa ffdf 	bl	8000618 <__aeabi_dmul>
 800565a:	3601      	adds	r6, #1
 800565c:	2301      	movs	r3, #1
 800565e:	1064      	asrs	r4, r4, #1
 8005660:	3508      	adds	r5, #8
 8005662:	e73f      	b.n	80054e4 <_dtoa_r+0x394>
 8005664:	2602      	movs	r6, #2
 8005666:	e742      	b.n	80054ee <_dtoa_r+0x39e>
 8005668:	9c07      	ldr	r4, [sp, #28]
 800566a:	9704      	str	r7, [sp, #16]
 800566c:	e761      	b.n	8005532 <_dtoa_r+0x3e2>
 800566e:	4b27      	ldr	r3, [pc, #156]	@ (800570c <_dtoa_r+0x5bc>)
 8005670:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005672:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005676:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800567a:	4454      	add	r4, sl
 800567c:	2900      	cmp	r1, #0
 800567e:	d053      	beq.n	8005728 <_dtoa_r+0x5d8>
 8005680:	4928      	ldr	r1, [pc, #160]	@ (8005724 <_dtoa_r+0x5d4>)
 8005682:	2000      	movs	r0, #0
 8005684:	f7fb f8f2 	bl	800086c <__aeabi_ddiv>
 8005688:	4633      	mov	r3, r6
 800568a:	462a      	mov	r2, r5
 800568c:	f7fa fe0c 	bl	80002a8 <__aeabi_dsub>
 8005690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005694:	4656      	mov	r6, sl
 8005696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800569a:	f7fb fa6d 	bl	8000b78 <__aeabi_d2iz>
 800569e:	4605      	mov	r5, r0
 80056a0:	f7fa ff50 	bl	8000544 <__aeabi_i2d>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056ac:	f7fa fdfc 	bl	80002a8 <__aeabi_dsub>
 80056b0:	3530      	adds	r5, #48	@ 0x30
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056ba:	f806 5b01 	strb.w	r5, [r6], #1
 80056be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056c2:	f7fb fa1b 	bl	8000afc <__aeabi_dcmplt>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d171      	bne.n	80057ae <_dtoa_r+0x65e>
 80056ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056ce:	4911      	ldr	r1, [pc, #68]	@ (8005714 <_dtoa_r+0x5c4>)
 80056d0:	2000      	movs	r0, #0
 80056d2:	f7fa fde9 	bl	80002a8 <__aeabi_dsub>
 80056d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056da:	f7fb fa0f 	bl	8000afc <__aeabi_dcmplt>
 80056de:	2800      	cmp	r0, #0
 80056e0:	f040 8095 	bne.w	800580e <_dtoa_r+0x6be>
 80056e4:	42a6      	cmp	r6, r4
 80056e6:	f43f af50 	beq.w	800558a <_dtoa_r+0x43a>
 80056ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80056ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005718 <_dtoa_r+0x5c8>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	f7fa ff91 	bl	8000618 <__aeabi_dmul>
 80056f6:	4b08      	ldr	r3, [pc, #32]	@ (8005718 <_dtoa_r+0x5c8>)
 80056f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80056fc:	2200      	movs	r2, #0
 80056fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005702:	f7fa ff89 	bl	8000618 <__aeabi_dmul>
 8005706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800570a:	e7c4      	b.n	8005696 <_dtoa_r+0x546>
 800570c:	08008870 	.word	0x08008870
 8005710:	08008848 	.word	0x08008848
 8005714:	3ff00000 	.word	0x3ff00000
 8005718:	40240000 	.word	0x40240000
 800571c:	401c0000 	.word	0x401c0000
 8005720:	40140000 	.word	0x40140000
 8005724:	3fe00000 	.word	0x3fe00000
 8005728:	4631      	mov	r1, r6
 800572a:	4628      	mov	r0, r5
 800572c:	f7fa ff74 	bl	8000618 <__aeabi_dmul>
 8005730:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005734:	9415      	str	r4, [sp, #84]	@ 0x54
 8005736:	4656      	mov	r6, sl
 8005738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800573c:	f7fb fa1c 	bl	8000b78 <__aeabi_d2iz>
 8005740:	4605      	mov	r5, r0
 8005742:	f7fa feff 	bl	8000544 <__aeabi_i2d>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800574e:	f7fa fdab 	bl	80002a8 <__aeabi_dsub>
 8005752:	3530      	adds	r5, #48	@ 0x30
 8005754:	f806 5b01 	strb.w	r5, [r6], #1
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	42a6      	cmp	r6, r4
 800575e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	d124      	bne.n	80057b2 <_dtoa_r+0x662>
 8005768:	4bac      	ldr	r3, [pc, #688]	@ (8005a1c <_dtoa_r+0x8cc>)
 800576a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800576e:	f7fa fd9d 	bl	80002ac <__adddf3>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800577a:	f7fb f9dd 	bl	8000b38 <__aeabi_dcmpgt>
 800577e:	2800      	cmp	r0, #0
 8005780:	d145      	bne.n	800580e <_dtoa_r+0x6be>
 8005782:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005786:	49a5      	ldr	r1, [pc, #660]	@ (8005a1c <_dtoa_r+0x8cc>)
 8005788:	2000      	movs	r0, #0
 800578a:	f7fa fd8d 	bl	80002a8 <__aeabi_dsub>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005796:	f7fb f9b1 	bl	8000afc <__aeabi_dcmplt>
 800579a:	2800      	cmp	r0, #0
 800579c:	f43f aef5 	beq.w	800558a <_dtoa_r+0x43a>
 80057a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80057a2:	1e73      	subs	r3, r6, #1
 80057a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80057a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80057aa:	2b30      	cmp	r3, #48	@ 0x30
 80057ac:	d0f8      	beq.n	80057a0 <_dtoa_r+0x650>
 80057ae:	9f04      	ldr	r7, [sp, #16]
 80057b0:	e73e      	b.n	8005630 <_dtoa_r+0x4e0>
 80057b2:	4b9b      	ldr	r3, [pc, #620]	@ (8005a20 <_dtoa_r+0x8d0>)
 80057b4:	f7fa ff30 	bl	8000618 <__aeabi_dmul>
 80057b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057bc:	e7bc      	b.n	8005738 <_dtoa_r+0x5e8>
 80057be:	d10c      	bne.n	80057da <_dtoa_r+0x68a>
 80057c0:	4b98      	ldr	r3, [pc, #608]	@ (8005a24 <_dtoa_r+0x8d4>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057c8:	f7fa ff26 	bl	8000618 <__aeabi_dmul>
 80057cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057d0:	f7fb f9a8 	bl	8000b24 <__aeabi_dcmpge>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	f000 8157 	beq.w	8005a88 <_dtoa_r+0x938>
 80057da:	2400      	movs	r4, #0
 80057dc:	4625      	mov	r5, r4
 80057de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057e0:	43db      	mvns	r3, r3
 80057e2:	9304      	str	r3, [sp, #16]
 80057e4:	4656      	mov	r6, sl
 80057e6:	2700      	movs	r7, #0
 80057e8:	4621      	mov	r1, r4
 80057ea:	4658      	mov	r0, fp
 80057ec:	f000 fbb4 	bl	8005f58 <_Bfree>
 80057f0:	2d00      	cmp	r5, #0
 80057f2:	d0dc      	beq.n	80057ae <_dtoa_r+0x65e>
 80057f4:	b12f      	cbz	r7, 8005802 <_dtoa_r+0x6b2>
 80057f6:	42af      	cmp	r7, r5
 80057f8:	d003      	beq.n	8005802 <_dtoa_r+0x6b2>
 80057fa:	4639      	mov	r1, r7
 80057fc:	4658      	mov	r0, fp
 80057fe:	f000 fbab 	bl	8005f58 <_Bfree>
 8005802:	4629      	mov	r1, r5
 8005804:	4658      	mov	r0, fp
 8005806:	f000 fba7 	bl	8005f58 <_Bfree>
 800580a:	e7d0      	b.n	80057ae <_dtoa_r+0x65e>
 800580c:	9704      	str	r7, [sp, #16]
 800580e:	4633      	mov	r3, r6
 8005810:	461e      	mov	r6, r3
 8005812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005816:	2a39      	cmp	r2, #57	@ 0x39
 8005818:	d107      	bne.n	800582a <_dtoa_r+0x6da>
 800581a:	459a      	cmp	sl, r3
 800581c:	d1f8      	bne.n	8005810 <_dtoa_r+0x6c0>
 800581e:	9a04      	ldr	r2, [sp, #16]
 8005820:	3201      	adds	r2, #1
 8005822:	9204      	str	r2, [sp, #16]
 8005824:	2230      	movs	r2, #48	@ 0x30
 8005826:	f88a 2000 	strb.w	r2, [sl]
 800582a:	781a      	ldrb	r2, [r3, #0]
 800582c:	3201      	adds	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	e7bd      	b.n	80057ae <_dtoa_r+0x65e>
 8005832:	4b7b      	ldr	r3, [pc, #492]	@ (8005a20 <_dtoa_r+0x8d0>)
 8005834:	2200      	movs	r2, #0
 8005836:	f7fa feef 	bl	8000618 <__aeabi_dmul>
 800583a:	2200      	movs	r2, #0
 800583c:	2300      	movs	r3, #0
 800583e:	4604      	mov	r4, r0
 8005840:	460d      	mov	r5, r1
 8005842:	f7fb f951 	bl	8000ae8 <__aeabi_dcmpeq>
 8005846:	2800      	cmp	r0, #0
 8005848:	f43f aebb 	beq.w	80055c2 <_dtoa_r+0x472>
 800584c:	e6f0      	b.n	8005630 <_dtoa_r+0x4e0>
 800584e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005850:	2a00      	cmp	r2, #0
 8005852:	f000 80db 	beq.w	8005a0c <_dtoa_r+0x8bc>
 8005856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005858:	2a01      	cmp	r2, #1
 800585a:	f300 80bf 	bgt.w	80059dc <_dtoa_r+0x88c>
 800585e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005860:	2a00      	cmp	r2, #0
 8005862:	f000 80b7 	beq.w	80059d4 <_dtoa_r+0x884>
 8005866:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800586a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800586c:	4646      	mov	r6, r8
 800586e:	9a08      	ldr	r2, [sp, #32]
 8005870:	2101      	movs	r1, #1
 8005872:	441a      	add	r2, r3
 8005874:	4658      	mov	r0, fp
 8005876:	4498      	add	r8, r3
 8005878:	9208      	str	r2, [sp, #32]
 800587a:	f000 fc6b 	bl	8006154 <__i2b>
 800587e:	4605      	mov	r5, r0
 8005880:	b15e      	cbz	r6, 800589a <_dtoa_r+0x74a>
 8005882:	9b08      	ldr	r3, [sp, #32]
 8005884:	2b00      	cmp	r3, #0
 8005886:	dd08      	ble.n	800589a <_dtoa_r+0x74a>
 8005888:	42b3      	cmp	r3, r6
 800588a:	9a08      	ldr	r2, [sp, #32]
 800588c:	bfa8      	it	ge
 800588e:	4633      	movge	r3, r6
 8005890:	eba8 0803 	sub.w	r8, r8, r3
 8005894:	1af6      	subs	r6, r6, r3
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	9308      	str	r3, [sp, #32]
 800589a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800589c:	b1f3      	cbz	r3, 80058dc <_dtoa_r+0x78c>
 800589e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80b7 	beq.w	8005a14 <_dtoa_r+0x8c4>
 80058a6:	b18c      	cbz	r4, 80058cc <_dtoa_r+0x77c>
 80058a8:	4629      	mov	r1, r5
 80058aa:	4622      	mov	r2, r4
 80058ac:	4658      	mov	r0, fp
 80058ae:	f000 fd11 	bl	80062d4 <__pow5mult>
 80058b2:	464a      	mov	r2, r9
 80058b4:	4601      	mov	r1, r0
 80058b6:	4605      	mov	r5, r0
 80058b8:	4658      	mov	r0, fp
 80058ba:	f000 fc61 	bl	8006180 <__multiply>
 80058be:	4649      	mov	r1, r9
 80058c0:	9004      	str	r0, [sp, #16]
 80058c2:	4658      	mov	r0, fp
 80058c4:	f000 fb48 	bl	8005f58 <_Bfree>
 80058c8:	9b04      	ldr	r3, [sp, #16]
 80058ca:	4699      	mov	r9, r3
 80058cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058ce:	1b1a      	subs	r2, r3, r4
 80058d0:	d004      	beq.n	80058dc <_dtoa_r+0x78c>
 80058d2:	4649      	mov	r1, r9
 80058d4:	4658      	mov	r0, fp
 80058d6:	f000 fcfd 	bl	80062d4 <__pow5mult>
 80058da:	4681      	mov	r9, r0
 80058dc:	2101      	movs	r1, #1
 80058de:	4658      	mov	r0, fp
 80058e0:	f000 fc38 	bl	8006154 <__i2b>
 80058e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058e6:	4604      	mov	r4, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 81cf 	beq.w	8005c8c <_dtoa_r+0xb3c>
 80058ee:	461a      	mov	r2, r3
 80058f0:	4601      	mov	r1, r0
 80058f2:	4658      	mov	r0, fp
 80058f4:	f000 fcee 	bl	80062d4 <__pow5mult>
 80058f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	4604      	mov	r4, r0
 80058fe:	f300 8095 	bgt.w	8005a2c <_dtoa_r+0x8dc>
 8005902:	9b02      	ldr	r3, [sp, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f040 8087 	bne.w	8005a18 <_dtoa_r+0x8c8>
 800590a:	9b03      	ldr	r3, [sp, #12]
 800590c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005910:	2b00      	cmp	r3, #0
 8005912:	f040 8089 	bne.w	8005a28 <_dtoa_r+0x8d8>
 8005916:	9b03      	ldr	r3, [sp, #12]
 8005918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800591c:	0d1b      	lsrs	r3, r3, #20
 800591e:	051b      	lsls	r3, r3, #20
 8005920:	b12b      	cbz	r3, 800592e <_dtoa_r+0x7de>
 8005922:	9b08      	ldr	r3, [sp, #32]
 8005924:	3301      	adds	r3, #1
 8005926:	9308      	str	r3, [sp, #32]
 8005928:	f108 0801 	add.w	r8, r8, #1
 800592c:	2301      	movs	r3, #1
 800592e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 81b0 	beq.w	8005c98 <_dtoa_r+0xb48>
 8005938:	6923      	ldr	r3, [r4, #16]
 800593a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800593e:	6918      	ldr	r0, [r3, #16]
 8005940:	f000 fbbc 	bl	80060bc <__hi0bits>
 8005944:	f1c0 0020 	rsb	r0, r0, #32
 8005948:	9b08      	ldr	r3, [sp, #32]
 800594a:	4418      	add	r0, r3
 800594c:	f010 001f 	ands.w	r0, r0, #31
 8005950:	d077      	beq.n	8005a42 <_dtoa_r+0x8f2>
 8005952:	f1c0 0320 	rsb	r3, r0, #32
 8005956:	2b04      	cmp	r3, #4
 8005958:	dd6b      	ble.n	8005a32 <_dtoa_r+0x8e2>
 800595a:	9b08      	ldr	r3, [sp, #32]
 800595c:	f1c0 001c 	rsb	r0, r0, #28
 8005960:	4403      	add	r3, r0
 8005962:	4480      	add	r8, r0
 8005964:	4406      	add	r6, r0
 8005966:	9308      	str	r3, [sp, #32]
 8005968:	f1b8 0f00 	cmp.w	r8, #0
 800596c:	dd05      	ble.n	800597a <_dtoa_r+0x82a>
 800596e:	4649      	mov	r1, r9
 8005970:	4642      	mov	r2, r8
 8005972:	4658      	mov	r0, fp
 8005974:	f000 fd08 	bl	8006388 <__lshift>
 8005978:	4681      	mov	r9, r0
 800597a:	9b08      	ldr	r3, [sp, #32]
 800597c:	2b00      	cmp	r3, #0
 800597e:	dd05      	ble.n	800598c <_dtoa_r+0x83c>
 8005980:	4621      	mov	r1, r4
 8005982:	461a      	mov	r2, r3
 8005984:	4658      	mov	r0, fp
 8005986:	f000 fcff 	bl	8006388 <__lshift>
 800598a:	4604      	mov	r4, r0
 800598c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800598e:	2b00      	cmp	r3, #0
 8005990:	d059      	beq.n	8005a46 <_dtoa_r+0x8f6>
 8005992:	4621      	mov	r1, r4
 8005994:	4648      	mov	r0, r9
 8005996:	f000 fd63 	bl	8006460 <__mcmp>
 800599a:	2800      	cmp	r0, #0
 800599c:	da53      	bge.n	8005a46 <_dtoa_r+0x8f6>
 800599e:	1e7b      	subs	r3, r7, #1
 80059a0:	9304      	str	r3, [sp, #16]
 80059a2:	4649      	mov	r1, r9
 80059a4:	2300      	movs	r3, #0
 80059a6:	220a      	movs	r2, #10
 80059a8:	4658      	mov	r0, fp
 80059aa:	f000 faf7 	bl	8005f9c <__multadd>
 80059ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059b0:	4681      	mov	r9, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 8172 	beq.w	8005c9c <_dtoa_r+0xb4c>
 80059b8:	2300      	movs	r3, #0
 80059ba:	4629      	mov	r1, r5
 80059bc:	220a      	movs	r2, #10
 80059be:	4658      	mov	r0, fp
 80059c0:	f000 faec 	bl	8005f9c <__multadd>
 80059c4:	9b00      	ldr	r3, [sp, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	4605      	mov	r5, r0
 80059ca:	dc67      	bgt.n	8005a9c <_dtoa_r+0x94c>
 80059cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	dc41      	bgt.n	8005a56 <_dtoa_r+0x906>
 80059d2:	e063      	b.n	8005a9c <_dtoa_r+0x94c>
 80059d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80059d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80059da:	e746      	b.n	800586a <_dtoa_r+0x71a>
 80059dc:	9b07      	ldr	r3, [sp, #28]
 80059de:	1e5c      	subs	r4, r3, #1
 80059e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059e2:	42a3      	cmp	r3, r4
 80059e4:	bfbf      	itttt	lt
 80059e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80059e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80059ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80059ec:	1ae3      	sublt	r3, r4, r3
 80059ee:	bfb4      	ite	lt
 80059f0:	18d2      	addlt	r2, r2, r3
 80059f2:	1b1c      	subge	r4, r3, r4
 80059f4:	9b07      	ldr	r3, [sp, #28]
 80059f6:	bfbc      	itt	lt
 80059f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80059fa:	2400      	movlt	r4, #0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bfb5      	itete	lt
 8005a00:	eba8 0603 	sublt.w	r6, r8, r3
 8005a04:	9b07      	ldrge	r3, [sp, #28]
 8005a06:	2300      	movlt	r3, #0
 8005a08:	4646      	movge	r6, r8
 8005a0a:	e730      	b.n	800586e <_dtoa_r+0x71e>
 8005a0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005a10:	4646      	mov	r6, r8
 8005a12:	e735      	b.n	8005880 <_dtoa_r+0x730>
 8005a14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a16:	e75c      	b.n	80058d2 <_dtoa_r+0x782>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e788      	b.n	800592e <_dtoa_r+0x7de>
 8005a1c:	3fe00000 	.word	0x3fe00000
 8005a20:	40240000 	.word	0x40240000
 8005a24:	40140000 	.word	0x40140000
 8005a28:	9b02      	ldr	r3, [sp, #8]
 8005a2a:	e780      	b.n	800592e <_dtoa_r+0x7de>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a30:	e782      	b.n	8005938 <_dtoa_r+0x7e8>
 8005a32:	d099      	beq.n	8005968 <_dtoa_r+0x818>
 8005a34:	9a08      	ldr	r2, [sp, #32]
 8005a36:	331c      	adds	r3, #28
 8005a38:	441a      	add	r2, r3
 8005a3a:	4498      	add	r8, r3
 8005a3c:	441e      	add	r6, r3
 8005a3e:	9208      	str	r2, [sp, #32]
 8005a40:	e792      	b.n	8005968 <_dtoa_r+0x818>
 8005a42:	4603      	mov	r3, r0
 8005a44:	e7f6      	b.n	8005a34 <_dtoa_r+0x8e4>
 8005a46:	9b07      	ldr	r3, [sp, #28]
 8005a48:	9704      	str	r7, [sp, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	dc20      	bgt.n	8005a90 <_dtoa_r+0x940>
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	dd1e      	ble.n	8005a94 <_dtoa_r+0x944>
 8005a56:	9b00      	ldr	r3, [sp, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f47f aec0 	bne.w	80057de <_dtoa_r+0x68e>
 8005a5e:	4621      	mov	r1, r4
 8005a60:	2205      	movs	r2, #5
 8005a62:	4658      	mov	r0, fp
 8005a64:	f000 fa9a 	bl	8005f9c <__multadd>
 8005a68:	4601      	mov	r1, r0
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	4648      	mov	r0, r9
 8005a6e:	f000 fcf7 	bl	8006460 <__mcmp>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	f77f aeb3 	ble.w	80057de <_dtoa_r+0x68e>
 8005a78:	4656      	mov	r6, sl
 8005a7a:	2331      	movs	r3, #49	@ 0x31
 8005a7c:	f806 3b01 	strb.w	r3, [r6], #1
 8005a80:	9b04      	ldr	r3, [sp, #16]
 8005a82:	3301      	adds	r3, #1
 8005a84:	9304      	str	r3, [sp, #16]
 8005a86:	e6ae      	b.n	80057e6 <_dtoa_r+0x696>
 8005a88:	9c07      	ldr	r4, [sp, #28]
 8005a8a:	9704      	str	r7, [sp, #16]
 8005a8c:	4625      	mov	r5, r4
 8005a8e:	e7f3      	b.n	8005a78 <_dtoa_r+0x928>
 8005a90:	9b07      	ldr	r3, [sp, #28]
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8104 	beq.w	8005ca4 <_dtoa_r+0xb54>
 8005a9c:	2e00      	cmp	r6, #0
 8005a9e:	dd05      	ble.n	8005aac <_dtoa_r+0x95c>
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	4632      	mov	r2, r6
 8005aa4:	4658      	mov	r0, fp
 8005aa6:	f000 fc6f 	bl	8006388 <__lshift>
 8005aaa:	4605      	mov	r5, r0
 8005aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d05a      	beq.n	8005b68 <_dtoa_r+0xa18>
 8005ab2:	6869      	ldr	r1, [r5, #4]
 8005ab4:	4658      	mov	r0, fp
 8005ab6:	f000 fa0f 	bl	8005ed8 <_Balloc>
 8005aba:	4606      	mov	r6, r0
 8005abc:	b928      	cbnz	r0, 8005aca <_dtoa_r+0x97a>
 8005abe:	4b84      	ldr	r3, [pc, #528]	@ (8005cd0 <_dtoa_r+0xb80>)
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005ac6:	f7ff bb5a 	b.w	800517e <_dtoa_r+0x2e>
 8005aca:	692a      	ldr	r2, [r5, #16]
 8005acc:	3202      	adds	r2, #2
 8005ace:	0092      	lsls	r2, r2, #2
 8005ad0:	f105 010c 	add.w	r1, r5, #12
 8005ad4:	300c      	adds	r0, #12
 8005ad6:	f001 ff75 	bl	80079c4 <memcpy>
 8005ada:	2201      	movs	r2, #1
 8005adc:	4631      	mov	r1, r6
 8005ade:	4658      	mov	r0, fp
 8005ae0:	f000 fc52 	bl	8006388 <__lshift>
 8005ae4:	f10a 0301 	add.w	r3, sl, #1
 8005ae8:	9307      	str	r3, [sp, #28]
 8005aea:	9b00      	ldr	r3, [sp, #0]
 8005aec:	4453      	add	r3, sl
 8005aee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005af0:	9b02      	ldr	r3, [sp, #8]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	462f      	mov	r7, r5
 8005af8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005afa:	4605      	mov	r5, r0
 8005afc:	9b07      	ldr	r3, [sp, #28]
 8005afe:	4621      	mov	r1, r4
 8005b00:	3b01      	subs	r3, #1
 8005b02:	4648      	mov	r0, r9
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	f7ff fa99 	bl	800503c <quorem>
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	9002      	str	r0, [sp, #8]
 8005b0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005b12:	4648      	mov	r0, r9
 8005b14:	f000 fca4 	bl	8006460 <__mcmp>
 8005b18:	462a      	mov	r2, r5
 8005b1a:	9008      	str	r0, [sp, #32]
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	4658      	mov	r0, fp
 8005b20:	f000 fcba 	bl	8006498 <__mdiff>
 8005b24:	68c2      	ldr	r2, [r0, #12]
 8005b26:	4606      	mov	r6, r0
 8005b28:	bb02      	cbnz	r2, 8005b6c <_dtoa_r+0xa1c>
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	4648      	mov	r0, r9
 8005b2e:	f000 fc97 	bl	8006460 <__mcmp>
 8005b32:	4602      	mov	r2, r0
 8005b34:	4631      	mov	r1, r6
 8005b36:	4658      	mov	r0, fp
 8005b38:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b3a:	f000 fa0d 	bl	8005f58 <_Bfree>
 8005b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b42:	9e07      	ldr	r6, [sp, #28]
 8005b44:	ea43 0102 	orr.w	r1, r3, r2
 8005b48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b4a:	4319      	orrs	r1, r3
 8005b4c:	d110      	bne.n	8005b70 <_dtoa_r+0xa20>
 8005b4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005b52:	d029      	beq.n	8005ba8 <_dtoa_r+0xa58>
 8005b54:	9b08      	ldr	r3, [sp, #32]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	dd02      	ble.n	8005b60 <_dtoa_r+0xa10>
 8005b5a:	9b02      	ldr	r3, [sp, #8]
 8005b5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005b60:	9b00      	ldr	r3, [sp, #0]
 8005b62:	f883 8000 	strb.w	r8, [r3]
 8005b66:	e63f      	b.n	80057e8 <_dtoa_r+0x698>
 8005b68:	4628      	mov	r0, r5
 8005b6a:	e7bb      	b.n	8005ae4 <_dtoa_r+0x994>
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	e7e1      	b.n	8005b34 <_dtoa_r+0x9e4>
 8005b70:	9b08      	ldr	r3, [sp, #32]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	db04      	blt.n	8005b80 <_dtoa_r+0xa30>
 8005b76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	d120      	bne.n	8005bc2 <_dtoa_r+0xa72>
 8005b80:	2a00      	cmp	r2, #0
 8005b82:	dded      	ble.n	8005b60 <_dtoa_r+0xa10>
 8005b84:	4649      	mov	r1, r9
 8005b86:	2201      	movs	r2, #1
 8005b88:	4658      	mov	r0, fp
 8005b8a:	f000 fbfd 	bl	8006388 <__lshift>
 8005b8e:	4621      	mov	r1, r4
 8005b90:	4681      	mov	r9, r0
 8005b92:	f000 fc65 	bl	8006460 <__mcmp>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	dc03      	bgt.n	8005ba2 <_dtoa_r+0xa52>
 8005b9a:	d1e1      	bne.n	8005b60 <_dtoa_r+0xa10>
 8005b9c:	f018 0f01 	tst.w	r8, #1
 8005ba0:	d0de      	beq.n	8005b60 <_dtoa_r+0xa10>
 8005ba2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005ba6:	d1d8      	bne.n	8005b5a <_dtoa_r+0xa0a>
 8005ba8:	9a00      	ldr	r2, [sp, #0]
 8005baa:	2339      	movs	r3, #57	@ 0x39
 8005bac:	7013      	strb	r3, [r2, #0]
 8005bae:	4633      	mov	r3, r6
 8005bb0:	461e      	mov	r6, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005bb8:	2a39      	cmp	r2, #57	@ 0x39
 8005bba:	d052      	beq.n	8005c62 <_dtoa_r+0xb12>
 8005bbc:	3201      	adds	r2, #1
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	e612      	b.n	80057e8 <_dtoa_r+0x698>
 8005bc2:	2a00      	cmp	r2, #0
 8005bc4:	dd07      	ble.n	8005bd6 <_dtoa_r+0xa86>
 8005bc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005bca:	d0ed      	beq.n	8005ba8 <_dtoa_r+0xa58>
 8005bcc:	9a00      	ldr	r2, [sp, #0]
 8005bce:	f108 0301 	add.w	r3, r8, #1
 8005bd2:	7013      	strb	r3, [r2, #0]
 8005bd4:	e608      	b.n	80057e8 <_dtoa_r+0x698>
 8005bd6:	9b07      	ldr	r3, [sp, #28]
 8005bd8:	9a07      	ldr	r2, [sp, #28]
 8005bda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d028      	beq.n	8005c36 <_dtoa_r+0xae6>
 8005be4:	4649      	mov	r1, r9
 8005be6:	2300      	movs	r3, #0
 8005be8:	220a      	movs	r2, #10
 8005bea:	4658      	mov	r0, fp
 8005bec:	f000 f9d6 	bl	8005f9c <__multadd>
 8005bf0:	42af      	cmp	r7, r5
 8005bf2:	4681      	mov	r9, r0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	f04f 020a 	mov.w	r2, #10
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	4658      	mov	r0, fp
 8005c00:	d107      	bne.n	8005c12 <_dtoa_r+0xac2>
 8005c02:	f000 f9cb 	bl	8005f9c <__multadd>
 8005c06:	4607      	mov	r7, r0
 8005c08:	4605      	mov	r5, r0
 8005c0a:	9b07      	ldr	r3, [sp, #28]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	9307      	str	r3, [sp, #28]
 8005c10:	e774      	b.n	8005afc <_dtoa_r+0x9ac>
 8005c12:	f000 f9c3 	bl	8005f9c <__multadd>
 8005c16:	4629      	mov	r1, r5
 8005c18:	4607      	mov	r7, r0
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	220a      	movs	r2, #10
 8005c1e:	4658      	mov	r0, fp
 8005c20:	f000 f9bc 	bl	8005f9c <__multadd>
 8005c24:	4605      	mov	r5, r0
 8005c26:	e7f0      	b.n	8005c0a <_dtoa_r+0xaba>
 8005c28:	9b00      	ldr	r3, [sp, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bfcc      	ite	gt
 8005c2e:	461e      	movgt	r6, r3
 8005c30:	2601      	movle	r6, #1
 8005c32:	4456      	add	r6, sl
 8005c34:	2700      	movs	r7, #0
 8005c36:	4649      	mov	r1, r9
 8005c38:	2201      	movs	r2, #1
 8005c3a:	4658      	mov	r0, fp
 8005c3c:	f000 fba4 	bl	8006388 <__lshift>
 8005c40:	4621      	mov	r1, r4
 8005c42:	4681      	mov	r9, r0
 8005c44:	f000 fc0c 	bl	8006460 <__mcmp>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	dcb0      	bgt.n	8005bae <_dtoa_r+0xa5e>
 8005c4c:	d102      	bne.n	8005c54 <_dtoa_r+0xb04>
 8005c4e:	f018 0f01 	tst.w	r8, #1
 8005c52:	d1ac      	bne.n	8005bae <_dtoa_r+0xa5e>
 8005c54:	4633      	mov	r3, r6
 8005c56:	461e      	mov	r6, r3
 8005c58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c5c:	2a30      	cmp	r2, #48	@ 0x30
 8005c5e:	d0fa      	beq.n	8005c56 <_dtoa_r+0xb06>
 8005c60:	e5c2      	b.n	80057e8 <_dtoa_r+0x698>
 8005c62:	459a      	cmp	sl, r3
 8005c64:	d1a4      	bne.n	8005bb0 <_dtoa_r+0xa60>
 8005c66:	9b04      	ldr	r3, [sp, #16]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	9304      	str	r3, [sp, #16]
 8005c6c:	2331      	movs	r3, #49	@ 0x31
 8005c6e:	f88a 3000 	strb.w	r3, [sl]
 8005c72:	e5b9      	b.n	80057e8 <_dtoa_r+0x698>
 8005c74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005cd4 <_dtoa_r+0xb84>
 8005c7a:	b11b      	cbz	r3, 8005c84 <_dtoa_r+0xb34>
 8005c7c:	f10a 0308 	add.w	r3, sl, #8
 8005c80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	4650      	mov	r0, sl
 8005c86:	b019      	add	sp, #100	@ 0x64
 8005c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	f77f ae37 	ble.w	8005902 <_dtoa_r+0x7b2>
 8005c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c96:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c98:	2001      	movs	r0, #1
 8005c9a:	e655      	b.n	8005948 <_dtoa_r+0x7f8>
 8005c9c:	9b00      	ldr	r3, [sp, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f77f aed6 	ble.w	8005a50 <_dtoa_r+0x900>
 8005ca4:	4656      	mov	r6, sl
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	4648      	mov	r0, r9
 8005caa:	f7ff f9c7 	bl	800503c <quorem>
 8005cae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005cb2:	f806 8b01 	strb.w	r8, [r6], #1
 8005cb6:	9b00      	ldr	r3, [sp, #0]
 8005cb8:	eba6 020a 	sub.w	r2, r6, sl
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	ddb3      	ble.n	8005c28 <_dtoa_r+0xad8>
 8005cc0:	4649      	mov	r1, r9
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	220a      	movs	r2, #10
 8005cc6:	4658      	mov	r0, fp
 8005cc8:	f000 f968 	bl	8005f9c <__multadd>
 8005ccc:	4681      	mov	r9, r0
 8005cce:	e7ea      	b.n	8005ca6 <_dtoa_r+0xb56>
 8005cd0:	080087cd 	.word	0x080087cd
 8005cd4:	08008751 	.word	0x08008751

08005cd8 <_free_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4605      	mov	r5, r0
 8005cdc:	2900      	cmp	r1, #0
 8005cde:	d041      	beq.n	8005d64 <_free_r+0x8c>
 8005ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ce4:	1f0c      	subs	r4, r1, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	bfb8      	it	lt
 8005cea:	18e4      	addlt	r4, r4, r3
 8005cec:	f000 f8e8 	bl	8005ec0 <__malloc_lock>
 8005cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d68 <_free_r+0x90>)
 8005cf2:	6813      	ldr	r3, [r2, #0]
 8005cf4:	b933      	cbnz	r3, 8005d04 <_free_r+0x2c>
 8005cf6:	6063      	str	r3, [r4, #4]
 8005cf8:	6014      	str	r4, [r2, #0]
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d00:	f000 b8e4 	b.w	8005ecc <__malloc_unlock>
 8005d04:	42a3      	cmp	r3, r4
 8005d06:	d908      	bls.n	8005d1a <_free_r+0x42>
 8005d08:	6820      	ldr	r0, [r4, #0]
 8005d0a:	1821      	adds	r1, r4, r0
 8005d0c:	428b      	cmp	r3, r1
 8005d0e:	bf01      	itttt	eq
 8005d10:	6819      	ldreq	r1, [r3, #0]
 8005d12:	685b      	ldreq	r3, [r3, #4]
 8005d14:	1809      	addeq	r1, r1, r0
 8005d16:	6021      	streq	r1, [r4, #0]
 8005d18:	e7ed      	b.n	8005cf6 <_free_r+0x1e>
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	b10b      	cbz	r3, 8005d24 <_free_r+0x4c>
 8005d20:	42a3      	cmp	r3, r4
 8005d22:	d9fa      	bls.n	8005d1a <_free_r+0x42>
 8005d24:	6811      	ldr	r1, [r2, #0]
 8005d26:	1850      	adds	r0, r2, r1
 8005d28:	42a0      	cmp	r0, r4
 8005d2a:	d10b      	bne.n	8005d44 <_free_r+0x6c>
 8005d2c:	6820      	ldr	r0, [r4, #0]
 8005d2e:	4401      	add	r1, r0
 8005d30:	1850      	adds	r0, r2, r1
 8005d32:	4283      	cmp	r3, r0
 8005d34:	6011      	str	r1, [r2, #0]
 8005d36:	d1e0      	bne.n	8005cfa <_free_r+0x22>
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	6053      	str	r3, [r2, #4]
 8005d3e:	4408      	add	r0, r1
 8005d40:	6010      	str	r0, [r2, #0]
 8005d42:	e7da      	b.n	8005cfa <_free_r+0x22>
 8005d44:	d902      	bls.n	8005d4c <_free_r+0x74>
 8005d46:	230c      	movs	r3, #12
 8005d48:	602b      	str	r3, [r5, #0]
 8005d4a:	e7d6      	b.n	8005cfa <_free_r+0x22>
 8005d4c:	6820      	ldr	r0, [r4, #0]
 8005d4e:	1821      	adds	r1, r4, r0
 8005d50:	428b      	cmp	r3, r1
 8005d52:	bf04      	itt	eq
 8005d54:	6819      	ldreq	r1, [r3, #0]
 8005d56:	685b      	ldreq	r3, [r3, #4]
 8005d58:	6063      	str	r3, [r4, #4]
 8005d5a:	bf04      	itt	eq
 8005d5c:	1809      	addeq	r1, r1, r0
 8005d5e:	6021      	streq	r1, [r4, #0]
 8005d60:	6054      	str	r4, [r2, #4]
 8005d62:	e7ca      	b.n	8005cfa <_free_r+0x22>
 8005d64:	bd38      	pop	{r3, r4, r5, pc}
 8005d66:	bf00      	nop
 8005d68:	20000ad4 	.word	0x20000ad4

08005d6c <malloc>:
 8005d6c:	4b02      	ldr	r3, [pc, #8]	@ (8005d78 <malloc+0xc>)
 8005d6e:	4601      	mov	r1, r0
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	f000 b825 	b.w	8005dc0 <_malloc_r>
 8005d76:	bf00      	nop
 8005d78:	2000001c 	.word	0x2000001c

08005d7c <sbrk_aligned>:
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	4e0f      	ldr	r6, [pc, #60]	@ (8005dbc <sbrk_aligned+0x40>)
 8005d80:	460c      	mov	r4, r1
 8005d82:	6831      	ldr	r1, [r6, #0]
 8005d84:	4605      	mov	r5, r0
 8005d86:	b911      	cbnz	r1, 8005d8e <sbrk_aligned+0x12>
 8005d88:	f001 fe0c 	bl	80079a4 <_sbrk_r>
 8005d8c:	6030      	str	r0, [r6, #0]
 8005d8e:	4621      	mov	r1, r4
 8005d90:	4628      	mov	r0, r5
 8005d92:	f001 fe07 	bl	80079a4 <_sbrk_r>
 8005d96:	1c43      	adds	r3, r0, #1
 8005d98:	d103      	bne.n	8005da2 <sbrk_aligned+0x26>
 8005d9a:	f04f 34ff 	mov.w	r4, #4294967295
 8005d9e:	4620      	mov	r0, r4
 8005da0:	bd70      	pop	{r4, r5, r6, pc}
 8005da2:	1cc4      	adds	r4, r0, #3
 8005da4:	f024 0403 	bic.w	r4, r4, #3
 8005da8:	42a0      	cmp	r0, r4
 8005daa:	d0f8      	beq.n	8005d9e <sbrk_aligned+0x22>
 8005dac:	1a21      	subs	r1, r4, r0
 8005dae:	4628      	mov	r0, r5
 8005db0:	f001 fdf8 	bl	80079a4 <_sbrk_r>
 8005db4:	3001      	adds	r0, #1
 8005db6:	d1f2      	bne.n	8005d9e <sbrk_aligned+0x22>
 8005db8:	e7ef      	b.n	8005d9a <sbrk_aligned+0x1e>
 8005dba:	bf00      	nop
 8005dbc:	20000ad0 	.word	0x20000ad0

08005dc0 <_malloc_r>:
 8005dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc4:	1ccd      	adds	r5, r1, #3
 8005dc6:	f025 0503 	bic.w	r5, r5, #3
 8005dca:	3508      	adds	r5, #8
 8005dcc:	2d0c      	cmp	r5, #12
 8005dce:	bf38      	it	cc
 8005dd0:	250c      	movcc	r5, #12
 8005dd2:	2d00      	cmp	r5, #0
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	db01      	blt.n	8005ddc <_malloc_r+0x1c>
 8005dd8:	42a9      	cmp	r1, r5
 8005dda:	d904      	bls.n	8005de6 <_malloc_r+0x26>
 8005ddc:	230c      	movs	r3, #12
 8005dde:	6033      	str	r3, [r6, #0]
 8005de0:	2000      	movs	r0, #0
 8005de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ebc <_malloc_r+0xfc>
 8005dea:	f000 f869 	bl	8005ec0 <__malloc_lock>
 8005dee:	f8d8 3000 	ldr.w	r3, [r8]
 8005df2:	461c      	mov	r4, r3
 8005df4:	bb44      	cbnz	r4, 8005e48 <_malloc_r+0x88>
 8005df6:	4629      	mov	r1, r5
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f7ff ffbf 	bl	8005d7c <sbrk_aligned>
 8005dfe:	1c43      	adds	r3, r0, #1
 8005e00:	4604      	mov	r4, r0
 8005e02:	d158      	bne.n	8005eb6 <_malloc_r+0xf6>
 8005e04:	f8d8 4000 	ldr.w	r4, [r8]
 8005e08:	4627      	mov	r7, r4
 8005e0a:	2f00      	cmp	r7, #0
 8005e0c:	d143      	bne.n	8005e96 <_malloc_r+0xd6>
 8005e0e:	2c00      	cmp	r4, #0
 8005e10:	d04b      	beq.n	8005eaa <_malloc_r+0xea>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	4639      	mov	r1, r7
 8005e16:	4630      	mov	r0, r6
 8005e18:	eb04 0903 	add.w	r9, r4, r3
 8005e1c:	f001 fdc2 	bl	80079a4 <_sbrk_r>
 8005e20:	4581      	cmp	r9, r0
 8005e22:	d142      	bne.n	8005eaa <_malloc_r+0xea>
 8005e24:	6821      	ldr	r1, [r4, #0]
 8005e26:	1a6d      	subs	r5, r5, r1
 8005e28:	4629      	mov	r1, r5
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	f7ff ffa6 	bl	8005d7c <sbrk_aligned>
 8005e30:	3001      	adds	r0, #1
 8005e32:	d03a      	beq.n	8005eaa <_malloc_r+0xea>
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	442b      	add	r3, r5
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	bb62      	cbnz	r2, 8005e9c <_malloc_r+0xdc>
 8005e42:	f8c8 7000 	str.w	r7, [r8]
 8005e46:	e00f      	b.n	8005e68 <_malloc_r+0xa8>
 8005e48:	6822      	ldr	r2, [r4, #0]
 8005e4a:	1b52      	subs	r2, r2, r5
 8005e4c:	d420      	bmi.n	8005e90 <_malloc_r+0xd0>
 8005e4e:	2a0b      	cmp	r2, #11
 8005e50:	d917      	bls.n	8005e82 <_malloc_r+0xc2>
 8005e52:	1961      	adds	r1, r4, r5
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	6025      	str	r5, [r4, #0]
 8005e58:	bf18      	it	ne
 8005e5a:	6059      	strne	r1, [r3, #4]
 8005e5c:	6863      	ldr	r3, [r4, #4]
 8005e5e:	bf08      	it	eq
 8005e60:	f8c8 1000 	streq.w	r1, [r8]
 8005e64:	5162      	str	r2, [r4, r5]
 8005e66:	604b      	str	r3, [r1, #4]
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f000 f82f 	bl	8005ecc <__malloc_unlock>
 8005e6e:	f104 000b 	add.w	r0, r4, #11
 8005e72:	1d23      	adds	r3, r4, #4
 8005e74:	f020 0007 	bic.w	r0, r0, #7
 8005e78:	1ac2      	subs	r2, r0, r3
 8005e7a:	bf1c      	itt	ne
 8005e7c:	1a1b      	subne	r3, r3, r0
 8005e7e:	50a3      	strne	r3, [r4, r2]
 8005e80:	e7af      	b.n	8005de2 <_malloc_r+0x22>
 8005e82:	6862      	ldr	r2, [r4, #4]
 8005e84:	42a3      	cmp	r3, r4
 8005e86:	bf0c      	ite	eq
 8005e88:	f8c8 2000 	streq.w	r2, [r8]
 8005e8c:	605a      	strne	r2, [r3, #4]
 8005e8e:	e7eb      	b.n	8005e68 <_malloc_r+0xa8>
 8005e90:	4623      	mov	r3, r4
 8005e92:	6864      	ldr	r4, [r4, #4]
 8005e94:	e7ae      	b.n	8005df4 <_malloc_r+0x34>
 8005e96:	463c      	mov	r4, r7
 8005e98:	687f      	ldr	r7, [r7, #4]
 8005e9a:	e7b6      	b.n	8005e0a <_malloc_r+0x4a>
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	d1fb      	bne.n	8005e9c <_malloc_r+0xdc>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	6053      	str	r3, [r2, #4]
 8005ea8:	e7de      	b.n	8005e68 <_malloc_r+0xa8>
 8005eaa:	230c      	movs	r3, #12
 8005eac:	6033      	str	r3, [r6, #0]
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f000 f80c 	bl	8005ecc <__malloc_unlock>
 8005eb4:	e794      	b.n	8005de0 <_malloc_r+0x20>
 8005eb6:	6005      	str	r5, [r0, #0]
 8005eb8:	e7d6      	b.n	8005e68 <_malloc_r+0xa8>
 8005eba:	bf00      	nop
 8005ebc:	20000ad4 	.word	0x20000ad4

08005ec0 <__malloc_lock>:
 8005ec0:	4801      	ldr	r0, [pc, #4]	@ (8005ec8 <__malloc_lock+0x8>)
 8005ec2:	f7ff b8b2 	b.w	800502a <__retarget_lock_acquire_recursive>
 8005ec6:	bf00      	nop
 8005ec8:	20000acc 	.word	0x20000acc

08005ecc <__malloc_unlock>:
 8005ecc:	4801      	ldr	r0, [pc, #4]	@ (8005ed4 <__malloc_unlock+0x8>)
 8005ece:	f7ff b8ad 	b.w	800502c <__retarget_lock_release_recursive>
 8005ed2:	bf00      	nop
 8005ed4:	20000acc 	.word	0x20000acc

08005ed8 <_Balloc>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	69c6      	ldr	r6, [r0, #28]
 8005edc:	4604      	mov	r4, r0
 8005ede:	460d      	mov	r5, r1
 8005ee0:	b976      	cbnz	r6, 8005f00 <_Balloc+0x28>
 8005ee2:	2010      	movs	r0, #16
 8005ee4:	f7ff ff42 	bl	8005d6c <malloc>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	61e0      	str	r0, [r4, #28]
 8005eec:	b920      	cbnz	r0, 8005ef8 <_Balloc+0x20>
 8005eee:	4b18      	ldr	r3, [pc, #96]	@ (8005f50 <_Balloc+0x78>)
 8005ef0:	4818      	ldr	r0, [pc, #96]	@ (8005f54 <_Balloc+0x7c>)
 8005ef2:	216b      	movs	r1, #107	@ 0x6b
 8005ef4:	f001 fd7c 	bl	80079f0 <__assert_func>
 8005ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005efc:	6006      	str	r6, [r0, #0]
 8005efe:	60c6      	str	r6, [r0, #12]
 8005f00:	69e6      	ldr	r6, [r4, #28]
 8005f02:	68f3      	ldr	r3, [r6, #12]
 8005f04:	b183      	cbz	r3, 8005f28 <_Balloc+0x50>
 8005f06:	69e3      	ldr	r3, [r4, #28]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f0e:	b9b8      	cbnz	r0, 8005f40 <_Balloc+0x68>
 8005f10:	2101      	movs	r1, #1
 8005f12:	fa01 f605 	lsl.w	r6, r1, r5
 8005f16:	1d72      	adds	r2, r6, #5
 8005f18:	0092      	lsls	r2, r2, #2
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f001 fd86 	bl	8007a2c <_calloc_r>
 8005f20:	b160      	cbz	r0, 8005f3c <_Balloc+0x64>
 8005f22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f26:	e00e      	b.n	8005f46 <_Balloc+0x6e>
 8005f28:	2221      	movs	r2, #33	@ 0x21
 8005f2a:	2104      	movs	r1, #4
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f001 fd7d 	bl	8007a2c <_calloc_r>
 8005f32:	69e3      	ldr	r3, [r4, #28]
 8005f34:	60f0      	str	r0, [r6, #12]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e4      	bne.n	8005f06 <_Balloc+0x2e>
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	6802      	ldr	r2, [r0, #0]
 8005f42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f46:	2300      	movs	r3, #0
 8005f48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f4c:	e7f7      	b.n	8005f3e <_Balloc+0x66>
 8005f4e:	bf00      	nop
 8005f50:	0800875e 	.word	0x0800875e
 8005f54:	080087de 	.word	0x080087de

08005f58 <_Bfree>:
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	69c6      	ldr	r6, [r0, #28]
 8005f5c:	4605      	mov	r5, r0
 8005f5e:	460c      	mov	r4, r1
 8005f60:	b976      	cbnz	r6, 8005f80 <_Bfree+0x28>
 8005f62:	2010      	movs	r0, #16
 8005f64:	f7ff ff02 	bl	8005d6c <malloc>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	61e8      	str	r0, [r5, #28]
 8005f6c:	b920      	cbnz	r0, 8005f78 <_Bfree+0x20>
 8005f6e:	4b09      	ldr	r3, [pc, #36]	@ (8005f94 <_Bfree+0x3c>)
 8005f70:	4809      	ldr	r0, [pc, #36]	@ (8005f98 <_Bfree+0x40>)
 8005f72:	218f      	movs	r1, #143	@ 0x8f
 8005f74:	f001 fd3c 	bl	80079f0 <__assert_func>
 8005f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f7c:	6006      	str	r6, [r0, #0]
 8005f7e:	60c6      	str	r6, [r0, #12]
 8005f80:	b13c      	cbz	r4, 8005f92 <_Bfree+0x3a>
 8005f82:	69eb      	ldr	r3, [r5, #28]
 8005f84:	6862      	ldr	r2, [r4, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f8c:	6021      	str	r1, [r4, #0]
 8005f8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	0800875e 	.word	0x0800875e
 8005f98:	080087de 	.word	0x080087de

08005f9c <__multadd>:
 8005f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa0:	690d      	ldr	r5, [r1, #16]
 8005fa2:	4607      	mov	r7, r0
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	461e      	mov	r6, r3
 8005fa8:	f101 0c14 	add.w	ip, r1, #20
 8005fac:	2000      	movs	r0, #0
 8005fae:	f8dc 3000 	ldr.w	r3, [ip]
 8005fb2:	b299      	uxth	r1, r3
 8005fb4:	fb02 6101 	mla	r1, r2, r1, r6
 8005fb8:	0c1e      	lsrs	r6, r3, #16
 8005fba:	0c0b      	lsrs	r3, r1, #16
 8005fbc:	fb02 3306 	mla	r3, r2, r6, r3
 8005fc0:	b289      	uxth	r1, r1
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005fc8:	4285      	cmp	r5, r0
 8005fca:	f84c 1b04 	str.w	r1, [ip], #4
 8005fce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005fd2:	dcec      	bgt.n	8005fae <__multadd+0x12>
 8005fd4:	b30e      	cbz	r6, 800601a <__multadd+0x7e>
 8005fd6:	68a3      	ldr	r3, [r4, #8]
 8005fd8:	42ab      	cmp	r3, r5
 8005fda:	dc19      	bgt.n	8006010 <__multadd+0x74>
 8005fdc:	6861      	ldr	r1, [r4, #4]
 8005fde:	4638      	mov	r0, r7
 8005fe0:	3101      	adds	r1, #1
 8005fe2:	f7ff ff79 	bl	8005ed8 <_Balloc>
 8005fe6:	4680      	mov	r8, r0
 8005fe8:	b928      	cbnz	r0, 8005ff6 <__multadd+0x5a>
 8005fea:	4602      	mov	r2, r0
 8005fec:	4b0c      	ldr	r3, [pc, #48]	@ (8006020 <__multadd+0x84>)
 8005fee:	480d      	ldr	r0, [pc, #52]	@ (8006024 <__multadd+0x88>)
 8005ff0:	21ba      	movs	r1, #186	@ 0xba
 8005ff2:	f001 fcfd 	bl	80079f0 <__assert_func>
 8005ff6:	6922      	ldr	r2, [r4, #16]
 8005ff8:	3202      	adds	r2, #2
 8005ffa:	f104 010c 	add.w	r1, r4, #12
 8005ffe:	0092      	lsls	r2, r2, #2
 8006000:	300c      	adds	r0, #12
 8006002:	f001 fcdf 	bl	80079c4 <memcpy>
 8006006:	4621      	mov	r1, r4
 8006008:	4638      	mov	r0, r7
 800600a:	f7ff ffa5 	bl	8005f58 <_Bfree>
 800600e:	4644      	mov	r4, r8
 8006010:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006014:	3501      	adds	r5, #1
 8006016:	615e      	str	r6, [r3, #20]
 8006018:	6125      	str	r5, [r4, #16]
 800601a:	4620      	mov	r0, r4
 800601c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006020:	080087cd 	.word	0x080087cd
 8006024:	080087de 	.word	0x080087de

08006028 <__s2b>:
 8006028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800602c:	460c      	mov	r4, r1
 800602e:	4615      	mov	r5, r2
 8006030:	461f      	mov	r7, r3
 8006032:	2209      	movs	r2, #9
 8006034:	3308      	adds	r3, #8
 8006036:	4606      	mov	r6, r0
 8006038:	fb93 f3f2 	sdiv	r3, r3, r2
 800603c:	2100      	movs	r1, #0
 800603e:	2201      	movs	r2, #1
 8006040:	429a      	cmp	r2, r3
 8006042:	db09      	blt.n	8006058 <__s2b+0x30>
 8006044:	4630      	mov	r0, r6
 8006046:	f7ff ff47 	bl	8005ed8 <_Balloc>
 800604a:	b940      	cbnz	r0, 800605e <__s2b+0x36>
 800604c:	4602      	mov	r2, r0
 800604e:	4b19      	ldr	r3, [pc, #100]	@ (80060b4 <__s2b+0x8c>)
 8006050:	4819      	ldr	r0, [pc, #100]	@ (80060b8 <__s2b+0x90>)
 8006052:	21d3      	movs	r1, #211	@ 0xd3
 8006054:	f001 fccc 	bl	80079f0 <__assert_func>
 8006058:	0052      	lsls	r2, r2, #1
 800605a:	3101      	adds	r1, #1
 800605c:	e7f0      	b.n	8006040 <__s2b+0x18>
 800605e:	9b08      	ldr	r3, [sp, #32]
 8006060:	6143      	str	r3, [r0, #20]
 8006062:	2d09      	cmp	r5, #9
 8006064:	f04f 0301 	mov.w	r3, #1
 8006068:	6103      	str	r3, [r0, #16]
 800606a:	dd16      	ble.n	800609a <__s2b+0x72>
 800606c:	f104 0909 	add.w	r9, r4, #9
 8006070:	46c8      	mov	r8, r9
 8006072:	442c      	add	r4, r5
 8006074:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006078:	4601      	mov	r1, r0
 800607a:	3b30      	subs	r3, #48	@ 0x30
 800607c:	220a      	movs	r2, #10
 800607e:	4630      	mov	r0, r6
 8006080:	f7ff ff8c 	bl	8005f9c <__multadd>
 8006084:	45a0      	cmp	r8, r4
 8006086:	d1f5      	bne.n	8006074 <__s2b+0x4c>
 8006088:	f1a5 0408 	sub.w	r4, r5, #8
 800608c:	444c      	add	r4, r9
 800608e:	1b2d      	subs	r5, r5, r4
 8006090:	1963      	adds	r3, r4, r5
 8006092:	42bb      	cmp	r3, r7
 8006094:	db04      	blt.n	80060a0 <__s2b+0x78>
 8006096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800609a:	340a      	adds	r4, #10
 800609c:	2509      	movs	r5, #9
 800609e:	e7f6      	b.n	800608e <__s2b+0x66>
 80060a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80060a4:	4601      	mov	r1, r0
 80060a6:	3b30      	subs	r3, #48	@ 0x30
 80060a8:	220a      	movs	r2, #10
 80060aa:	4630      	mov	r0, r6
 80060ac:	f7ff ff76 	bl	8005f9c <__multadd>
 80060b0:	e7ee      	b.n	8006090 <__s2b+0x68>
 80060b2:	bf00      	nop
 80060b4:	080087cd 	.word	0x080087cd
 80060b8:	080087de 	.word	0x080087de

080060bc <__hi0bits>:
 80060bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80060c0:	4603      	mov	r3, r0
 80060c2:	bf36      	itet	cc
 80060c4:	0403      	lslcc	r3, r0, #16
 80060c6:	2000      	movcs	r0, #0
 80060c8:	2010      	movcc	r0, #16
 80060ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060ce:	bf3c      	itt	cc
 80060d0:	021b      	lslcc	r3, r3, #8
 80060d2:	3008      	addcc	r0, #8
 80060d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060d8:	bf3c      	itt	cc
 80060da:	011b      	lslcc	r3, r3, #4
 80060dc:	3004      	addcc	r0, #4
 80060de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e2:	bf3c      	itt	cc
 80060e4:	009b      	lslcc	r3, r3, #2
 80060e6:	3002      	addcc	r0, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	db05      	blt.n	80060f8 <__hi0bits+0x3c>
 80060ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80060f0:	f100 0001 	add.w	r0, r0, #1
 80060f4:	bf08      	it	eq
 80060f6:	2020      	moveq	r0, #32
 80060f8:	4770      	bx	lr

080060fa <__lo0bits>:
 80060fa:	6803      	ldr	r3, [r0, #0]
 80060fc:	4602      	mov	r2, r0
 80060fe:	f013 0007 	ands.w	r0, r3, #7
 8006102:	d00b      	beq.n	800611c <__lo0bits+0x22>
 8006104:	07d9      	lsls	r1, r3, #31
 8006106:	d421      	bmi.n	800614c <__lo0bits+0x52>
 8006108:	0798      	lsls	r0, r3, #30
 800610a:	bf49      	itett	mi
 800610c:	085b      	lsrmi	r3, r3, #1
 800610e:	089b      	lsrpl	r3, r3, #2
 8006110:	2001      	movmi	r0, #1
 8006112:	6013      	strmi	r3, [r2, #0]
 8006114:	bf5c      	itt	pl
 8006116:	6013      	strpl	r3, [r2, #0]
 8006118:	2002      	movpl	r0, #2
 800611a:	4770      	bx	lr
 800611c:	b299      	uxth	r1, r3
 800611e:	b909      	cbnz	r1, 8006124 <__lo0bits+0x2a>
 8006120:	0c1b      	lsrs	r3, r3, #16
 8006122:	2010      	movs	r0, #16
 8006124:	b2d9      	uxtb	r1, r3
 8006126:	b909      	cbnz	r1, 800612c <__lo0bits+0x32>
 8006128:	3008      	adds	r0, #8
 800612a:	0a1b      	lsrs	r3, r3, #8
 800612c:	0719      	lsls	r1, r3, #28
 800612e:	bf04      	itt	eq
 8006130:	091b      	lsreq	r3, r3, #4
 8006132:	3004      	addeq	r0, #4
 8006134:	0799      	lsls	r1, r3, #30
 8006136:	bf04      	itt	eq
 8006138:	089b      	lsreq	r3, r3, #2
 800613a:	3002      	addeq	r0, #2
 800613c:	07d9      	lsls	r1, r3, #31
 800613e:	d403      	bmi.n	8006148 <__lo0bits+0x4e>
 8006140:	085b      	lsrs	r3, r3, #1
 8006142:	f100 0001 	add.w	r0, r0, #1
 8006146:	d003      	beq.n	8006150 <__lo0bits+0x56>
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	4770      	bx	lr
 800614c:	2000      	movs	r0, #0
 800614e:	4770      	bx	lr
 8006150:	2020      	movs	r0, #32
 8006152:	4770      	bx	lr

08006154 <__i2b>:
 8006154:	b510      	push	{r4, lr}
 8006156:	460c      	mov	r4, r1
 8006158:	2101      	movs	r1, #1
 800615a:	f7ff febd 	bl	8005ed8 <_Balloc>
 800615e:	4602      	mov	r2, r0
 8006160:	b928      	cbnz	r0, 800616e <__i2b+0x1a>
 8006162:	4b05      	ldr	r3, [pc, #20]	@ (8006178 <__i2b+0x24>)
 8006164:	4805      	ldr	r0, [pc, #20]	@ (800617c <__i2b+0x28>)
 8006166:	f240 1145 	movw	r1, #325	@ 0x145
 800616a:	f001 fc41 	bl	80079f0 <__assert_func>
 800616e:	2301      	movs	r3, #1
 8006170:	6144      	str	r4, [r0, #20]
 8006172:	6103      	str	r3, [r0, #16]
 8006174:	bd10      	pop	{r4, pc}
 8006176:	bf00      	nop
 8006178:	080087cd 	.word	0x080087cd
 800617c:	080087de 	.word	0x080087de

08006180 <__multiply>:
 8006180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	4614      	mov	r4, r2
 8006186:	690a      	ldr	r2, [r1, #16]
 8006188:	6923      	ldr	r3, [r4, #16]
 800618a:	429a      	cmp	r2, r3
 800618c:	bfa8      	it	ge
 800618e:	4623      	movge	r3, r4
 8006190:	460f      	mov	r7, r1
 8006192:	bfa4      	itt	ge
 8006194:	460c      	movge	r4, r1
 8006196:	461f      	movge	r7, r3
 8006198:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800619c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80061a0:	68a3      	ldr	r3, [r4, #8]
 80061a2:	6861      	ldr	r1, [r4, #4]
 80061a4:	eb0a 0609 	add.w	r6, sl, r9
 80061a8:	42b3      	cmp	r3, r6
 80061aa:	b085      	sub	sp, #20
 80061ac:	bfb8      	it	lt
 80061ae:	3101      	addlt	r1, #1
 80061b0:	f7ff fe92 	bl	8005ed8 <_Balloc>
 80061b4:	b930      	cbnz	r0, 80061c4 <__multiply+0x44>
 80061b6:	4602      	mov	r2, r0
 80061b8:	4b44      	ldr	r3, [pc, #272]	@ (80062cc <__multiply+0x14c>)
 80061ba:	4845      	ldr	r0, [pc, #276]	@ (80062d0 <__multiply+0x150>)
 80061bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80061c0:	f001 fc16 	bl	80079f0 <__assert_func>
 80061c4:	f100 0514 	add.w	r5, r0, #20
 80061c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80061cc:	462b      	mov	r3, r5
 80061ce:	2200      	movs	r2, #0
 80061d0:	4543      	cmp	r3, r8
 80061d2:	d321      	bcc.n	8006218 <__multiply+0x98>
 80061d4:	f107 0114 	add.w	r1, r7, #20
 80061d8:	f104 0214 	add.w	r2, r4, #20
 80061dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80061e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80061e4:	9302      	str	r3, [sp, #8]
 80061e6:	1b13      	subs	r3, r2, r4
 80061e8:	3b15      	subs	r3, #21
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	3304      	adds	r3, #4
 80061f0:	f104 0715 	add.w	r7, r4, #21
 80061f4:	42ba      	cmp	r2, r7
 80061f6:	bf38      	it	cc
 80061f8:	2304      	movcc	r3, #4
 80061fa:	9301      	str	r3, [sp, #4]
 80061fc:	9b02      	ldr	r3, [sp, #8]
 80061fe:	9103      	str	r1, [sp, #12]
 8006200:	428b      	cmp	r3, r1
 8006202:	d80c      	bhi.n	800621e <__multiply+0x9e>
 8006204:	2e00      	cmp	r6, #0
 8006206:	dd03      	ble.n	8006210 <__multiply+0x90>
 8006208:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800620c:	2b00      	cmp	r3, #0
 800620e:	d05b      	beq.n	80062c8 <__multiply+0x148>
 8006210:	6106      	str	r6, [r0, #16]
 8006212:	b005      	add	sp, #20
 8006214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006218:	f843 2b04 	str.w	r2, [r3], #4
 800621c:	e7d8      	b.n	80061d0 <__multiply+0x50>
 800621e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006222:	f1ba 0f00 	cmp.w	sl, #0
 8006226:	d024      	beq.n	8006272 <__multiply+0xf2>
 8006228:	f104 0e14 	add.w	lr, r4, #20
 800622c:	46a9      	mov	r9, r5
 800622e:	f04f 0c00 	mov.w	ip, #0
 8006232:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006236:	f8d9 3000 	ldr.w	r3, [r9]
 800623a:	fa1f fb87 	uxth.w	fp, r7
 800623e:	b29b      	uxth	r3, r3
 8006240:	fb0a 330b 	mla	r3, sl, fp, r3
 8006244:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006248:	f8d9 7000 	ldr.w	r7, [r9]
 800624c:	4463      	add	r3, ip
 800624e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006252:	fb0a c70b 	mla	r7, sl, fp, ip
 8006256:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800625a:	b29b      	uxth	r3, r3
 800625c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006260:	4572      	cmp	r2, lr
 8006262:	f849 3b04 	str.w	r3, [r9], #4
 8006266:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800626a:	d8e2      	bhi.n	8006232 <__multiply+0xb2>
 800626c:	9b01      	ldr	r3, [sp, #4]
 800626e:	f845 c003 	str.w	ip, [r5, r3]
 8006272:	9b03      	ldr	r3, [sp, #12]
 8006274:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006278:	3104      	adds	r1, #4
 800627a:	f1b9 0f00 	cmp.w	r9, #0
 800627e:	d021      	beq.n	80062c4 <__multiply+0x144>
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	f104 0c14 	add.w	ip, r4, #20
 8006286:	46ae      	mov	lr, r5
 8006288:	f04f 0a00 	mov.w	sl, #0
 800628c:	f8bc b000 	ldrh.w	fp, [ip]
 8006290:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006294:	fb09 770b 	mla	r7, r9, fp, r7
 8006298:	4457      	add	r7, sl
 800629a:	b29b      	uxth	r3, r3
 800629c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80062a0:	f84e 3b04 	str.w	r3, [lr], #4
 80062a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80062a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062ac:	f8be 3000 	ldrh.w	r3, [lr]
 80062b0:	fb09 330a 	mla	r3, r9, sl, r3
 80062b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80062b8:	4562      	cmp	r2, ip
 80062ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062be:	d8e5      	bhi.n	800628c <__multiply+0x10c>
 80062c0:	9f01      	ldr	r7, [sp, #4]
 80062c2:	51eb      	str	r3, [r5, r7]
 80062c4:	3504      	adds	r5, #4
 80062c6:	e799      	b.n	80061fc <__multiply+0x7c>
 80062c8:	3e01      	subs	r6, #1
 80062ca:	e79b      	b.n	8006204 <__multiply+0x84>
 80062cc:	080087cd 	.word	0x080087cd
 80062d0:	080087de 	.word	0x080087de

080062d4 <__pow5mult>:
 80062d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062d8:	4615      	mov	r5, r2
 80062da:	f012 0203 	ands.w	r2, r2, #3
 80062de:	4607      	mov	r7, r0
 80062e0:	460e      	mov	r6, r1
 80062e2:	d007      	beq.n	80062f4 <__pow5mult+0x20>
 80062e4:	4c25      	ldr	r4, [pc, #148]	@ (800637c <__pow5mult+0xa8>)
 80062e6:	3a01      	subs	r2, #1
 80062e8:	2300      	movs	r3, #0
 80062ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062ee:	f7ff fe55 	bl	8005f9c <__multadd>
 80062f2:	4606      	mov	r6, r0
 80062f4:	10ad      	asrs	r5, r5, #2
 80062f6:	d03d      	beq.n	8006374 <__pow5mult+0xa0>
 80062f8:	69fc      	ldr	r4, [r7, #28]
 80062fa:	b97c      	cbnz	r4, 800631c <__pow5mult+0x48>
 80062fc:	2010      	movs	r0, #16
 80062fe:	f7ff fd35 	bl	8005d6c <malloc>
 8006302:	4602      	mov	r2, r0
 8006304:	61f8      	str	r0, [r7, #28]
 8006306:	b928      	cbnz	r0, 8006314 <__pow5mult+0x40>
 8006308:	4b1d      	ldr	r3, [pc, #116]	@ (8006380 <__pow5mult+0xac>)
 800630a:	481e      	ldr	r0, [pc, #120]	@ (8006384 <__pow5mult+0xb0>)
 800630c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006310:	f001 fb6e 	bl	80079f0 <__assert_func>
 8006314:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006318:	6004      	str	r4, [r0, #0]
 800631a:	60c4      	str	r4, [r0, #12]
 800631c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006320:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006324:	b94c      	cbnz	r4, 800633a <__pow5mult+0x66>
 8006326:	f240 2171 	movw	r1, #625	@ 0x271
 800632a:	4638      	mov	r0, r7
 800632c:	f7ff ff12 	bl	8006154 <__i2b>
 8006330:	2300      	movs	r3, #0
 8006332:	f8c8 0008 	str.w	r0, [r8, #8]
 8006336:	4604      	mov	r4, r0
 8006338:	6003      	str	r3, [r0, #0]
 800633a:	f04f 0900 	mov.w	r9, #0
 800633e:	07eb      	lsls	r3, r5, #31
 8006340:	d50a      	bpl.n	8006358 <__pow5mult+0x84>
 8006342:	4631      	mov	r1, r6
 8006344:	4622      	mov	r2, r4
 8006346:	4638      	mov	r0, r7
 8006348:	f7ff ff1a 	bl	8006180 <__multiply>
 800634c:	4631      	mov	r1, r6
 800634e:	4680      	mov	r8, r0
 8006350:	4638      	mov	r0, r7
 8006352:	f7ff fe01 	bl	8005f58 <_Bfree>
 8006356:	4646      	mov	r6, r8
 8006358:	106d      	asrs	r5, r5, #1
 800635a:	d00b      	beq.n	8006374 <__pow5mult+0xa0>
 800635c:	6820      	ldr	r0, [r4, #0]
 800635e:	b938      	cbnz	r0, 8006370 <__pow5mult+0x9c>
 8006360:	4622      	mov	r2, r4
 8006362:	4621      	mov	r1, r4
 8006364:	4638      	mov	r0, r7
 8006366:	f7ff ff0b 	bl	8006180 <__multiply>
 800636a:	6020      	str	r0, [r4, #0]
 800636c:	f8c0 9000 	str.w	r9, [r0]
 8006370:	4604      	mov	r4, r0
 8006372:	e7e4      	b.n	800633e <__pow5mult+0x6a>
 8006374:	4630      	mov	r0, r6
 8006376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800637a:	bf00      	nop
 800637c:	08008838 	.word	0x08008838
 8006380:	0800875e 	.word	0x0800875e
 8006384:	080087de 	.word	0x080087de

08006388 <__lshift>:
 8006388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800638c:	460c      	mov	r4, r1
 800638e:	6849      	ldr	r1, [r1, #4]
 8006390:	6923      	ldr	r3, [r4, #16]
 8006392:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006396:	68a3      	ldr	r3, [r4, #8]
 8006398:	4607      	mov	r7, r0
 800639a:	4691      	mov	r9, r2
 800639c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063a0:	f108 0601 	add.w	r6, r8, #1
 80063a4:	42b3      	cmp	r3, r6
 80063a6:	db0b      	blt.n	80063c0 <__lshift+0x38>
 80063a8:	4638      	mov	r0, r7
 80063aa:	f7ff fd95 	bl	8005ed8 <_Balloc>
 80063ae:	4605      	mov	r5, r0
 80063b0:	b948      	cbnz	r0, 80063c6 <__lshift+0x3e>
 80063b2:	4602      	mov	r2, r0
 80063b4:	4b28      	ldr	r3, [pc, #160]	@ (8006458 <__lshift+0xd0>)
 80063b6:	4829      	ldr	r0, [pc, #164]	@ (800645c <__lshift+0xd4>)
 80063b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80063bc:	f001 fb18 	bl	80079f0 <__assert_func>
 80063c0:	3101      	adds	r1, #1
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	e7ee      	b.n	80063a4 <__lshift+0x1c>
 80063c6:	2300      	movs	r3, #0
 80063c8:	f100 0114 	add.w	r1, r0, #20
 80063cc:	f100 0210 	add.w	r2, r0, #16
 80063d0:	4618      	mov	r0, r3
 80063d2:	4553      	cmp	r3, sl
 80063d4:	db33      	blt.n	800643e <__lshift+0xb6>
 80063d6:	6920      	ldr	r0, [r4, #16]
 80063d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063dc:	f104 0314 	add.w	r3, r4, #20
 80063e0:	f019 091f 	ands.w	r9, r9, #31
 80063e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063ec:	d02b      	beq.n	8006446 <__lshift+0xbe>
 80063ee:	f1c9 0e20 	rsb	lr, r9, #32
 80063f2:	468a      	mov	sl, r1
 80063f4:	2200      	movs	r2, #0
 80063f6:	6818      	ldr	r0, [r3, #0]
 80063f8:	fa00 f009 	lsl.w	r0, r0, r9
 80063fc:	4310      	orrs	r0, r2
 80063fe:	f84a 0b04 	str.w	r0, [sl], #4
 8006402:	f853 2b04 	ldr.w	r2, [r3], #4
 8006406:	459c      	cmp	ip, r3
 8006408:	fa22 f20e 	lsr.w	r2, r2, lr
 800640c:	d8f3      	bhi.n	80063f6 <__lshift+0x6e>
 800640e:	ebac 0304 	sub.w	r3, ip, r4
 8006412:	3b15      	subs	r3, #21
 8006414:	f023 0303 	bic.w	r3, r3, #3
 8006418:	3304      	adds	r3, #4
 800641a:	f104 0015 	add.w	r0, r4, #21
 800641e:	4584      	cmp	ip, r0
 8006420:	bf38      	it	cc
 8006422:	2304      	movcc	r3, #4
 8006424:	50ca      	str	r2, [r1, r3]
 8006426:	b10a      	cbz	r2, 800642c <__lshift+0xa4>
 8006428:	f108 0602 	add.w	r6, r8, #2
 800642c:	3e01      	subs	r6, #1
 800642e:	4638      	mov	r0, r7
 8006430:	612e      	str	r6, [r5, #16]
 8006432:	4621      	mov	r1, r4
 8006434:	f7ff fd90 	bl	8005f58 <_Bfree>
 8006438:	4628      	mov	r0, r5
 800643a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006442:	3301      	adds	r3, #1
 8006444:	e7c5      	b.n	80063d2 <__lshift+0x4a>
 8006446:	3904      	subs	r1, #4
 8006448:	f853 2b04 	ldr.w	r2, [r3], #4
 800644c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006450:	459c      	cmp	ip, r3
 8006452:	d8f9      	bhi.n	8006448 <__lshift+0xc0>
 8006454:	e7ea      	b.n	800642c <__lshift+0xa4>
 8006456:	bf00      	nop
 8006458:	080087cd 	.word	0x080087cd
 800645c:	080087de 	.word	0x080087de

08006460 <__mcmp>:
 8006460:	690a      	ldr	r2, [r1, #16]
 8006462:	4603      	mov	r3, r0
 8006464:	6900      	ldr	r0, [r0, #16]
 8006466:	1a80      	subs	r0, r0, r2
 8006468:	b530      	push	{r4, r5, lr}
 800646a:	d10e      	bne.n	800648a <__mcmp+0x2a>
 800646c:	3314      	adds	r3, #20
 800646e:	3114      	adds	r1, #20
 8006470:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006474:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006478:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800647c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006480:	4295      	cmp	r5, r2
 8006482:	d003      	beq.n	800648c <__mcmp+0x2c>
 8006484:	d205      	bcs.n	8006492 <__mcmp+0x32>
 8006486:	f04f 30ff 	mov.w	r0, #4294967295
 800648a:	bd30      	pop	{r4, r5, pc}
 800648c:	42a3      	cmp	r3, r4
 800648e:	d3f3      	bcc.n	8006478 <__mcmp+0x18>
 8006490:	e7fb      	b.n	800648a <__mcmp+0x2a>
 8006492:	2001      	movs	r0, #1
 8006494:	e7f9      	b.n	800648a <__mcmp+0x2a>
	...

08006498 <__mdiff>:
 8006498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	4689      	mov	r9, r1
 800649e:	4606      	mov	r6, r0
 80064a0:	4611      	mov	r1, r2
 80064a2:	4648      	mov	r0, r9
 80064a4:	4614      	mov	r4, r2
 80064a6:	f7ff ffdb 	bl	8006460 <__mcmp>
 80064aa:	1e05      	subs	r5, r0, #0
 80064ac:	d112      	bne.n	80064d4 <__mdiff+0x3c>
 80064ae:	4629      	mov	r1, r5
 80064b0:	4630      	mov	r0, r6
 80064b2:	f7ff fd11 	bl	8005ed8 <_Balloc>
 80064b6:	4602      	mov	r2, r0
 80064b8:	b928      	cbnz	r0, 80064c6 <__mdiff+0x2e>
 80064ba:	4b3f      	ldr	r3, [pc, #252]	@ (80065b8 <__mdiff+0x120>)
 80064bc:	f240 2137 	movw	r1, #567	@ 0x237
 80064c0:	483e      	ldr	r0, [pc, #248]	@ (80065bc <__mdiff+0x124>)
 80064c2:	f001 fa95 	bl	80079f0 <__assert_func>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80064cc:	4610      	mov	r0, r2
 80064ce:	b003      	add	sp, #12
 80064d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d4:	bfbc      	itt	lt
 80064d6:	464b      	movlt	r3, r9
 80064d8:	46a1      	movlt	r9, r4
 80064da:	4630      	mov	r0, r6
 80064dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80064e0:	bfba      	itte	lt
 80064e2:	461c      	movlt	r4, r3
 80064e4:	2501      	movlt	r5, #1
 80064e6:	2500      	movge	r5, #0
 80064e8:	f7ff fcf6 	bl	8005ed8 <_Balloc>
 80064ec:	4602      	mov	r2, r0
 80064ee:	b918      	cbnz	r0, 80064f8 <__mdiff+0x60>
 80064f0:	4b31      	ldr	r3, [pc, #196]	@ (80065b8 <__mdiff+0x120>)
 80064f2:	f240 2145 	movw	r1, #581	@ 0x245
 80064f6:	e7e3      	b.n	80064c0 <__mdiff+0x28>
 80064f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80064fc:	6926      	ldr	r6, [r4, #16]
 80064fe:	60c5      	str	r5, [r0, #12]
 8006500:	f109 0310 	add.w	r3, r9, #16
 8006504:	f109 0514 	add.w	r5, r9, #20
 8006508:	f104 0e14 	add.w	lr, r4, #20
 800650c:	f100 0b14 	add.w	fp, r0, #20
 8006510:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006514:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	46d9      	mov	r9, fp
 800651c:	f04f 0c00 	mov.w	ip, #0
 8006520:	9b01      	ldr	r3, [sp, #4]
 8006522:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006526:	f853 af04 	ldr.w	sl, [r3, #4]!
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	fa1f f38a 	uxth.w	r3, sl
 8006530:	4619      	mov	r1, r3
 8006532:	b283      	uxth	r3, r0
 8006534:	1acb      	subs	r3, r1, r3
 8006536:	0c00      	lsrs	r0, r0, #16
 8006538:	4463      	add	r3, ip
 800653a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800653e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006542:	b29b      	uxth	r3, r3
 8006544:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006548:	4576      	cmp	r6, lr
 800654a:	f849 3b04 	str.w	r3, [r9], #4
 800654e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006552:	d8e5      	bhi.n	8006520 <__mdiff+0x88>
 8006554:	1b33      	subs	r3, r6, r4
 8006556:	3b15      	subs	r3, #21
 8006558:	f023 0303 	bic.w	r3, r3, #3
 800655c:	3415      	adds	r4, #21
 800655e:	3304      	adds	r3, #4
 8006560:	42a6      	cmp	r6, r4
 8006562:	bf38      	it	cc
 8006564:	2304      	movcc	r3, #4
 8006566:	441d      	add	r5, r3
 8006568:	445b      	add	r3, fp
 800656a:	461e      	mov	r6, r3
 800656c:	462c      	mov	r4, r5
 800656e:	4544      	cmp	r4, r8
 8006570:	d30e      	bcc.n	8006590 <__mdiff+0xf8>
 8006572:	f108 0103 	add.w	r1, r8, #3
 8006576:	1b49      	subs	r1, r1, r5
 8006578:	f021 0103 	bic.w	r1, r1, #3
 800657c:	3d03      	subs	r5, #3
 800657e:	45a8      	cmp	r8, r5
 8006580:	bf38      	it	cc
 8006582:	2100      	movcc	r1, #0
 8006584:	440b      	add	r3, r1
 8006586:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800658a:	b191      	cbz	r1, 80065b2 <__mdiff+0x11a>
 800658c:	6117      	str	r7, [r2, #16]
 800658e:	e79d      	b.n	80064cc <__mdiff+0x34>
 8006590:	f854 1b04 	ldr.w	r1, [r4], #4
 8006594:	46e6      	mov	lr, ip
 8006596:	0c08      	lsrs	r0, r1, #16
 8006598:	fa1c fc81 	uxtah	ip, ip, r1
 800659c:	4471      	add	r1, lr
 800659e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80065a2:	b289      	uxth	r1, r1
 80065a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80065a8:	f846 1b04 	str.w	r1, [r6], #4
 80065ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80065b0:	e7dd      	b.n	800656e <__mdiff+0xd6>
 80065b2:	3f01      	subs	r7, #1
 80065b4:	e7e7      	b.n	8006586 <__mdiff+0xee>
 80065b6:	bf00      	nop
 80065b8:	080087cd 	.word	0x080087cd
 80065bc:	080087de 	.word	0x080087de

080065c0 <__ulp>:
 80065c0:	b082      	sub	sp, #8
 80065c2:	ed8d 0b00 	vstr	d0, [sp]
 80065c6:	9a01      	ldr	r2, [sp, #4]
 80065c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006608 <__ulp+0x48>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	dc08      	bgt.n	80065e6 <__ulp+0x26>
 80065d4:	425b      	negs	r3, r3
 80065d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80065da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80065de:	da04      	bge.n	80065ea <__ulp+0x2a>
 80065e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80065e4:	4113      	asrs	r3, r2
 80065e6:	2200      	movs	r2, #0
 80065e8:	e008      	b.n	80065fc <__ulp+0x3c>
 80065ea:	f1a2 0314 	sub.w	r3, r2, #20
 80065ee:	2b1e      	cmp	r3, #30
 80065f0:	bfda      	itte	le
 80065f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80065f6:	40da      	lsrle	r2, r3
 80065f8:	2201      	movgt	r2, #1
 80065fa:	2300      	movs	r3, #0
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	ec41 0b10 	vmov	d0, r0, r1
 8006604:	b002      	add	sp, #8
 8006606:	4770      	bx	lr
 8006608:	7ff00000 	.word	0x7ff00000

0800660c <__b2d>:
 800660c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006610:	6906      	ldr	r6, [r0, #16]
 8006612:	f100 0814 	add.w	r8, r0, #20
 8006616:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800661a:	1f37      	subs	r7, r6, #4
 800661c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006620:	4610      	mov	r0, r2
 8006622:	f7ff fd4b 	bl	80060bc <__hi0bits>
 8006626:	f1c0 0320 	rsb	r3, r0, #32
 800662a:	280a      	cmp	r0, #10
 800662c:	600b      	str	r3, [r1, #0]
 800662e:	491b      	ldr	r1, [pc, #108]	@ (800669c <__b2d+0x90>)
 8006630:	dc15      	bgt.n	800665e <__b2d+0x52>
 8006632:	f1c0 0c0b 	rsb	ip, r0, #11
 8006636:	fa22 f30c 	lsr.w	r3, r2, ip
 800663a:	45b8      	cmp	r8, r7
 800663c:	ea43 0501 	orr.w	r5, r3, r1
 8006640:	bf34      	ite	cc
 8006642:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006646:	2300      	movcs	r3, #0
 8006648:	3015      	adds	r0, #21
 800664a:	fa02 f000 	lsl.w	r0, r2, r0
 800664e:	fa23 f30c 	lsr.w	r3, r3, ip
 8006652:	4303      	orrs	r3, r0
 8006654:	461c      	mov	r4, r3
 8006656:	ec45 4b10 	vmov	d0, r4, r5
 800665a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800665e:	45b8      	cmp	r8, r7
 8006660:	bf3a      	itte	cc
 8006662:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006666:	f1a6 0708 	subcc.w	r7, r6, #8
 800666a:	2300      	movcs	r3, #0
 800666c:	380b      	subs	r0, #11
 800666e:	d012      	beq.n	8006696 <__b2d+0x8a>
 8006670:	f1c0 0120 	rsb	r1, r0, #32
 8006674:	fa23 f401 	lsr.w	r4, r3, r1
 8006678:	4082      	lsls	r2, r0
 800667a:	4322      	orrs	r2, r4
 800667c:	4547      	cmp	r7, r8
 800667e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006682:	bf8c      	ite	hi
 8006684:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006688:	2200      	movls	r2, #0
 800668a:	4083      	lsls	r3, r0
 800668c:	40ca      	lsrs	r2, r1
 800668e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006692:	4313      	orrs	r3, r2
 8006694:	e7de      	b.n	8006654 <__b2d+0x48>
 8006696:	ea42 0501 	orr.w	r5, r2, r1
 800669a:	e7db      	b.n	8006654 <__b2d+0x48>
 800669c:	3ff00000 	.word	0x3ff00000

080066a0 <__d2b>:
 80066a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066a4:	460f      	mov	r7, r1
 80066a6:	2101      	movs	r1, #1
 80066a8:	ec59 8b10 	vmov	r8, r9, d0
 80066ac:	4616      	mov	r6, r2
 80066ae:	f7ff fc13 	bl	8005ed8 <_Balloc>
 80066b2:	4604      	mov	r4, r0
 80066b4:	b930      	cbnz	r0, 80066c4 <__d2b+0x24>
 80066b6:	4602      	mov	r2, r0
 80066b8:	4b23      	ldr	r3, [pc, #140]	@ (8006748 <__d2b+0xa8>)
 80066ba:	4824      	ldr	r0, [pc, #144]	@ (800674c <__d2b+0xac>)
 80066bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80066c0:	f001 f996 	bl	80079f0 <__assert_func>
 80066c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80066c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066cc:	b10d      	cbz	r5, 80066d2 <__d2b+0x32>
 80066ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066d2:	9301      	str	r3, [sp, #4]
 80066d4:	f1b8 0300 	subs.w	r3, r8, #0
 80066d8:	d023      	beq.n	8006722 <__d2b+0x82>
 80066da:	4668      	mov	r0, sp
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	f7ff fd0c 	bl	80060fa <__lo0bits>
 80066e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80066e6:	b1d0      	cbz	r0, 800671e <__d2b+0x7e>
 80066e8:	f1c0 0320 	rsb	r3, r0, #32
 80066ec:	fa02 f303 	lsl.w	r3, r2, r3
 80066f0:	430b      	orrs	r3, r1
 80066f2:	40c2      	lsrs	r2, r0
 80066f4:	6163      	str	r3, [r4, #20]
 80066f6:	9201      	str	r2, [sp, #4]
 80066f8:	9b01      	ldr	r3, [sp, #4]
 80066fa:	61a3      	str	r3, [r4, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bf0c      	ite	eq
 8006700:	2201      	moveq	r2, #1
 8006702:	2202      	movne	r2, #2
 8006704:	6122      	str	r2, [r4, #16]
 8006706:	b1a5      	cbz	r5, 8006732 <__d2b+0x92>
 8006708:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800670c:	4405      	add	r5, r0
 800670e:	603d      	str	r5, [r7, #0]
 8006710:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006714:	6030      	str	r0, [r6, #0]
 8006716:	4620      	mov	r0, r4
 8006718:	b003      	add	sp, #12
 800671a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800671e:	6161      	str	r1, [r4, #20]
 8006720:	e7ea      	b.n	80066f8 <__d2b+0x58>
 8006722:	a801      	add	r0, sp, #4
 8006724:	f7ff fce9 	bl	80060fa <__lo0bits>
 8006728:	9b01      	ldr	r3, [sp, #4]
 800672a:	6163      	str	r3, [r4, #20]
 800672c:	3020      	adds	r0, #32
 800672e:	2201      	movs	r2, #1
 8006730:	e7e8      	b.n	8006704 <__d2b+0x64>
 8006732:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006736:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800673a:	6038      	str	r0, [r7, #0]
 800673c:	6918      	ldr	r0, [r3, #16]
 800673e:	f7ff fcbd 	bl	80060bc <__hi0bits>
 8006742:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006746:	e7e5      	b.n	8006714 <__d2b+0x74>
 8006748:	080087cd 	.word	0x080087cd
 800674c:	080087de 	.word	0x080087de

08006750 <__ratio>:
 8006750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006754:	b085      	sub	sp, #20
 8006756:	e9cd 1000 	strd	r1, r0, [sp]
 800675a:	a902      	add	r1, sp, #8
 800675c:	f7ff ff56 	bl	800660c <__b2d>
 8006760:	9800      	ldr	r0, [sp, #0]
 8006762:	a903      	add	r1, sp, #12
 8006764:	ec55 4b10 	vmov	r4, r5, d0
 8006768:	f7ff ff50 	bl	800660c <__b2d>
 800676c:	9b01      	ldr	r3, [sp, #4]
 800676e:	6919      	ldr	r1, [r3, #16]
 8006770:	9b00      	ldr	r3, [sp, #0]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	1ac9      	subs	r1, r1, r3
 8006776:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800677a:	1a9b      	subs	r3, r3, r2
 800677c:	ec5b ab10 	vmov	sl, fp, d0
 8006780:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006784:	2b00      	cmp	r3, #0
 8006786:	bfce      	itee	gt
 8006788:	462a      	movgt	r2, r5
 800678a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800678e:	465a      	movle	r2, fp
 8006790:	462f      	mov	r7, r5
 8006792:	46d9      	mov	r9, fp
 8006794:	bfcc      	ite	gt
 8006796:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800679a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800679e:	464b      	mov	r3, r9
 80067a0:	4652      	mov	r2, sl
 80067a2:	4620      	mov	r0, r4
 80067a4:	4639      	mov	r1, r7
 80067a6:	f7fa f861 	bl	800086c <__aeabi_ddiv>
 80067aa:	ec41 0b10 	vmov	d0, r0, r1
 80067ae:	b005      	add	sp, #20
 80067b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067b4 <__copybits>:
 80067b4:	3901      	subs	r1, #1
 80067b6:	b570      	push	{r4, r5, r6, lr}
 80067b8:	1149      	asrs	r1, r1, #5
 80067ba:	6914      	ldr	r4, [r2, #16]
 80067bc:	3101      	adds	r1, #1
 80067be:	f102 0314 	add.w	r3, r2, #20
 80067c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80067c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80067ca:	1f05      	subs	r5, r0, #4
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	d30c      	bcc.n	80067ea <__copybits+0x36>
 80067d0:	1aa3      	subs	r3, r4, r2
 80067d2:	3b11      	subs	r3, #17
 80067d4:	f023 0303 	bic.w	r3, r3, #3
 80067d8:	3211      	adds	r2, #17
 80067da:	42a2      	cmp	r2, r4
 80067dc:	bf88      	it	hi
 80067de:	2300      	movhi	r3, #0
 80067e0:	4418      	add	r0, r3
 80067e2:	2300      	movs	r3, #0
 80067e4:	4288      	cmp	r0, r1
 80067e6:	d305      	bcc.n	80067f4 <__copybits+0x40>
 80067e8:	bd70      	pop	{r4, r5, r6, pc}
 80067ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80067ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80067f2:	e7eb      	b.n	80067cc <__copybits+0x18>
 80067f4:	f840 3b04 	str.w	r3, [r0], #4
 80067f8:	e7f4      	b.n	80067e4 <__copybits+0x30>

080067fa <__any_on>:
 80067fa:	f100 0214 	add.w	r2, r0, #20
 80067fe:	6900      	ldr	r0, [r0, #16]
 8006800:	114b      	asrs	r3, r1, #5
 8006802:	4298      	cmp	r0, r3
 8006804:	b510      	push	{r4, lr}
 8006806:	db11      	blt.n	800682c <__any_on+0x32>
 8006808:	dd0a      	ble.n	8006820 <__any_on+0x26>
 800680a:	f011 011f 	ands.w	r1, r1, #31
 800680e:	d007      	beq.n	8006820 <__any_on+0x26>
 8006810:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006814:	fa24 f001 	lsr.w	r0, r4, r1
 8006818:	fa00 f101 	lsl.w	r1, r0, r1
 800681c:	428c      	cmp	r4, r1
 800681e:	d10b      	bne.n	8006838 <__any_on+0x3e>
 8006820:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006824:	4293      	cmp	r3, r2
 8006826:	d803      	bhi.n	8006830 <__any_on+0x36>
 8006828:	2000      	movs	r0, #0
 800682a:	bd10      	pop	{r4, pc}
 800682c:	4603      	mov	r3, r0
 800682e:	e7f7      	b.n	8006820 <__any_on+0x26>
 8006830:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006834:	2900      	cmp	r1, #0
 8006836:	d0f5      	beq.n	8006824 <__any_on+0x2a>
 8006838:	2001      	movs	r0, #1
 800683a:	e7f6      	b.n	800682a <__any_on+0x30>

0800683c <sulp>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	4604      	mov	r4, r0
 8006840:	460d      	mov	r5, r1
 8006842:	ec45 4b10 	vmov	d0, r4, r5
 8006846:	4616      	mov	r6, r2
 8006848:	f7ff feba 	bl	80065c0 <__ulp>
 800684c:	ec51 0b10 	vmov	r0, r1, d0
 8006850:	b17e      	cbz	r6, 8006872 <sulp+0x36>
 8006852:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006856:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800685a:	2b00      	cmp	r3, #0
 800685c:	dd09      	ble.n	8006872 <sulp+0x36>
 800685e:	051b      	lsls	r3, r3, #20
 8006860:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006864:	2400      	movs	r4, #0
 8006866:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800686a:	4622      	mov	r2, r4
 800686c:	462b      	mov	r3, r5
 800686e:	f7f9 fed3 	bl	8000618 <__aeabi_dmul>
 8006872:	ec41 0b10 	vmov	d0, r0, r1
 8006876:	bd70      	pop	{r4, r5, r6, pc}

08006878 <_strtod_l>:
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	b09f      	sub	sp, #124	@ 0x7c
 800687e:	460c      	mov	r4, r1
 8006880:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006882:	2200      	movs	r2, #0
 8006884:	921a      	str	r2, [sp, #104]	@ 0x68
 8006886:	9005      	str	r0, [sp, #20]
 8006888:	f04f 0a00 	mov.w	sl, #0
 800688c:	f04f 0b00 	mov.w	fp, #0
 8006890:	460a      	mov	r2, r1
 8006892:	9219      	str	r2, [sp, #100]	@ 0x64
 8006894:	7811      	ldrb	r1, [r2, #0]
 8006896:	292b      	cmp	r1, #43	@ 0x2b
 8006898:	d04a      	beq.n	8006930 <_strtod_l+0xb8>
 800689a:	d838      	bhi.n	800690e <_strtod_l+0x96>
 800689c:	290d      	cmp	r1, #13
 800689e:	d832      	bhi.n	8006906 <_strtod_l+0x8e>
 80068a0:	2908      	cmp	r1, #8
 80068a2:	d832      	bhi.n	800690a <_strtod_l+0x92>
 80068a4:	2900      	cmp	r1, #0
 80068a6:	d03b      	beq.n	8006920 <_strtod_l+0xa8>
 80068a8:	2200      	movs	r2, #0
 80068aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80068ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80068ae:	782a      	ldrb	r2, [r5, #0]
 80068b0:	2a30      	cmp	r2, #48	@ 0x30
 80068b2:	f040 80b3 	bne.w	8006a1c <_strtod_l+0x1a4>
 80068b6:	786a      	ldrb	r2, [r5, #1]
 80068b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80068bc:	2a58      	cmp	r2, #88	@ 0x58
 80068be:	d16e      	bne.n	800699e <_strtod_l+0x126>
 80068c0:	9302      	str	r3, [sp, #8]
 80068c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	4a8e      	ldr	r2, [pc, #568]	@ (8006b04 <_strtod_l+0x28c>)
 80068cc:	9805      	ldr	r0, [sp, #20]
 80068ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80068d0:	a919      	add	r1, sp, #100	@ 0x64
 80068d2:	f001 f927 	bl	8007b24 <__gethex>
 80068d6:	f010 060f 	ands.w	r6, r0, #15
 80068da:	4604      	mov	r4, r0
 80068dc:	d005      	beq.n	80068ea <_strtod_l+0x72>
 80068de:	2e06      	cmp	r6, #6
 80068e0:	d128      	bne.n	8006934 <_strtod_l+0xbc>
 80068e2:	3501      	adds	r5, #1
 80068e4:	2300      	movs	r3, #0
 80068e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80068e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f040 858e 	bne.w	800740e <_strtod_l+0xb96>
 80068f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068f4:	b1cb      	cbz	r3, 800692a <_strtod_l+0xb2>
 80068f6:	4652      	mov	r2, sl
 80068f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80068fc:	ec43 2b10 	vmov	d0, r2, r3
 8006900:	b01f      	add	sp, #124	@ 0x7c
 8006902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006906:	2920      	cmp	r1, #32
 8006908:	d1ce      	bne.n	80068a8 <_strtod_l+0x30>
 800690a:	3201      	adds	r2, #1
 800690c:	e7c1      	b.n	8006892 <_strtod_l+0x1a>
 800690e:	292d      	cmp	r1, #45	@ 0x2d
 8006910:	d1ca      	bne.n	80068a8 <_strtod_l+0x30>
 8006912:	2101      	movs	r1, #1
 8006914:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006916:	1c51      	adds	r1, r2, #1
 8006918:	9119      	str	r1, [sp, #100]	@ 0x64
 800691a:	7852      	ldrb	r2, [r2, #1]
 800691c:	2a00      	cmp	r2, #0
 800691e:	d1c5      	bne.n	80068ac <_strtod_l+0x34>
 8006920:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006922:	9419      	str	r4, [sp, #100]	@ 0x64
 8006924:	2b00      	cmp	r3, #0
 8006926:	f040 8570 	bne.w	800740a <_strtod_l+0xb92>
 800692a:	4652      	mov	r2, sl
 800692c:	465b      	mov	r3, fp
 800692e:	e7e5      	b.n	80068fc <_strtod_l+0x84>
 8006930:	2100      	movs	r1, #0
 8006932:	e7ef      	b.n	8006914 <_strtod_l+0x9c>
 8006934:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006936:	b13a      	cbz	r2, 8006948 <_strtod_l+0xd0>
 8006938:	2135      	movs	r1, #53	@ 0x35
 800693a:	a81c      	add	r0, sp, #112	@ 0x70
 800693c:	f7ff ff3a 	bl	80067b4 <__copybits>
 8006940:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006942:	9805      	ldr	r0, [sp, #20]
 8006944:	f7ff fb08 	bl	8005f58 <_Bfree>
 8006948:	3e01      	subs	r6, #1
 800694a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800694c:	2e04      	cmp	r6, #4
 800694e:	d806      	bhi.n	800695e <_strtod_l+0xe6>
 8006950:	e8df f006 	tbb	[pc, r6]
 8006954:	201d0314 	.word	0x201d0314
 8006958:	14          	.byte	0x14
 8006959:	00          	.byte	0x00
 800695a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800695e:	05e1      	lsls	r1, r4, #23
 8006960:	bf48      	it	mi
 8006962:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006966:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800696a:	0d1b      	lsrs	r3, r3, #20
 800696c:	051b      	lsls	r3, r3, #20
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1bb      	bne.n	80068ea <_strtod_l+0x72>
 8006972:	f7fe fb2f 	bl	8004fd4 <__errno>
 8006976:	2322      	movs	r3, #34	@ 0x22
 8006978:	6003      	str	r3, [r0, #0]
 800697a:	e7b6      	b.n	80068ea <_strtod_l+0x72>
 800697c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006980:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006984:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006988:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800698c:	e7e7      	b.n	800695e <_strtod_l+0xe6>
 800698e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006b0c <_strtod_l+0x294>
 8006992:	e7e4      	b.n	800695e <_strtod_l+0xe6>
 8006994:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006998:	f04f 3aff 	mov.w	sl, #4294967295
 800699c:	e7df      	b.n	800695e <_strtod_l+0xe6>
 800699e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	2b30      	cmp	r3, #48	@ 0x30
 80069a8:	d0f9      	beq.n	800699e <_strtod_l+0x126>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d09d      	beq.n	80068ea <_strtod_l+0x72>
 80069ae:	2301      	movs	r3, #1
 80069b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80069b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80069b6:	2300      	movs	r3, #0
 80069b8:	9308      	str	r3, [sp, #32]
 80069ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80069bc:	461f      	mov	r7, r3
 80069be:	220a      	movs	r2, #10
 80069c0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80069c2:	7805      	ldrb	r5, [r0, #0]
 80069c4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80069c8:	b2d9      	uxtb	r1, r3
 80069ca:	2909      	cmp	r1, #9
 80069cc:	d928      	bls.n	8006a20 <_strtod_l+0x1a8>
 80069ce:	494e      	ldr	r1, [pc, #312]	@ (8006b08 <_strtod_l+0x290>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	f000 ffd5 	bl	8007980 <strncmp>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d032      	beq.n	8006a40 <_strtod_l+0x1c8>
 80069da:	2000      	movs	r0, #0
 80069dc:	462a      	mov	r2, r5
 80069de:	4681      	mov	r9, r0
 80069e0:	463d      	mov	r5, r7
 80069e2:	4603      	mov	r3, r0
 80069e4:	2a65      	cmp	r2, #101	@ 0x65
 80069e6:	d001      	beq.n	80069ec <_strtod_l+0x174>
 80069e8:	2a45      	cmp	r2, #69	@ 0x45
 80069ea:	d114      	bne.n	8006a16 <_strtod_l+0x19e>
 80069ec:	b91d      	cbnz	r5, 80069f6 <_strtod_l+0x17e>
 80069ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069f0:	4302      	orrs	r2, r0
 80069f2:	d095      	beq.n	8006920 <_strtod_l+0xa8>
 80069f4:	2500      	movs	r5, #0
 80069f6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80069f8:	1c62      	adds	r2, r4, #1
 80069fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80069fc:	7862      	ldrb	r2, [r4, #1]
 80069fe:	2a2b      	cmp	r2, #43	@ 0x2b
 8006a00:	d077      	beq.n	8006af2 <_strtod_l+0x27a>
 8006a02:	2a2d      	cmp	r2, #45	@ 0x2d
 8006a04:	d07b      	beq.n	8006afe <_strtod_l+0x286>
 8006a06:	f04f 0c00 	mov.w	ip, #0
 8006a0a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006a0e:	2909      	cmp	r1, #9
 8006a10:	f240 8082 	bls.w	8006b18 <_strtod_l+0x2a0>
 8006a14:	9419      	str	r4, [sp, #100]	@ 0x64
 8006a16:	f04f 0800 	mov.w	r8, #0
 8006a1a:	e0a2      	b.n	8006b62 <_strtod_l+0x2ea>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e7c7      	b.n	80069b0 <_strtod_l+0x138>
 8006a20:	2f08      	cmp	r7, #8
 8006a22:	bfd5      	itete	le
 8006a24:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006a26:	9908      	ldrgt	r1, [sp, #32]
 8006a28:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a2c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006a30:	f100 0001 	add.w	r0, r0, #1
 8006a34:	bfd4      	ite	le
 8006a36:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006a38:	9308      	strgt	r3, [sp, #32]
 8006a3a:	3701      	adds	r7, #1
 8006a3c:	9019      	str	r0, [sp, #100]	@ 0x64
 8006a3e:	e7bf      	b.n	80069c0 <_strtod_l+0x148>
 8006a40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a46:	785a      	ldrb	r2, [r3, #1]
 8006a48:	b37f      	cbz	r7, 8006aaa <_strtod_l+0x232>
 8006a4a:	4681      	mov	r9, r0
 8006a4c:	463d      	mov	r5, r7
 8006a4e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006a52:	2b09      	cmp	r3, #9
 8006a54:	d912      	bls.n	8006a7c <_strtod_l+0x204>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e7c4      	b.n	80069e4 <_strtod_l+0x16c>
 8006a5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a60:	785a      	ldrb	r2, [r3, #1]
 8006a62:	3001      	adds	r0, #1
 8006a64:	2a30      	cmp	r2, #48	@ 0x30
 8006a66:	d0f8      	beq.n	8006a5a <_strtod_l+0x1e2>
 8006a68:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	f200 84d3 	bhi.w	8007418 <_strtod_l+0xba0>
 8006a72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a74:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a76:	4681      	mov	r9, r0
 8006a78:	2000      	movs	r0, #0
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	3a30      	subs	r2, #48	@ 0x30
 8006a7e:	f100 0301 	add.w	r3, r0, #1
 8006a82:	d02a      	beq.n	8006ada <_strtod_l+0x262>
 8006a84:	4499      	add	r9, r3
 8006a86:	eb00 0c05 	add.w	ip, r0, r5
 8006a8a:	462b      	mov	r3, r5
 8006a8c:	210a      	movs	r1, #10
 8006a8e:	4563      	cmp	r3, ip
 8006a90:	d10d      	bne.n	8006aae <_strtod_l+0x236>
 8006a92:	1c69      	adds	r1, r5, #1
 8006a94:	4401      	add	r1, r0
 8006a96:	4428      	add	r0, r5
 8006a98:	2808      	cmp	r0, #8
 8006a9a:	dc16      	bgt.n	8006aca <_strtod_l+0x252>
 8006a9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006a9e:	230a      	movs	r3, #10
 8006aa0:	fb03 2300 	mla	r3, r3, r0, r2
 8006aa4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	e018      	b.n	8006adc <_strtod_l+0x264>
 8006aaa:	4638      	mov	r0, r7
 8006aac:	e7da      	b.n	8006a64 <_strtod_l+0x1ec>
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	f103 0301 	add.w	r3, r3, #1
 8006ab4:	dc03      	bgt.n	8006abe <_strtod_l+0x246>
 8006ab6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006ab8:	434e      	muls	r6, r1
 8006aba:	960a      	str	r6, [sp, #40]	@ 0x28
 8006abc:	e7e7      	b.n	8006a8e <_strtod_l+0x216>
 8006abe:	2b10      	cmp	r3, #16
 8006ac0:	bfde      	ittt	le
 8006ac2:	9e08      	ldrle	r6, [sp, #32]
 8006ac4:	434e      	mulle	r6, r1
 8006ac6:	9608      	strle	r6, [sp, #32]
 8006ac8:	e7e1      	b.n	8006a8e <_strtod_l+0x216>
 8006aca:	280f      	cmp	r0, #15
 8006acc:	dceb      	bgt.n	8006aa6 <_strtod_l+0x22e>
 8006ace:	9808      	ldr	r0, [sp, #32]
 8006ad0:	230a      	movs	r3, #10
 8006ad2:	fb03 2300 	mla	r3, r3, r0, r2
 8006ad6:	9308      	str	r3, [sp, #32]
 8006ad8:	e7e5      	b.n	8006aa6 <_strtod_l+0x22e>
 8006ada:	4629      	mov	r1, r5
 8006adc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006ade:	1c50      	adds	r0, r2, #1
 8006ae0:	9019      	str	r0, [sp, #100]	@ 0x64
 8006ae2:	7852      	ldrb	r2, [r2, #1]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	460d      	mov	r5, r1
 8006ae8:	e7b1      	b.n	8006a4e <_strtod_l+0x1d6>
 8006aea:	f04f 0900 	mov.w	r9, #0
 8006aee:	2301      	movs	r3, #1
 8006af0:	e77d      	b.n	80069ee <_strtod_l+0x176>
 8006af2:	f04f 0c00 	mov.w	ip, #0
 8006af6:	1ca2      	adds	r2, r4, #2
 8006af8:	9219      	str	r2, [sp, #100]	@ 0x64
 8006afa:	78a2      	ldrb	r2, [r4, #2]
 8006afc:	e785      	b.n	8006a0a <_strtod_l+0x192>
 8006afe:	f04f 0c01 	mov.w	ip, #1
 8006b02:	e7f8      	b.n	8006af6 <_strtod_l+0x27e>
 8006b04:	08008950 	.word	0x08008950
 8006b08:	08008938 	.word	0x08008938
 8006b0c:	7ff00000 	.word	0x7ff00000
 8006b10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b12:	1c51      	adds	r1, r2, #1
 8006b14:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b16:	7852      	ldrb	r2, [r2, #1]
 8006b18:	2a30      	cmp	r2, #48	@ 0x30
 8006b1a:	d0f9      	beq.n	8006b10 <_strtod_l+0x298>
 8006b1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006b20:	2908      	cmp	r1, #8
 8006b22:	f63f af78 	bhi.w	8006a16 <_strtod_l+0x19e>
 8006b26:	3a30      	subs	r2, #48	@ 0x30
 8006b28:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006b2e:	f04f 080a 	mov.w	r8, #10
 8006b32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b34:	1c56      	adds	r6, r2, #1
 8006b36:	9619      	str	r6, [sp, #100]	@ 0x64
 8006b38:	7852      	ldrb	r2, [r2, #1]
 8006b3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006b3e:	f1be 0f09 	cmp.w	lr, #9
 8006b42:	d939      	bls.n	8006bb8 <_strtod_l+0x340>
 8006b44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006b46:	1a76      	subs	r6, r6, r1
 8006b48:	2e08      	cmp	r6, #8
 8006b4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006b4e:	dc03      	bgt.n	8006b58 <_strtod_l+0x2e0>
 8006b50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006b52:	4588      	cmp	r8, r1
 8006b54:	bfa8      	it	ge
 8006b56:	4688      	movge	r8, r1
 8006b58:	f1bc 0f00 	cmp.w	ip, #0
 8006b5c:	d001      	beq.n	8006b62 <_strtod_l+0x2ea>
 8006b5e:	f1c8 0800 	rsb	r8, r8, #0
 8006b62:	2d00      	cmp	r5, #0
 8006b64:	d14e      	bne.n	8006c04 <_strtod_l+0x38c>
 8006b66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b68:	4308      	orrs	r0, r1
 8006b6a:	f47f aebe 	bne.w	80068ea <_strtod_l+0x72>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f47f aed6 	bne.w	8006920 <_strtod_l+0xa8>
 8006b74:	2a69      	cmp	r2, #105	@ 0x69
 8006b76:	d028      	beq.n	8006bca <_strtod_l+0x352>
 8006b78:	dc25      	bgt.n	8006bc6 <_strtod_l+0x34e>
 8006b7a:	2a49      	cmp	r2, #73	@ 0x49
 8006b7c:	d025      	beq.n	8006bca <_strtod_l+0x352>
 8006b7e:	2a4e      	cmp	r2, #78	@ 0x4e
 8006b80:	f47f aece 	bne.w	8006920 <_strtod_l+0xa8>
 8006b84:	499b      	ldr	r1, [pc, #620]	@ (8006df4 <_strtod_l+0x57c>)
 8006b86:	a819      	add	r0, sp, #100	@ 0x64
 8006b88:	f001 f9ee 	bl	8007f68 <__match>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	f43f aec7 	beq.w	8006920 <_strtod_l+0xa8>
 8006b92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b28      	cmp	r3, #40	@ 0x28
 8006b98:	d12e      	bne.n	8006bf8 <_strtod_l+0x380>
 8006b9a:	4997      	ldr	r1, [pc, #604]	@ (8006df8 <_strtod_l+0x580>)
 8006b9c:	aa1c      	add	r2, sp, #112	@ 0x70
 8006b9e:	a819      	add	r0, sp, #100	@ 0x64
 8006ba0:	f001 f9f6 	bl	8007f90 <__hexnan>
 8006ba4:	2805      	cmp	r0, #5
 8006ba6:	d127      	bne.n	8006bf8 <_strtod_l+0x380>
 8006ba8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006baa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006bae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006bb2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006bb6:	e698      	b.n	80068ea <_strtod_l+0x72>
 8006bb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006bba:	fb08 2101 	mla	r1, r8, r1, r2
 8006bbe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006bc2:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bc4:	e7b5      	b.n	8006b32 <_strtod_l+0x2ba>
 8006bc6:	2a6e      	cmp	r2, #110	@ 0x6e
 8006bc8:	e7da      	b.n	8006b80 <_strtod_l+0x308>
 8006bca:	498c      	ldr	r1, [pc, #560]	@ (8006dfc <_strtod_l+0x584>)
 8006bcc:	a819      	add	r0, sp, #100	@ 0x64
 8006bce:	f001 f9cb 	bl	8007f68 <__match>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	f43f aea4 	beq.w	8006920 <_strtod_l+0xa8>
 8006bd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006bda:	4989      	ldr	r1, [pc, #548]	@ (8006e00 <_strtod_l+0x588>)
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	a819      	add	r0, sp, #100	@ 0x64
 8006be0:	9319      	str	r3, [sp, #100]	@ 0x64
 8006be2:	f001 f9c1 	bl	8007f68 <__match>
 8006be6:	b910      	cbnz	r0, 8006bee <_strtod_l+0x376>
 8006be8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006bea:	3301      	adds	r3, #1
 8006bec:	9319      	str	r3, [sp, #100]	@ 0x64
 8006bee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006e10 <_strtod_l+0x598>
 8006bf2:	f04f 0a00 	mov.w	sl, #0
 8006bf6:	e678      	b.n	80068ea <_strtod_l+0x72>
 8006bf8:	4882      	ldr	r0, [pc, #520]	@ (8006e04 <_strtod_l+0x58c>)
 8006bfa:	f000 fef1 	bl	80079e0 <nan>
 8006bfe:	ec5b ab10 	vmov	sl, fp, d0
 8006c02:	e672      	b.n	80068ea <_strtod_l+0x72>
 8006c04:	eba8 0309 	sub.w	r3, r8, r9
 8006c08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c0c:	2f00      	cmp	r7, #0
 8006c0e:	bf08      	it	eq
 8006c10:	462f      	moveq	r7, r5
 8006c12:	2d10      	cmp	r5, #16
 8006c14:	462c      	mov	r4, r5
 8006c16:	bfa8      	it	ge
 8006c18:	2410      	movge	r4, #16
 8006c1a:	f7f9 fc83 	bl	8000524 <__aeabi_ui2d>
 8006c1e:	2d09      	cmp	r5, #9
 8006c20:	4682      	mov	sl, r0
 8006c22:	468b      	mov	fp, r1
 8006c24:	dc13      	bgt.n	8006c4e <_strtod_l+0x3d6>
 8006c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f43f ae5e 	beq.w	80068ea <_strtod_l+0x72>
 8006c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c30:	dd78      	ble.n	8006d24 <_strtod_l+0x4ac>
 8006c32:	2b16      	cmp	r3, #22
 8006c34:	dc5f      	bgt.n	8006cf6 <_strtod_l+0x47e>
 8006c36:	4974      	ldr	r1, [pc, #464]	@ (8006e08 <_strtod_l+0x590>)
 8006c38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c40:	4652      	mov	r2, sl
 8006c42:	465b      	mov	r3, fp
 8006c44:	f7f9 fce8 	bl	8000618 <__aeabi_dmul>
 8006c48:	4682      	mov	sl, r0
 8006c4a:	468b      	mov	fp, r1
 8006c4c:	e64d      	b.n	80068ea <_strtod_l+0x72>
 8006c4e:	4b6e      	ldr	r3, [pc, #440]	@ (8006e08 <_strtod_l+0x590>)
 8006c50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006c58:	f7f9 fcde 	bl	8000618 <__aeabi_dmul>
 8006c5c:	4682      	mov	sl, r0
 8006c5e:	9808      	ldr	r0, [sp, #32]
 8006c60:	468b      	mov	fp, r1
 8006c62:	f7f9 fc5f 	bl	8000524 <__aeabi_ui2d>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4650      	mov	r0, sl
 8006c6c:	4659      	mov	r1, fp
 8006c6e:	f7f9 fb1d 	bl	80002ac <__adddf3>
 8006c72:	2d0f      	cmp	r5, #15
 8006c74:	4682      	mov	sl, r0
 8006c76:	468b      	mov	fp, r1
 8006c78:	ddd5      	ble.n	8006c26 <_strtod_l+0x3ae>
 8006c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c7c:	1b2c      	subs	r4, r5, r4
 8006c7e:	441c      	add	r4, r3
 8006c80:	2c00      	cmp	r4, #0
 8006c82:	f340 8096 	ble.w	8006db2 <_strtod_l+0x53a>
 8006c86:	f014 030f 	ands.w	r3, r4, #15
 8006c8a:	d00a      	beq.n	8006ca2 <_strtod_l+0x42a>
 8006c8c:	495e      	ldr	r1, [pc, #376]	@ (8006e08 <_strtod_l+0x590>)
 8006c8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c92:	4652      	mov	r2, sl
 8006c94:	465b      	mov	r3, fp
 8006c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c9a:	f7f9 fcbd 	bl	8000618 <__aeabi_dmul>
 8006c9e:	4682      	mov	sl, r0
 8006ca0:	468b      	mov	fp, r1
 8006ca2:	f034 040f 	bics.w	r4, r4, #15
 8006ca6:	d073      	beq.n	8006d90 <_strtod_l+0x518>
 8006ca8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006cac:	dd48      	ble.n	8006d40 <_strtod_l+0x4c8>
 8006cae:	2400      	movs	r4, #0
 8006cb0:	46a0      	mov	r8, r4
 8006cb2:	940a      	str	r4, [sp, #40]	@ 0x28
 8006cb4:	46a1      	mov	r9, r4
 8006cb6:	9a05      	ldr	r2, [sp, #20]
 8006cb8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006e10 <_strtod_l+0x598>
 8006cbc:	2322      	movs	r3, #34	@ 0x22
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	f04f 0a00 	mov.w	sl, #0
 8006cc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f43f ae0f 	beq.w	80068ea <_strtod_l+0x72>
 8006ccc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cce:	9805      	ldr	r0, [sp, #20]
 8006cd0:	f7ff f942 	bl	8005f58 <_Bfree>
 8006cd4:	9805      	ldr	r0, [sp, #20]
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	f7ff f93e 	bl	8005f58 <_Bfree>
 8006cdc:	9805      	ldr	r0, [sp, #20]
 8006cde:	4641      	mov	r1, r8
 8006ce0:	f7ff f93a 	bl	8005f58 <_Bfree>
 8006ce4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ce6:	9805      	ldr	r0, [sp, #20]
 8006ce8:	f7ff f936 	bl	8005f58 <_Bfree>
 8006cec:	9805      	ldr	r0, [sp, #20]
 8006cee:	4621      	mov	r1, r4
 8006cf0:	f7ff f932 	bl	8005f58 <_Bfree>
 8006cf4:	e5f9      	b.n	80068ea <_strtod_l+0x72>
 8006cf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cf8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	dbbc      	blt.n	8006c7a <_strtod_l+0x402>
 8006d00:	4c41      	ldr	r4, [pc, #260]	@ (8006e08 <_strtod_l+0x590>)
 8006d02:	f1c5 050f 	rsb	r5, r5, #15
 8006d06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006d0a:	4652      	mov	r2, sl
 8006d0c:	465b      	mov	r3, fp
 8006d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d12:	f7f9 fc81 	bl	8000618 <__aeabi_dmul>
 8006d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d18:	1b5d      	subs	r5, r3, r5
 8006d1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006d1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d22:	e78f      	b.n	8006c44 <_strtod_l+0x3cc>
 8006d24:	3316      	adds	r3, #22
 8006d26:	dba8      	blt.n	8006c7a <_strtod_l+0x402>
 8006d28:	4b37      	ldr	r3, [pc, #220]	@ (8006e08 <_strtod_l+0x590>)
 8006d2a:	eba9 0808 	sub.w	r8, r9, r8
 8006d2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006d32:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006d36:	4650      	mov	r0, sl
 8006d38:	4659      	mov	r1, fp
 8006d3a:	f7f9 fd97 	bl	800086c <__aeabi_ddiv>
 8006d3e:	e783      	b.n	8006c48 <_strtod_l+0x3d0>
 8006d40:	4b32      	ldr	r3, [pc, #200]	@ (8006e0c <_strtod_l+0x594>)
 8006d42:	9308      	str	r3, [sp, #32]
 8006d44:	2300      	movs	r3, #0
 8006d46:	1124      	asrs	r4, r4, #4
 8006d48:	4650      	mov	r0, sl
 8006d4a:	4659      	mov	r1, fp
 8006d4c:	461e      	mov	r6, r3
 8006d4e:	2c01      	cmp	r4, #1
 8006d50:	dc21      	bgt.n	8006d96 <_strtod_l+0x51e>
 8006d52:	b10b      	cbz	r3, 8006d58 <_strtod_l+0x4e0>
 8006d54:	4682      	mov	sl, r0
 8006d56:	468b      	mov	fp, r1
 8006d58:	492c      	ldr	r1, [pc, #176]	@ (8006e0c <_strtod_l+0x594>)
 8006d5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006d5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006d62:	4652      	mov	r2, sl
 8006d64:	465b      	mov	r3, fp
 8006d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d6a:	f7f9 fc55 	bl	8000618 <__aeabi_dmul>
 8006d6e:	4b28      	ldr	r3, [pc, #160]	@ (8006e10 <_strtod_l+0x598>)
 8006d70:	460a      	mov	r2, r1
 8006d72:	400b      	ands	r3, r1
 8006d74:	4927      	ldr	r1, [pc, #156]	@ (8006e14 <_strtod_l+0x59c>)
 8006d76:	428b      	cmp	r3, r1
 8006d78:	4682      	mov	sl, r0
 8006d7a:	d898      	bhi.n	8006cae <_strtod_l+0x436>
 8006d7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006d80:	428b      	cmp	r3, r1
 8006d82:	bf86      	itte	hi
 8006d84:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006e18 <_strtod_l+0x5a0>
 8006d88:	f04f 3aff 	movhi.w	sl, #4294967295
 8006d8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006d90:	2300      	movs	r3, #0
 8006d92:	9308      	str	r3, [sp, #32]
 8006d94:	e07a      	b.n	8006e8c <_strtod_l+0x614>
 8006d96:	07e2      	lsls	r2, r4, #31
 8006d98:	d505      	bpl.n	8006da6 <_strtod_l+0x52e>
 8006d9a:	9b08      	ldr	r3, [sp, #32]
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	f7f9 fc3a 	bl	8000618 <__aeabi_dmul>
 8006da4:	2301      	movs	r3, #1
 8006da6:	9a08      	ldr	r2, [sp, #32]
 8006da8:	3208      	adds	r2, #8
 8006daa:	3601      	adds	r6, #1
 8006dac:	1064      	asrs	r4, r4, #1
 8006dae:	9208      	str	r2, [sp, #32]
 8006db0:	e7cd      	b.n	8006d4e <_strtod_l+0x4d6>
 8006db2:	d0ed      	beq.n	8006d90 <_strtod_l+0x518>
 8006db4:	4264      	negs	r4, r4
 8006db6:	f014 020f 	ands.w	r2, r4, #15
 8006dba:	d00a      	beq.n	8006dd2 <_strtod_l+0x55a>
 8006dbc:	4b12      	ldr	r3, [pc, #72]	@ (8006e08 <_strtod_l+0x590>)
 8006dbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dc2:	4650      	mov	r0, sl
 8006dc4:	4659      	mov	r1, fp
 8006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dca:	f7f9 fd4f 	bl	800086c <__aeabi_ddiv>
 8006dce:	4682      	mov	sl, r0
 8006dd0:	468b      	mov	fp, r1
 8006dd2:	1124      	asrs	r4, r4, #4
 8006dd4:	d0dc      	beq.n	8006d90 <_strtod_l+0x518>
 8006dd6:	2c1f      	cmp	r4, #31
 8006dd8:	dd20      	ble.n	8006e1c <_strtod_l+0x5a4>
 8006dda:	2400      	movs	r4, #0
 8006ddc:	46a0      	mov	r8, r4
 8006dde:	940a      	str	r4, [sp, #40]	@ 0x28
 8006de0:	46a1      	mov	r9, r4
 8006de2:	9a05      	ldr	r2, [sp, #20]
 8006de4:	2322      	movs	r3, #34	@ 0x22
 8006de6:	f04f 0a00 	mov.w	sl, #0
 8006dea:	f04f 0b00 	mov.w	fp, #0
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	e768      	b.n	8006cc4 <_strtod_l+0x44c>
 8006df2:	bf00      	nop
 8006df4:	08008725 	.word	0x08008725
 8006df8:	0800893c 	.word	0x0800893c
 8006dfc:	0800871d 	.word	0x0800871d
 8006e00:	08008754 	.word	0x08008754
 8006e04:	08008ae5 	.word	0x08008ae5
 8006e08:	08008870 	.word	0x08008870
 8006e0c:	08008848 	.word	0x08008848
 8006e10:	7ff00000 	.word	0x7ff00000
 8006e14:	7ca00000 	.word	0x7ca00000
 8006e18:	7fefffff 	.word	0x7fefffff
 8006e1c:	f014 0310 	ands.w	r3, r4, #16
 8006e20:	bf18      	it	ne
 8006e22:	236a      	movne	r3, #106	@ 0x6a
 8006e24:	4ea9      	ldr	r6, [pc, #676]	@ (80070cc <_strtod_l+0x854>)
 8006e26:	9308      	str	r3, [sp, #32]
 8006e28:	4650      	mov	r0, sl
 8006e2a:	4659      	mov	r1, fp
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	07e2      	lsls	r2, r4, #31
 8006e30:	d504      	bpl.n	8006e3c <_strtod_l+0x5c4>
 8006e32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e36:	f7f9 fbef 	bl	8000618 <__aeabi_dmul>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	1064      	asrs	r4, r4, #1
 8006e3e:	f106 0608 	add.w	r6, r6, #8
 8006e42:	d1f4      	bne.n	8006e2e <_strtod_l+0x5b6>
 8006e44:	b10b      	cbz	r3, 8006e4a <_strtod_l+0x5d2>
 8006e46:	4682      	mov	sl, r0
 8006e48:	468b      	mov	fp, r1
 8006e4a:	9b08      	ldr	r3, [sp, #32]
 8006e4c:	b1b3      	cbz	r3, 8006e7c <_strtod_l+0x604>
 8006e4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006e52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	4659      	mov	r1, fp
 8006e5a:	dd0f      	ble.n	8006e7c <_strtod_l+0x604>
 8006e5c:	2b1f      	cmp	r3, #31
 8006e5e:	dd55      	ble.n	8006f0c <_strtod_l+0x694>
 8006e60:	2b34      	cmp	r3, #52	@ 0x34
 8006e62:	bfde      	ittt	le
 8006e64:	f04f 33ff 	movle.w	r3, #4294967295
 8006e68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006e6c:	4093      	lslle	r3, r2
 8006e6e:	f04f 0a00 	mov.w	sl, #0
 8006e72:	bfcc      	ite	gt
 8006e74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006e78:	ea03 0b01 	andle.w	fp, r3, r1
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2300      	movs	r3, #0
 8006e80:	4650      	mov	r0, sl
 8006e82:	4659      	mov	r1, fp
 8006e84:	f7f9 fe30 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d1a6      	bne.n	8006dda <_strtod_l+0x562>
 8006e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006e92:	9805      	ldr	r0, [sp, #20]
 8006e94:	462b      	mov	r3, r5
 8006e96:	463a      	mov	r2, r7
 8006e98:	f7ff f8c6 	bl	8006028 <__s2b>
 8006e9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	f43f af05 	beq.w	8006cae <_strtod_l+0x436>
 8006ea4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ea6:	2a00      	cmp	r2, #0
 8006ea8:	eba9 0308 	sub.w	r3, r9, r8
 8006eac:	bfa8      	it	ge
 8006eae:	2300      	movge	r3, #0
 8006eb0:	9312      	str	r3, [sp, #72]	@ 0x48
 8006eb2:	2400      	movs	r4, #0
 8006eb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006eb8:	9316      	str	r3, [sp, #88]	@ 0x58
 8006eba:	46a0      	mov	r8, r4
 8006ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ebe:	9805      	ldr	r0, [sp, #20]
 8006ec0:	6859      	ldr	r1, [r3, #4]
 8006ec2:	f7ff f809 	bl	8005ed8 <_Balloc>
 8006ec6:	4681      	mov	r9, r0
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	f43f aef4 	beq.w	8006cb6 <_strtod_l+0x43e>
 8006ece:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ed0:	691a      	ldr	r2, [r3, #16]
 8006ed2:	3202      	adds	r2, #2
 8006ed4:	f103 010c 	add.w	r1, r3, #12
 8006ed8:	0092      	lsls	r2, r2, #2
 8006eda:	300c      	adds	r0, #12
 8006edc:	f000 fd72 	bl	80079c4 <memcpy>
 8006ee0:	ec4b ab10 	vmov	d0, sl, fp
 8006ee4:	9805      	ldr	r0, [sp, #20]
 8006ee6:	aa1c      	add	r2, sp, #112	@ 0x70
 8006ee8:	a91b      	add	r1, sp, #108	@ 0x6c
 8006eea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006eee:	f7ff fbd7 	bl	80066a0 <__d2b>
 8006ef2:	901a      	str	r0, [sp, #104]	@ 0x68
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	f43f aede 	beq.w	8006cb6 <_strtod_l+0x43e>
 8006efa:	9805      	ldr	r0, [sp, #20]
 8006efc:	2101      	movs	r1, #1
 8006efe:	f7ff f929 	bl	8006154 <__i2b>
 8006f02:	4680      	mov	r8, r0
 8006f04:	b948      	cbnz	r0, 8006f1a <_strtod_l+0x6a2>
 8006f06:	f04f 0800 	mov.w	r8, #0
 8006f0a:	e6d4      	b.n	8006cb6 <_strtod_l+0x43e>
 8006f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f10:	fa02 f303 	lsl.w	r3, r2, r3
 8006f14:	ea03 0a0a 	and.w	sl, r3, sl
 8006f18:	e7b0      	b.n	8006e7c <_strtod_l+0x604>
 8006f1a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006f1c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006f1e:	2d00      	cmp	r5, #0
 8006f20:	bfab      	itete	ge
 8006f22:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006f24:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006f26:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006f28:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006f2a:	bfac      	ite	ge
 8006f2c:	18ef      	addge	r7, r5, r3
 8006f2e:	1b5e      	sublt	r6, r3, r5
 8006f30:	9b08      	ldr	r3, [sp, #32]
 8006f32:	1aed      	subs	r5, r5, r3
 8006f34:	4415      	add	r5, r2
 8006f36:	4b66      	ldr	r3, [pc, #408]	@ (80070d0 <_strtod_l+0x858>)
 8006f38:	3d01      	subs	r5, #1
 8006f3a:	429d      	cmp	r5, r3
 8006f3c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006f40:	da50      	bge.n	8006fe4 <_strtod_l+0x76c>
 8006f42:	1b5b      	subs	r3, r3, r5
 8006f44:	2b1f      	cmp	r3, #31
 8006f46:	eba2 0203 	sub.w	r2, r2, r3
 8006f4a:	f04f 0101 	mov.w	r1, #1
 8006f4e:	dc3d      	bgt.n	8006fcc <_strtod_l+0x754>
 8006f50:	fa01 f303 	lsl.w	r3, r1, r3
 8006f54:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f56:	2300      	movs	r3, #0
 8006f58:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f5a:	18bd      	adds	r5, r7, r2
 8006f5c:	9b08      	ldr	r3, [sp, #32]
 8006f5e:	42af      	cmp	r7, r5
 8006f60:	4416      	add	r6, r2
 8006f62:	441e      	add	r6, r3
 8006f64:	463b      	mov	r3, r7
 8006f66:	bfa8      	it	ge
 8006f68:	462b      	movge	r3, r5
 8006f6a:	42b3      	cmp	r3, r6
 8006f6c:	bfa8      	it	ge
 8006f6e:	4633      	movge	r3, r6
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	bfc2      	ittt	gt
 8006f74:	1aed      	subgt	r5, r5, r3
 8006f76:	1af6      	subgt	r6, r6, r3
 8006f78:	1aff      	subgt	r7, r7, r3
 8006f7a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	dd16      	ble.n	8006fae <_strtod_l+0x736>
 8006f80:	4641      	mov	r1, r8
 8006f82:	9805      	ldr	r0, [sp, #20]
 8006f84:	461a      	mov	r2, r3
 8006f86:	f7ff f9a5 	bl	80062d4 <__pow5mult>
 8006f8a:	4680      	mov	r8, r0
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d0ba      	beq.n	8006f06 <_strtod_l+0x68e>
 8006f90:	4601      	mov	r1, r0
 8006f92:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006f94:	9805      	ldr	r0, [sp, #20]
 8006f96:	f7ff f8f3 	bl	8006180 <__multiply>
 8006f9a:	900e      	str	r0, [sp, #56]	@ 0x38
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	f43f ae8a 	beq.w	8006cb6 <_strtod_l+0x43e>
 8006fa2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006fa4:	9805      	ldr	r0, [sp, #20]
 8006fa6:	f7fe ffd7 	bl	8005f58 <_Bfree>
 8006faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fac:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fae:	2d00      	cmp	r5, #0
 8006fb0:	dc1d      	bgt.n	8006fee <_strtod_l+0x776>
 8006fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	dd23      	ble.n	8007000 <_strtod_l+0x788>
 8006fb8:	4649      	mov	r1, r9
 8006fba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006fbc:	9805      	ldr	r0, [sp, #20]
 8006fbe:	f7ff f989 	bl	80062d4 <__pow5mult>
 8006fc2:	4681      	mov	r9, r0
 8006fc4:	b9e0      	cbnz	r0, 8007000 <_strtod_l+0x788>
 8006fc6:	f04f 0900 	mov.w	r9, #0
 8006fca:	e674      	b.n	8006cb6 <_strtod_l+0x43e>
 8006fcc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006fd0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006fd4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006fd8:	35e2      	adds	r5, #226	@ 0xe2
 8006fda:	fa01 f305 	lsl.w	r3, r1, r5
 8006fde:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fe0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006fe2:	e7ba      	b.n	8006f5a <_strtod_l+0x6e2>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fe8:	2301      	movs	r3, #1
 8006fea:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006fec:	e7b5      	b.n	8006f5a <_strtod_l+0x6e2>
 8006fee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ff0:	9805      	ldr	r0, [sp, #20]
 8006ff2:	462a      	mov	r2, r5
 8006ff4:	f7ff f9c8 	bl	8006388 <__lshift>
 8006ff8:	901a      	str	r0, [sp, #104]	@ 0x68
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d1d9      	bne.n	8006fb2 <_strtod_l+0x73a>
 8006ffe:	e65a      	b.n	8006cb6 <_strtod_l+0x43e>
 8007000:	2e00      	cmp	r6, #0
 8007002:	dd07      	ble.n	8007014 <_strtod_l+0x79c>
 8007004:	4649      	mov	r1, r9
 8007006:	9805      	ldr	r0, [sp, #20]
 8007008:	4632      	mov	r2, r6
 800700a:	f7ff f9bd 	bl	8006388 <__lshift>
 800700e:	4681      	mov	r9, r0
 8007010:	2800      	cmp	r0, #0
 8007012:	d0d8      	beq.n	8006fc6 <_strtod_l+0x74e>
 8007014:	2f00      	cmp	r7, #0
 8007016:	dd08      	ble.n	800702a <_strtod_l+0x7b2>
 8007018:	4641      	mov	r1, r8
 800701a:	9805      	ldr	r0, [sp, #20]
 800701c:	463a      	mov	r2, r7
 800701e:	f7ff f9b3 	bl	8006388 <__lshift>
 8007022:	4680      	mov	r8, r0
 8007024:	2800      	cmp	r0, #0
 8007026:	f43f ae46 	beq.w	8006cb6 <_strtod_l+0x43e>
 800702a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800702c:	9805      	ldr	r0, [sp, #20]
 800702e:	464a      	mov	r2, r9
 8007030:	f7ff fa32 	bl	8006498 <__mdiff>
 8007034:	4604      	mov	r4, r0
 8007036:	2800      	cmp	r0, #0
 8007038:	f43f ae3d 	beq.w	8006cb6 <_strtod_l+0x43e>
 800703c:	68c3      	ldr	r3, [r0, #12]
 800703e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007040:	2300      	movs	r3, #0
 8007042:	60c3      	str	r3, [r0, #12]
 8007044:	4641      	mov	r1, r8
 8007046:	f7ff fa0b 	bl	8006460 <__mcmp>
 800704a:	2800      	cmp	r0, #0
 800704c:	da46      	bge.n	80070dc <_strtod_l+0x864>
 800704e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007050:	ea53 030a 	orrs.w	r3, r3, sl
 8007054:	d16c      	bne.n	8007130 <_strtod_l+0x8b8>
 8007056:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800705a:	2b00      	cmp	r3, #0
 800705c:	d168      	bne.n	8007130 <_strtod_l+0x8b8>
 800705e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007062:	0d1b      	lsrs	r3, r3, #20
 8007064:	051b      	lsls	r3, r3, #20
 8007066:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800706a:	d961      	bls.n	8007130 <_strtod_l+0x8b8>
 800706c:	6963      	ldr	r3, [r4, #20]
 800706e:	b913      	cbnz	r3, 8007076 <_strtod_l+0x7fe>
 8007070:	6923      	ldr	r3, [r4, #16]
 8007072:	2b01      	cmp	r3, #1
 8007074:	dd5c      	ble.n	8007130 <_strtod_l+0x8b8>
 8007076:	4621      	mov	r1, r4
 8007078:	2201      	movs	r2, #1
 800707a:	9805      	ldr	r0, [sp, #20]
 800707c:	f7ff f984 	bl	8006388 <__lshift>
 8007080:	4641      	mov	r1, r8
 8007082:	4604      	mov	r4, r0
 8007084:	f7ff f9ec 	bl	8006460 <__mcmp>
 8007088:	2800      	cmp	r0, #0
 800708a:	dd51      	ble.n	8007130 <_strtod_l+0x8b8>
 800708c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007090:	9a08      	ldr	r2, [sp, #32]
 8007092:	0d1b      	lsrs	r3, r3, #20
 8007094:	051b      	lsls	r3, r3, #20
 8007096:	2a00      	cmp	r2, #0
 8007098:	d06b      	beq.n	8007172 <_strtod_l+0x8fa>
 800709a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800709e:	d868      	bhi.n	8007172 <_strtod_l+0x8fa>
 80070a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80070a4:	f67f ae9d 	bls.w	8006de2 <_strtod_l+0x56a>
 80070a8:	4b0a      	ldr	r3, [pc, #40]	@ (80070d4 <_strtod_l+0x85c>)
 80070aa:	4650      	mov	r0, sl
 80070ac:	4659      	mov	r1, fp
 80070ae:	2200      	movs	r2, #0
 80070b0:	f7f9 fab2 	bl	8000618 <__aeabi_dmul>
 80070b4:	4b08      	ldr	r3, [pc, #32]	@ (80070d8 <_strtod_l+0x860>)
 80070b6:	400b      	ands	r3, r1
 80070b8:	4682      	mov	sl, r0
 80070ba:	468b      	mov	fp, r1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f47f ae05 	bne.w	8006ccc <_strtod_l+0x454>
 80070c2:	9a05      	ldr	r2, [sp, #20]
 80070c4:	2322      	movs	r3, #34	@ 0x22
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	e600      	b.n	8006ccc <_strtod_l+0x454>
 80070ca:	bf00      	nop
 80070cc:	08008968 	.word	0x08008968
 80070d0:	fffffc02 	.word	0xfffffc02
 80070d4:	39500000 	.word	0x39500000
 80070d8:	7ff00000 	.word	0x7ff00000
 80070dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80070e0:	d165      	bne.n	80071ae <_strtod_l+0x936>
 80070e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80070e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070e8:	b35a      	cbz	r2, 8007142 <_strtod_l+0x8ca>
 80070ea:	4a9f      	ldr	r2, [pc, #636]	@ (8007368 <_strtod_l+0xaf0>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d12b      	bne.n	8007148 <_strtod_l+0x8d0>
 80070f0:	9b08      	ldr	r3, [sp, #32]
 80070f2:	4651      	mov	r1, sl
 80070f4:	b303      	cbz	r3, 8007138 <_strtod_l+0x8c0>
 80070f6:	4b9d      	ldr	r3, [pc, #628]	@ (800736c <_strtod_l+0xaf4>)
 80070f8:	465a      	mov	r2, fp
 80070fa:	4013      	ands	r3, r2
 80070fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007100:	f04f 32ff 	mov.w	r2, #4294967295
 8007104:	d81b      	bhi.n	800713e <_strtod_l+0x8c6>
 8007106:	0d1b      	lsrs	r3, r3, #20
 8007108:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800710c:	fa02 f303 	lsl.w	r3, r2, r3
 8007110:	4299      	cmp	r1, r3
 8007112:	d119      	bne.n	8007148 <_strtod_l+0x8d0>
 8007114:	4b96      	ldr	r3, [pc, #600]	@ (8007370 <_strtod_l+0xaf8>)
 8007116:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007118:	429a      	cmp	r2, r3
 800711a:	d102      	bne.n	8007122 <_strtod_l+0x8aa>
 800711c:	3101      	adds	r1, #1
 800711e:	f43f adca 	beq.w	8006cb6 <_strtod_l+0x43e>
 8007122:	4b92      	ldr	r3, [pc, #584]	@ (800736c <_strtod_l+0xaf4>)
 8007124:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007126:	401a      	ands	r2, r3
 8007128:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800712c:	f04f 0a00 	mov.w	sl, #0
 8007130:	9b08      	ldr	r3, [sp, #32]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1b8      	bne.n	80070a8 <_strtod_l+0x830>
 8007136:	e5c9      	b.n	8006ccc <_strtod_l+0x454>
 8007138:	f04f 33ff 	mov.w	r3, #4294967295
 800713c:	e7e8      	b.n	8007110 <_strtod_l+0x898>
 800713e:	4613      	mov	r3, r2
 8007140:	e7e6      	b.n	8007110 <_strtod_l+0x898>
 8007142:	ea53 030a 	orrs.w	r3, r3, sl
 8007146:	d0a1      	beq.n	800708c <_strtod_l+0x814>
 8007148:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800714a:	b1db      	cbz	r3, 8007184 <_strtod_l+0x90c>
 800714c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800714e:	4213      	tst	r3, r2
 8007150:	d0ee      	beq.n	8007130 <_strtod_l+0x8b8>
 8007152:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007154:	9a08      	ldr	r2, [sp, #32]
 8007156:	4650      	mov	r0, sl
 8007158:	4659      	mov	r1, fp
 800715a:	b1bb      	cbz	r3, 800718c <_strtod_l+0x914>
 800715c:	f7ff fb6e 	bl	800683c <sulp>
 8007160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007164:	ec53 2b10 	vmov	r2, r3, d0
 8007168:	f7f9 f8a0 	bl	80002ac <__adddf3>
 800716c:	4682      	mov	sl, r0
 800716e:	468b      	mov	fp, r1
 8007170:	e7de      	b.n	8007130 <_strtod_l+0x8b8>
 8007172:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007176:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800717a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800717e:	f04f 3aff 	mov.w	sl, #4294967295
 8007182:	e7d5      	b.n	8007130 <_strtod_l+0x8b8>
 8007184:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007186:	ea13 0f0a 	tst.w	r3, sl
 800718a:	e7e1      	b.n	8007150 <_strtod_l+0x8d8>
 800718c:	f7ff fb56 	bl	800683c <sulp>
 8007190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007194:	ec53 2b10 	vmov	r2, r3, d0
 8007198:	f7f9 f886 	bl	80002a8 <__aeabi_dsub>
 800719c:	2200      	movs	r2, #0
 800719e:	2300      	movs	r3, #0
 80071a0:	4682      	mov	sl, r0
 80071a2:	468b      	mov	fp, r1
 80071a4:	f7f9 fca0 	bl	8000ae8 <__aeabi_dcmpeq>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d0c1      	beq.n	8007130 <_strtod_l+0x8b8>
 80071ac:	e619      	b.n	8006de2 <_strtod_l+0x56a>
 80071ae:	4641      	mov	r1, r8
 80071b0:	4620      	mov	r0, r4
 80071b2:	f7ff facd 	bl	8006750 <__ratio>
 80071b6:	ec57 6b10 	vmov	r6, r7, d0
 80071ba:	2200      	movs	r2, #0
 80071bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80071c0:	4630      	mov	r0, r6
 80071c2:	4639      	mov	r1, r7
 80071c4:	f7f9 fca4 	bl	8000b10 <__aeabi_dcmple>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d06f      	beq.n	80072ac <_strtod_l+0xa34>
 80071cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d17a      	bne.n	80072c8 <_strtod_l+0xa50>
 80071d2:	f1ba 0f00 	cmp.w	sl, #0
 80071d6:	d158      	bne.n	800728a <_strtod_l+0xa12>
 80071d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d15a      	bne.n	8007298 <_strtod_l+0xa20>
 80071e2:	4b64      	ldr	r3, [pc, #400]	@ (8007374 <_strtod_l+0xafc>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	4630      	mov	r0, r6
 80071e8:	4639      	mov	r1, r7
 80071ea:	f7f9 fc87 	bl	8000afc <__aeabi_dcmplt>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d159      	bne.n	80072a6 <_strtod_l+0xa2e>
 80071f2:	4630      	mov	r0, r6
 80071f4:	4639      	mov	r1, r7
 80071f6:	4b60      	ldr	r3, [pc, #384]	@ (8007378 <_strtod_l+0xb00>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	f7f9 fa0d 	bl	8000618 <__aeabi_dmul>
 80071fe:	4606      	mov	r6, r0
 8007200:	460f      	mov	r7, r1
 8007202:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007206:	9606      	str	r6, [sp, #24]
 8007208:	9307      	str	r3, [sp, #28]
 800720a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800720e:	4d57      	ldr	r5, [pc, #348]	@ (800736c <_strtod_l+0xaf4>)
 8007210:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007216:	401d      	ands	r5, r3
 8007218:	4b58      	ldr	r3, [pc, #352]	@ (800737c <_strtod_l+0xb04>)
 800721a:	429d      	cmp	r5, r3
 800721c:	f040 80b2 	bne.w	8007384 <_strtod_l+0xb0c>
 8007220:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007222:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007226:	ec4b ab10 	vmov	d0, sl, fp
 800722a:	f7ff f9c9 	bl	80065c0 <__ulp>
 800722e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007232:	ec51 0b10 	vmov	r0, r1, d0
 8007236:	f7f9 f9ef 	bl	8000618 <__aeabi_dmul>
 800723a:	4652      	mov	r2, sl
 800723c:	465b      	mov	r3, fp
 800723e:	f7f9 f835 	bl	80002ac <__adddf3>
 8007242:	460b      	mov	r3, r1
 8007244:	4949      	ldr	r1, [pc, #292]	@ (800736c <_strtod_l+0xaf4>)
 8007246:	4a4e      	ldr	r2, [pc, #312]	@ (8007380 <_strtod_l+0xb08>)
 8007248:	4019      	ands	r1, r3
 800724a:	4291      	cmp	r1, r2
 800724c:	4682      	mov	sl, r0
 800724e:	d942      	bls.n	80072d6 <_strtod_l+0xa5e>
 8007250:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007252:	4b47      	ldr	r3, [pc, #284]	@ (8007370 <_strtod_l+0xaf8>)
 8007254:	429a      	cmp	r2, r3
 8007256:	d103      	bne.n	8007260 <_strtod_l+0x9e8>
 8007258:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800725a:	3301      	adds	r3, #1
 800725c:	f43f ad2b 	beq.w	8006cb6 <_strtod_l+0x43e>
 8007260:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007370 <_strtod_l+0xaf8>
 8007264:	f04f 3aff 	mov.w	sl, #4294967295
 8007268:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800726a:	9805      	ldr	r0, [sp, #20]
 800726c:	f7fe fe74 	bl	8005f58 <_Bfree>
 8007270:	9805      	ldr	r0, [sp, #20]
 8007272:	4649      	mov	r1, r9
 8007274:	f7fe fe70 	bl	8005f58 <_Bfree>
 8007278:	9805      	ldr	r0, [sp, #20]
 800727a:	4641      	mov	r1, r8
 800727c:	f7fe fe6c 	bl	8005f58 <_Bfree>
 8007280:	9805      	ldr	r0, [sp, #20]
 8007282:	4621      	mov	r1, r4
 8007284:	f7fe fe68 	bl	8005f58 <_Bfree>
 8007288:	e618      	b.n	8006ebc <_strtod_l+0x644>
 800728a:	f1ba 0f01 	cmp.w	sl, #1
 800728e:	d103      	bne.n	8007298 <_strtod_l+0xa20>
 8007290:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007292:	2b00      	cmp	r3, #0
 8007294:	f43f ada5 	beq.w	8006de2 <_strtod_l+0x56a>
 8007298:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007348 <_strtod_l+0xad0>
 800729c:	4f35      	ldr	r7, [pc, #212]	@ (8007374 <_strtod_l+0xafc>)
 800729e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80072a2:	2600      	movs	r6, #0
 80072a4:	e7b1      	b.n	800720a <_strtod_l+0x992>
 80072a6:	4f34      	ldr	r7, [pc, #208]	@ (8007378 <_strtod_l+0xb00>)
 80072a8:	2600      	movs	r6, #0
 80072aa:	e7aa      	b.n	8007202 <_strtod_l+0x98a>
 80072ac:	4b32      	ldr	r3, [pc, #200]	@ (8007378 <_strtod_l+0xb00>)
 80072ae:	4630      	mov	r0, r6
 80072b0:	4639      	mov	r1, r7
 80072b2:	2200      	movs	r2, #0
 80072b4:	f7f9 f9b0 	bl	8000618 <__aeabi_dmul>
 80072b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ba:	4606      	mov	r6, r0
 80072bc:	460f      	mov	r7, r1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d09f      	beq.n	8007202 <_strtod_l+0x98a>
 80072c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80072c6:	e7a0      	b.n	800720a <_strtod_l+0x992>
 80072c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007350 <_strtod_l+0xad8>
 80072cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80072d0:	ec57 6b17 	vmov	r6, r7, d7
 80072d4:	e799      	b.n	800720a <_strtod_l+0x992>
 80072d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80072da:	9b08      	ldr	r3, [sp, #32]
 80072dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1c1      	bne.n	8007268 <_strtod_l+0x9f0>
 80072e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80072e8:	0d1b      	lsrs	r3, r3, #20
 80072ea:	051b      	lsls	r3, r3, #20
 80072ec:	429d      	cmp	r5, r3
 80072ee:	d1bb      	bne.n	8007268 <_strtod_l+0x9f0>
 80072f0:	4630      	mov	r0, r6
 80072f2:	4639      	mov	r1, r7
 80072f4:	f7f9 fcf0 	bl	8000cd8 <__aeabi_d2lz>
 80072f8:	f7f9 f960 	bl	80005bc <__aeabi_l2d>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4630      	mov	r0, r6
 8007302:	4639      	mov	r1, r7
 8007304:	f7f8 ffd0 	bl	80002a8 <__aeabi_dsub>
 8007308:	460b      	mov	r3, r1
 800730a:	4602      	mov	r2, r0
 800730c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007310:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007316:	ea46 060a 	orr.w	r6, r6, sl
 800731a:	431e      	orrs	r6, r3
 800731c:	d06f      	beq.n	80073fe <_strtod_l+0xb86>
 800731e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007358 <_strtod_l+0xae0>)
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f7f9 fbea 	bl	8000afc <__aeabi_dcmplt>
 8007328:	2800      	cmp	r0, #0
 800732a:	f47f accf 	bne.w	8006ccc <_strtod_l+0x454>
 800732e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007360 <_strtod_l+0xae8>)
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007338:	f7f9 fbfe 	bl	8000b38 <__aeabi_dcmpgt>
 800733c:	2800      	cmp	r0, #0
 800733e:	d093      	beq.n	8007268 <_strtod_l+0x9f0>
 8007340:	e4c4      	b.n	8006ccc <_strtod_l+0x454>
 8007342:	bf00      	nop
 8007344:	f3af 8000 	nop.w
 8007348:	00000000 	.word	0x00000000
 800734c:	bff00000 	.word	0xbff00000
 8007350:	00000000 	.word	0x00000000
 8007354:	3ff00000 	.word	0x3ff00000
 8007358:	94a03595 	.word	0x94a03595
 800735c:	3fdfffff 	.word	0x3fdfffff
 8007360:	35afe535 	.word	0x35afe535
 8007364:	3fe00000 	.word	0x3fe00000
 8007368:	000fffff 	.word	0x000fffff
 800736c:	7ff00000 	.word	0x7ff00000
 8007370:	7fefffff 	.word	0x7fefffff
 8007374:	3ff00000 	.word	0x3ff00000
 8007378:	3fe00000 	.word	0x3fe00000
 800737c:	7fe00000 	.word	0x7fe00000
 8007380:	7c9fffff 	.word	0x7c9fffff
 8007384:	9b08      	ldr	r3, [sp, #32]
 8007386:	b323      	cbz	r3, 80073d2 <_strtod_l+0xb5a>
 8007388:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800738c:	d821      	bhi.n	80073d2 <_strtod_l+0xb5a>
 800738e:	a328      	add	r3, pc, #160	@ (adr r3, 8007430 <_strtod_l+0xbb8>)
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	4630      	mov	r0, r6
 8007396:	4639      	mov	r1, r7
 8007398:	f7f9 fbba 	bl	8000b10 <__aeabi_dcmple>
 800739c:	b1a0      	cbz	r0, 80073c8 <_strtod_l+0xb50>
 800739e:	4639      	mov	r1, r7
 80073a0:	4630      	mov	r0, r6
 80073a2:	f7f9 fc11 	bl	8000bc8 <__aeabi_d2uiz>
 80073a6:	2801      	cmp	r0, #1
 80073a8:	bf38      	it	cc
 80073aa:	2001      	movcc	r0, #1
 80073ac:	f7f9 f8ba 	bl	8000524 <__aeabi_ui2d>
 80073b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073b2:	4606      	mov	r6, r0
 80073b4:	460f      	mov	r7, r1
 80073b6:	b9fb      	cbnz	r3, 80073f8 <_strtod_l+0xb80>
 80073b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80073be:	9315      	str	r3, [sp, #84]	@ 0x54
 80073c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80073c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80073c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80073ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80073ce:	1b5b      	subs	r3, r3, r5
 80073d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80073d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80073d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80073da:	f7ff f8f1 	bl	80065c0 <__ulp>
 80073de:	4650      	mov	r0, sl
 80073e0:	ec53 2b10 	vmov	r2, r3, d0
 80073e4:	4659      	mov	r1, fp
 80073e6:	f7f9 f917 	bl	8000618 <__aeabi_dmul>
 80073ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80073ee:	f7f8 ff5d 	bl	80002ac <__adddf3>
 80073f2:	4682      	mov	sl, r0
 80073f4:	468b      	mov	fp, r1
 80073f6:	e770      	b.n	80072da <_strtod_l+0xa62>
 80073f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80073fc:	e7e0      	b.n	80073c0 <_strtod_l+0xb48>
 80073fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8007438 <_strtod_l+0xbc0>)
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	f7f9 fb7a 	bl	8000afc <__aeabi_dcmplt>
 8007408:	e798      	b.n	800733c <_strtod_l+0xac4>
 800740a:	2300      	movs	r3, #0
 800740c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800740e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007410:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	f7ff ba6d 	b.w	80068f2 <_strtod_l+0x7a>
 8007418:	2a65      	cmp	r2, #101	@ 0x65
 800741a:	f43f ab66 	beq.w	8006aea <_strtod_l+0x272>
 800741e:	2a45      	cmp	r2, #69	@ 0x45
 8007420:	f43f ab63 	beq.w	8006aea <_strtod_l+0x272>
 8007424:	2301      	movs	r3, #1
 8007426:	f7ff bb9e 	b.w	8006b66 <_strtod_l+0x2ee>
 800742a:	bf00      	nop
 800742c:	f3af 8000 	nop.w
 8007430:	ffc00000 	.word	0xffc00000
 8007434:	41dfffff 	.word	0x41dfffff
 8007438:	94a03595 	.word	0x94a03595
 800743c:	3fcfffff 	.word	0x3fcfffff

08007440 <_strtod_r>:
 8007440:	4b01      	ldr	r3, [pc, #4]	@ (8007448 <_strtod_r+0x8>)
 8007442:	f7ff ba19 	b.w	8006878 <_strtod_l>
 8007446:	bf00      	nop
 8007448:	2000006c 	.word	0x2000006c

0800744c <_strtol_l.constprop.0>:
 800744c:	2b24      	cmp	r3, #36	@ 0x24
 800744e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007452:	4686      	mov	lr, r0
 8007454:	4690      	mov	r8, r2
 8007456:	d801      	bhi.n	800745c <_strtol_l.constprop.0+0x10>
 8007458:	2b01      	cmp	r3, #1
 800745a:	d106      	bne.n	800746a <_strtol_l.constprop.0+0x1e>
 800745c:	f7fd fdba 	bl	8004fd4 <__errno>
 8007460:	2316      	movs	r3, #22
 8007462:	6003      	str	r3, [r0, #0]
 8007464:	2000      	movs	r0, #0
 8007466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800746a:	4834      	ldr	r0, [pc, #208]	@ (800753c <_strtol_l.constprop.0+0xf0>)
 800746c:	460d      	mov	r5, r1
 800746e:	462a      	mov	r2, r5
 8007470:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007474:	5d06      	ldrb	r6, [r0, r4]
 8007476:	f016 0608 	ands.w	r6, r6, #8
 800747a:	d1f8      	bne.n	800746e <_strtol_l.constprop.0+0x22>
 800747c:	2c2d      	cmp	r4, #45	@ 0x2d
 800747e:	d12d      	bne.n	80074dc <_strtol_l.constprop.0+0x90>
 8007480:	782c      	ldrb	r4, [r5, #0]
 8007482:	2601      	movs	r6, #1
 8007484:	1c95      	adds	r5, r2, #2
 8007486:	f033 0210 	bics.w	r2, r3, #16
 800748a:	d109      	bne.n	80074a0 <_strtol_l.constprop.0+0x54>
 800748c:	2c30      	cmp	r4, #48	@ 0x30
 800748e:	d12a      	bne.n	80074e6 <_strtol_l.constprop.0+0x9a>
 8007490:	782a      	ldrb	r2, [r5, #0]
 8007492:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007496:	2a58      	cmp	r2, #88	@ 0x58
 8007498:	d125      	bne.n	80074e6 <_strtol_l.constprop.0+0x9a>
 800749a:	786c      	ldrb	r4, [r5, #1]
 800749c:	2310      	movs	r3, #16
 800749e:	3502      	adds	r5, #2
 80074a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80074a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80074a8:	2200      	movs	r2, #0
 80074aa:	fbbc f9f3 	udiv	r9, ip, r3
 80074ae:	4610      	mov	r0, r2
 80074b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80074b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80074b8:	2f09      	cmp	r7, #9
 80074ba:	d81b      	bhi.n	80074f4 <_strtol_l.constprop.0+0xa8>
 80074bc:	463c      	mov	r4, r7
 80074be:	42a3      	cmp	r3, r4
 80074c0:	dd27      	ble.n	8007512 <_strtol_l.constprop.0+0xc6>
 80074c2:	1c57      	adds	r7, r2, #1
 80074c4:	d007      	beq.n	80074d6 <_strtol_l.constprop.0+0x8a>
 80074c6:	4581      	cmp	r9, r0
 80074c8:	d320      	bcc.n	800750c <_strtol_l.constprop.0+0xc0>
 80074ca:	d101      	bne.n	80074d0 <_strtol_l.constprop.0+0x84>
 80074cc:	45a2      	cmp	sl, r4
 80074ce:	db1d      	blt.n	800750c <_strtol_l.constprop.0+0xc0>
 80074d0:	fb00 4003 	mla	r0, r0, r3, r4
 80074d4:	2201      	movs	r2, #1
 80074d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074da:	e7eb      	b.n	80074b4 <_strtol_l.constprop.0+0x68>
 80074dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80074de:	bf04      	itt	eq
 80074e0:	782c      	ldrbeq	r4, [r5, #0]
 80074e2:	1c95      	addeq	r5, r2, #2
 80074e4:	e7cf      	b.n	8007486 <_strtol_l.constprop.0+0x3a>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1da      	bne.n	80074a0 <_strtol_l.constprop.0+0x54>
 80074ea:	2c30      	cmp	r4, #48	@ 0x30
 80074ec:	bf0c      	ite	eq
 80074ee:	2308      	moveq	r3, #8
 80074f0:	230a      	movne	r3, #10
 80074f2:	e7d5      	b.n	80074a0 <_strtol_l.constprop.0+0x54>
 80074f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80074f8:	2f19      	cmp	r7, #25
 80074fa:	d801      	bhi.n	8007500 <_strtol_l.constprop.0+0xb4>
 80074fc:	3c37      	subs	r4, #55	@ 0x37
 80074fe:	e7de      	b.n	80074be <_strtol_l.constprop.0+0x72>
 8007500:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007504:	2f19      	cmp	r7, #25
 8007506:	d804      	bhi.n	8007512 <_strtol_l.constprop.0+0xc6>
 8007508:	3c57      	subs	r4, #87	@ 0x57
 800750a:	e7d8      	b.n	80074be <_strtol_l.constprop.0+0x72>
 800750c:	f04f 32ff 	mov.w	r2, #4294967295
 8007510:	e7e1      	b.n	80074d6 <_strtol_l.constprop.0+0x8a>
 8007512:	1c53      	adds	r3, r2, #1
 8007514:	d108      	bne.n	8007528 <_strtol_l.constprop.0+0xdc>
 8007516:	2322      	movs	r3, #34	@ 0x22
 8007518:	f8ce 3000 	str.w	r3, [lr]
 800751c:	4660      	mov	r0, ip
 800751e:	f1b8 0f00 	cmp.w	r8, #0
 8007522:	d0a0      	beq.n	8007466 <_strtol_l.constprop.0+0x1a>
 8007524:	1e69      	subs	r1, r5, #1
 8007526:	e006      	b.n	8007536 <_strtol_l.constprop.0+0xea>
 8007528:	b106      	cbz	r6, 800752c <_strtol_l.constprop.0+0xe0>
 800752a:	4240      	negs	r0, r0
 800752c:	f1b8 0f00 	cmp.w	r8, #0
 8007530:	d099      	beq.n	8007466 <_strtol_l.constprop.0+0x1a>
 8007532:	2a00      	cmp	r2, #0
 8007534:	d1f6      	bne.n	8007524 <_strtol_l.constprop.0+0xd8>
 8007536:	f8c8 1000 	str.w	r1, [r8]
 800753a:	e794      	b.n	8007466 <_strtol_l.constprop.0+0x1a>
 800753c:	08008991 	.word	0x08008991

08007540 <_strtol_r>:
 8007540:	f7ff bf84 	b.w	800744c <_strtol_l.constprop.0>

08007544 <__ssputs_r>:
 8007544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007548:	688e      	ldr	r6, [r1, #8]
 800754a:	461f      	mov	r7, r3
 800754c:	42be      	cmp	r6, r7
 800754e:	680b      	ldr	r3, [r1, #0]
 8007550:	4682      	mov	sl, r0
 8007552:	460c      	mov	r4, r1
 8007554:	4690      	mov	r8, r2
 8007556:	d82d      	bhi.n	80075b4 <__ssputs_r+0x70>
 8007558:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800755c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007560:	d026      	beq.n	80075b0 <__ssputs_r+0x6c>
 8007562:	6965      	ldr	r5, [r4, #20]
 8007564:	6909      	ldr	r1, [r1, #16]
 8007566:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800756a:	eba3 0901 	sub.w	r9, r3, r1
 800756e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007572:	1c7b      	adds	r3, r7, #1
 8007574:	444b      	add	r3, r9
 8007576:	106d      	asrs	r5, r5, #1
 8007578:	429d      	cmp	r5, r3
 800757a:	bf38      	it	cc
 800757c:	461d      	movcc	r5, r3
 800757e:	0553      	lsls	r3, r2, #21
 8007580:	d527      	bpl.n	80075d2 <__ssputs_r+0x8e>
 8007582:	4629      	mov	r1, r5
 8007584:	f7fe fc1c 	bl	8005dc0 <_malloc_r>
 8007588:	4606      	mov	r6, r0
 800758a:	b360      	cbz	r0, 80075e6 <__ssputs_r+0xa2>
 800758c:	6921      	ldr	r1, [r4, #16]
 800758e:	464a      	mov	r2, r9
 8007590:	f000 fa18 	bl	80079c4 <memcpy>
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800759a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800759e:	81a3      	strh	r3, [r4, #12]
 80075a0:	6126      	str	r6, [r4, #16]
 80075a2:	6165      	str	r5, [r4, #20]
 80075a4:	444e      	add	r6, r9
 80075a6:	eba5 0509 	sub.w	r5, r5, r9
 80075aa:	6026      	str	r6, [r4, #0]
 80075ac:	60a5      	str	r5, [r4, #8]
 80075ae:	463e      	mov	r6, r7
 80075b0:	42be      	cmp	r6, r7
 80075b2:	d900      	bls.n	80075b6 <__ssputs_r+0x72>
 80075b4:	463e      	mov	r6, r7
 80075b6:	6820      	ldr	r0, [r4, #0]
 80075b8:	4632      	mov	r2, r6
 80075ba:	4641      	mov	r1, r8
 80075bc:	f000 f9c6 	bl	800794c <memmove>
 80075c0:	68a3      	ldr	r3, [r4, #8]
 80075c2:	1b9b      	subs	r3, r3, r6
 80075c4:	60a3      	str	r3, [r4, #8]
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	4433      	add	r3, r6
 80075ca:	6023      	str	r3, [r4, #0]
 80075cc:	2000      	movs	r0, #0
 80075ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d2:	462a      	mov	r2, r5
 80075d4:	f000 fd89 	bl	80080ea <_realloc_r>
 80075d8:	4606      	mov	r6, r0
 80075da:	2800      	cmp	r0, #0
 80075dc:	d1e0      	bne.n	80075a0 <__ssputs_r+0x5c>
 80075de:	6921      	ldr	r1, [r4, #16]
 80075e0:	4650      	mov	r0, sl
 80075e2:	f7fe fb79 	bl	8005cd8 <_free_r>
 80075e6:	230c      	movs	r3, #12
 80075e8:	f8ca 3000 	str.w	r3, [sl]
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075f2:	81a3      	strh	r3, [r4, #12]
 80075f4:	f04f 30ff 	mov.w	r0, #4294967295
 80075f8:	e7e9      	b.n	80075ce <__ssputs_r+0x8a>
	...

080075fc <_svfiprintf_r>:
 80075fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007600:	4698      	mov	r8, r3
 8007602:	898b      	ldrh	r3, [r1, #12]
 8007604:	061b      	lsls	r3, r3, #24
 8007606:	b09d      	sub	sp, #116	@ 0x74
 8007608:	4607      	mov	r7, r0
 800760a:	460d      	mov	r5, r1
 800760c:	4614      	mov	r4, r2
 800760e:	d510      	bpl.n	8007632 <_svfiprintf_r+0x36>
 8007610:	690b      	ldr	r3, [r1, #16]
 8007612:	b973      	cbnz	r3, 8007632 <_svfiprintf_r+0x36>
 8007614:	2140      	movs	r1, #64	@ 0x40
 8007616:	f7fe fbd3 	bl	8005dc0 <_malloc_r>
 800761a:	6028      	str	r0, [r5, #0]
 800761c:	6128      	str	r0, [r5, #16]
 800761e:	b930      	cbnz	r0, 800762e <_svfiprintf_r+0x32>
 8007620:	230c      	movs	r3, #12
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	f04f 30ff 	mov.w	r0, #4294967295
 8007628:	b01d      	add	sp, #116	@ 0x74
 800762a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762e:	2340      	movs	r3, #64	@ 0x40
 8007630:	616b      	str	r3, [r5, #20]
 8007632:	2300      	movs	r3, #0
 8007634:	9309      	str	r3, [sp, #36]	@ 0x24
 8007636:	2320      	movs	r3, #32
 8007638:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800763c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007640:	2330      	movs	r3, #48	@ 0x30
 8007642:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80077e0 <_svfiprintf_r+0x1e4>
 8007646:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800764a:	f04f 0901 	mov.w	r9, #1
 800764e:	4623      	mov	r3, r4
 8007650:	469a      	mov	sl, r3
 8007652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007656:	b10a      	cbz	r2, 800765c <_svfiprintf_r+0x60>
 8007658:	2a25      	cmp	r2, #37	@ 0x25
 800765a:	d1f9      	bne.n	8007650 <_svfiprintf_r+0x54>
 800765c:	ebba 0b04 	subs.w	fp, sl, r4
 8007660:	d00b      	beq.n	800767a <_svfiprintf_r+0x7e>
 8007662:	465b      	mov	r3, fp
 8007664:	4622      	mov	r2, r4
 8007666:	4629      	mov	r1, r5
 8007668:	4638      	mov	r0, r7
 800766a:	f7ff ff6b 	bl	8007544 <__ssputs_r>
 800766e:	3001      	adds	r0, #1
 8007670:	f000 80a7 	beq.w	80077c2 <_svfiprintf_r+0x1c6>
 8007674:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007676:	445a      	add	r2, fp
 8007678:	9209      	str	r2, [sp, #36]	@ 0x24
 800767a:	f89a 3000 	ldrb.w	r3, [sl]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 809f 	beq.w	80077c2 <_svfiprintf_r+0x1c6>
 8007684:	2300      	movs	r3, #0
 8007686:	f04f 32ff 	mov.w	r2, #4294967295
 800768a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800768e:	f10a 0a01 	add.w	sl, sl, #1
 8007692:	9304      	str	r3, [sp, #16]
 8007694:	9307      	str	r3, [sp, #28]
 8007696:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800769a:	931a      	str	r3, [sp, #104]	@ 0x68
 800769c:	4654      	mov	r4, sl
 800769e:	2205      	movs	r2, #5
 80076a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a4:	484e      	ldr	r0, [pc, #312]	@ (80077e0 <_svfiprintf_r+0x1e4>)
 80076a6:	f7f8 fda3 	bl	80001f0 <memchr>
 80076aa:	9a04      	ldr	r2, [sp, #16]
 80076ac:	b9d8      	cbnz	r0, 80076e6 <_svfiprintf_r+0xea>
 80076ae:	06d0      	lsls	r0, r2, #27
 80076b0:	bf44      	itt	mi
 80076b2:	2320      	movmi	r3, #32
 80076b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076b8:	0711      	lsls	r1, r2, #28
 80076ba:	bf44      	itt	mi
 80076bc:	232b      	movmi	r3, #43	@ 0x2b
 80076be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076c2:	f89a 3000 	ldrb.w	r3, [sl]
 80076c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80076c8:	d015      	beq.n	80076f6 <_svfiprintf_r+0xfa>
 80076ca:	9a07      	ldr	r2, [sp, #28]
 80076cc:	4654      	mov	r4, sl
 80076ce:	2000      	movs	r0, #0
 80076d0:	f04f 0c0a 	mov.w	ip, #10
 80076d4:	4621      	mov	r1, r4
 80076d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076da:	3b30      	subs	r3, #48	@ 0x30
 80076dc:	2b09      	cmp	r3, #9
 80076de:	d94b      	bls.n	8007778 <_svfiprintf_r+0x17c>
 80076e0:	b1b0      	cbz	r0, 8007710 <_svfiprintf_r+0x114>
 80076e2:	9207      	str	r2, [sp, #28]
 80076e4:	e014      	b.n	8007710 <_svfiprintf_r+0x114>
 80076e6:	eba0 0308 	sub.w	r3, r0, r8
 80076ea:	fa09 f303 	lsl.w	r3, r9, r3
 80076ee:	4313      	orrs	r3, r2
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	46a2      	mov	sl, r4
 80076f4:	e7d2      	b.n	800769c <_svfiprintf_r+0xa0>
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	1d19      	adds	r1, r3, #4
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	9103      	str	r1, [sp, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bfbb      	ittet	lt
 8007702:	425b      	neglt	r3, r3
 8007704:	f042 0202 	orrlt.w	r2, r2, #2
 8007708:	9307      	strge	r3, [sp, #28]
 800770a:	9307      	strlt	r3, [sp, #28]
 800770c:	bfb8      	it	lt
 800770e:	9204      	strlt	r2, [sp, #16]
 8007710:	7823      	ldrb	r3, [r4, #0]
 8007712:	2b2e      	cmp	r3, #46	@ 0x2e
 8007714:	d10a      	bne.n	800772c <_svfiprintf_r+0x130>
 8007716:	7863      	ldrb	r3, [r4, #1]
 8007718:	2b2a      	cmp	r3, #42	@ 0x2a
 800771a:	d132      	bne.n	8007782 <_svfiprintf_r+0x186>
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	1d1a      	adds	r2, r3, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	9203      	str	r2, [sp, #12]
 8007724:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007728:	3402      	adds	r4, #2
 800772a:	9305      	str	r3, [sp, #20]
 800772c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80077f0 <_svfiprintf_r+0x1f4>
 8007730:	7821      	ldrb	r1, [r4, #0]
 8007732:	2203      	movs	r2, #3
 8007734:	4650      	mov	r0, sl
 8007736:	f7f8 fd5b 	bl	80001f0 <memchr>
 800773a:	b138      	cbz	r0, 800774c <_svfiprintf_r+0x150>
 800773c:	9b04      	ldr	r3, [sp, #16]
 800773e:	eba0 000a 	sub.w	r0, r0, sl
 8007742:	2240      	movs	r2, #64	@ 0x40
 8007744:	4082      	lsls	r2, r0
 8007746:	4313      	orrs	r3, r2
 8007748:	3401      	adds	r4, #1
 800774a:	9304      	str	r3, [sp, #16]
 800774c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007750:	4824      	ldr	r0, [pc, #144]	@ (80077e4 <_svfiprintf_r+0x1e8>)
 8007752:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007756:	2206      	movs	r2, #6
 8007758:	f7f8 fd4a 	bl	80001f0 <memchr>
 800775c:	2800      	cmp	r0, #0
 800775e:	d036      	beq.n	80077ce <_svfiprintf_r+0x1d2>
 8007760:	4b21      	ldr	r3, [pc, #132]	@ (80077e8 <_svfiprintf_r+0x1ec>)
 8007762:	bb1b      	cbnz	r3, 80077ac <_svfiprintf_r+0x1b0>
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	3307      	adds	r3, #7
 8007768:	f023 0307 	bic.w	r3, r3, #7
 800776c:	3308      	adds	r3, #8
 800776e:	9303      	str	r3, [sp, #12]
 8007770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007772:	4433      	add	r3, r6
 8007774:	9309      	str	r3, [sp, #36]	@ 0x24
 8007776:	e76a      	b.n	800764e <_svfiprintf_r+0x52>
 8007778:	fb0c 3202 	mla	r2, ip, r2, r3
 800777c:	460c      	mov	r4, r1
 800777e:	2001      	movs	r0, #1
 8007780:	e7a8      	b.n	80076d4 <_svfiprintf_r+0xd8>
 8007782:	2300      	movs	r3, #0
 8007784:	3401      	adds	r4, #1
 8007786:	9305      	str	r3, [sp, #20]
 8007788:	4619      	mov	r1, r3
 800778a:	f04f 0c0a 	mov.w	ip, #10
 800778e:	4620      	mov	r0, r4
 8007790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007794:	3a30      	subs	r2, #48	@ 0x30
 8007796:	2a09      	cmp	r2, #9
 8007798:	d903      	bls.n	80077a2 <_svfiprintf_r+0x1a6>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0c6      	beq.n	800772c <_svfiprintf_r+0x130>
 800779e:	9105      	str	r1, [sp, #20]
 80077a0:	e7c4      	b.n	800772c <_svfiprintf_r+0x130>
 80077a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80077a6:	4604      	mov	r4, r0
 80077a8:	2301      	movs	r3, #1
 80077aa:	e7f0      	b.n	800778e <_svfiprintf_r+0x192>
 80077ac:	ab03      	add	r3, sp, #12
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	462a      	mov	r2, r5
 80077b2:	4b0e      	ldr	r3, [pc, #56]	@ (80077ec <_svfiprintf_r+0x1f0>)
 80077b4:	a904      	add	r1, sp, #16
 80077b6:	4638      	mov	r0, r7
 80077b8:	f7fc fcc8 	bl	800414c <_printf_float>
 80077bc:	1c42      	adds	r2, r0, #1
 80077be:	4606      	mov	r6, r0
 80077c0:	d1d6      	bne.n	8007770 <_svfiprintf_r+0x174>
 80077c2:	89ab      	ldrh	r3, [r5, #12]
 80077c4:	065b      	lsls	r3, r3, #25
 80077c6:	f53f af2d 	bmi.w	8007624 <_svfiprintf_r+0x28>
 80077ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077cc:	e72c      	b.n	8007628 <_svfiprintf_r+0x2c>
 80077ce:	ab03      	add	r3, sp, #12
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	462a      	mov	r2, r5
 80077d4:	4b05      	ldr	r3, [pc, #20]	@ (80077ec <_svfiprintf_r+0x1f0>)
 80077d6:	a904      	add	r1, sp, #16
 80077d8:	4638      	mov	r0, r7
 80077da:	f7fc ff4f 	bl	800467c <_printf_i>
 80077de:	e7ed      	b.n	80077bc <_svfiprintf_r+0x1c0>
 80077e0:	08008a91 	.word	0x08008a91
 80077e4:	08008a9b 	.word	0x08008a9b
 80077e8:	0800414d 	.word	0x0800414d
 80077ec:	08007545 	.word	0x08007545
 80077f0:	08008a97 	.word	0x08008a97

080077f4 <__sflush_r>:
 80077f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077fc:	0716      	lsls	r6, r2, #28
 80077fe:	4605      	mov	r5, r0
 8007800:	460c      	mov	r4, r1
 8007802:	d454      	bmi.n	80078ae <__sflush_r+0xba>
 8007804:	684b      	ldr	r3, [r1, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	dc02      	bgt.n	8007810 <__sflush_r+0x1c>
 800780a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800780c:	2b00      	cmp	r3, #0
 800780e:	dd48      	ble.n	80078a2 <__sflush_r+0xae>
 8007810:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007812:	2e00      	cmp	r6, #0
 8007814:	d045      	beq.n	80078a2 <__sflush_r+0xae>
 8007816:	2300      	movs	r3, #0
 8007818:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800781c:	682f      	ldr	r7, [r5, #0]
 800781e:	6a21      	ldr	r1, [r4, #32]
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	d030      	beq.n	8007886 <__sflush_r+0x92>
 8007824:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007826:	89a3      	ldrh	r3, [r4, #12]
 8007828:	0759      	lsls	r1, r3, #29
 800782a:	d505      	bpl.n	8007838 <__sflush_r+0x44>
 800782c:	6863      	ldr	r3, [r4, #4]
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007832:	b10b      	cbz	r3, 8007838 <__sflush_r+0x44>
 8007834:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007836:	1ad2      	subs	r2, r2, r3
 8007838:	2300      	movs	r3, #0
 800783a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800783c:	6a21      	ldr	r1, [r4, #32]
 800783e:	4628      	mov	r0, r5
 8007840:	47b0      	blx	r6
 8007842:	1c43      	adds	r3, r0, #1
 8007844:	89a3      	ldrh	r3, [r4, #12]
 8007846:	d106      	bne.n	8007856 <__sflush_r+0x62>
 8007848:	6829      	ldr	r1, [r5, #0]
 800784a:	291d      	cmp	r1, #29
 800784c:	d82b      	bhi.n	80078a6 <__sflush_r+0xb2>
 800784e:	4a2a      	ldr	r2, [pc, #168]	@ (80078f8 <__sflush_r+0x104>)
 8007850:	410a      	asrs	r2, r1
 8007852:	07d6      	lsls	r6, r2, #31
 8007854:	d427      	bmi.n	80078a6 <__sflush_r+0xb2>
 8007856:	2200      	movs	r2, #0
 8007858:	6062      	str	r2, [r4, #4]
 800785a:	04d9      	lsls	r1, r3, #19
 800785c:	6922      	ldr	r2, [r4, #16]
 800785e:	6022      	str	r2, [r4, #0]
 8007860:	d504      	bpl.n	800786c <__sflush_r+0x78>
 8007862:	1c42      	adds	r2, r0, #1
 8007864:	d101      	bne.n	800786a <__sflush_r+0x76>
 8007866:	682b      	ldr	r3, [r5, #0]
 8007868:	b903      	cbnz	r3, 800786c <__sflush_r+0x78>
 800786a:	6560      	str	r0, [r4, #84]	@ 0x54
 800786c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800786e:	602f      	str	r7, [r5, #0]
 8007870:	b1b9      	cbz	r1, 80078a2 <__sflush_r+0xae>
 8007872:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007876:	4299      	cmp	r1, r3
 8007878:	d002      	beq.n	8007880 <__sflush_r+0x8c>
 800787a:	4628      	mov	r0, r5
 800787c:	f7fe fa2c 	bl	8005cd8 <_free_r>
 8007880:	2300      	movs	r3, #0
 8007882:	6363      	str	r3, [r4, #52]	@ 0x34
 8007884:	e00d      	b.n	80078a2 <__sflush_r+0xae>
 8007886:	2301      	movs	r3, #1
 8007888:	4628      	mov	r0, r5
 800788a:	47b0      	blx	r6
 800788c:	4602      	mov	r2, r0
 800788e:	1c50      	adds	r0, r2, #1
 8007890:	d1c9      	bne.n	8007826 <__sflush_r+0x32>
 8007892:	682b      	ldr	r3, [r5, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0c6      	beq.n	8007826 <__sflush_r+0x32>
 8007898:	2b1d      	cmp	r3, #29
 800789a:	d001      	beq.n	80078a0 <__sflush_r+0xac>
 800789c:	2b16      	cmp	r3, #22
 800789e:	d11e      	bne.n	80078de <__sflush_r+0xea>
 80078a0:	602f      	str	r7, [r5, #0]
 80078a2:	2000      	movs	r0, #0
 80078a4:	e022      	b.n	80078ec <__sflush_r+0xf8>
 80078a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078aa:	b21b      	sxth	r3, r3
 80078ac:	e01b      	b.n	80078e6 <__sflush_r+0xf2>
 80078ae:	690f      	ldr	r7, [r1, #16]
 80078b0:	2f00      	cmp	r7, #0
 80078b2:	d0f6      	beq.n	80078a2 <__sflush_r+0xae>
 80078b4:	0793      	lsls	r3, r2, #30
 80078b6:	680e      	ldr	r6, [r1, #0]
 80078b8:	bf08      	it	eq
 80078ba:	694b      	ldreq	r3, [r1, #20]
 80078bc:	600f      	str	r7, [r1, #0]
 80078be:	bf18      	it	ne
 80078c0:	2300      	movne	r3, #0
 80078c2:	eba6 0807 	sub.w	r8, r6, r7
 80078c6:	608b      	str	r3, [r1, #8]
 80078c8:	f1b8 0f00 	cmp.w	r8, #0
 80078cc:	dde9      	ble.n	80078a2 <__sflush_r+0xae>
 80078ce:	6a21      	ldr	r1, [r4, #32]
 80078d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80078d2:	4643      	mov	r3, r8
 80078d4:	463a      	mov	r2, r7
 80078d6:	4628      	mov	r0, r5
 80078d8:	47b0      	blx	r6
 80078da:	2800      	cmp	r0, #0
 80078dc:	dc08      	bgt.n	80078f0 <__sflush_r+0xfc>
 80078de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078e6:	81a3      	strh	r3, [r4, #12]
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f0:	4407      	add	r7, r0
 80078f2:	eba8 0800 	sub.w	r8, r8, r0
 80078f6:	e7e7      	b.n	80078c8 <__sflush_r+0xd4>
 80078f8:	dfbffffe 	.word	0xdfbffffe

080078fc <_fflush_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	690b      	ldr	r3, [r1, #16]
 8007900:	4605      	mov	r5, r0
 8007902:	460c      	mov	r4, r1
 8007904:	b913      	cbnz	r3, 800790c <_fflush_r+0x10>
 8007906:	2500      	movs	r5, #0
 8007908:	4628      	mov	r0, r5
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	b118      	cbz	r0, 8007916 <_fflush_r+0x1a>
 800790e:	6a03      	ldr	r3, [r0, #32]
 8007910:	b90b      	cbnz	r3, 8007916 <_fflush_r+0x1a>
 8007912:	f7fd fa73 	bl	8004dfc <__sinit>
 8007916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0f3      	beq.n	8007906 <_fflush_r+0xa>
 800791e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007920:	07d0      	lsls	r0, r2, #31
 8007922:	d404      	bmi.n	800792e <_fflush_r+0x32>
 8007924:	0599      	lsls	r1, r3, #22
 8007926:	d402      	bmi.n	800792e <_fflush_r+0x32>
 8007928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800792a:	f7fd fb7e 	bl	800502a <__retarget_lock_acquire_recursive>
 800792e:	4628      	mov	r0, r5
 8007930:	4621      	mov	r1, r4
 8007932:	f7ff ff5f 	bl	80077f4 <__sflush_r>
 8007936:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007938:	07da      	lsls	r2, r3, #31
 800793a:	4605      	mov	r5, r0
 800793c:	d4e4      	bmi.n	8007908 <_fflush_r+0xc>
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	059b      	lsls	r3, r3, #22
 8007942:	d4e1      	bmi.n	8007908 <_fflush_r+0xc>
 8007944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007946:	f7fd fb71 	bl	800502c <__retarget_lock_release_recursive>
 800794a:	e7dd      	b.n	8007908 <_fflush_r+0xc>

0800794c <memmove>:
 800794c:	4288      	cmp	r0, r1
 800794e:	b510      	push	{r4, lr}
 8007950:	eb01 0402 	add.w	r4, r1, r2
 8007954:	d902      	bls.n	800795c <memmove+0x10>
 8007956:	4284      	cmp	r4, r0
 8007958:	4623      	mov	r3, r4
 800795a:	d807      	bhi.n	800796c <memmove+0x20>
 800795c:	1e43      	subs	r3, r0, #1
 800795e:	42a1      	cmp	r1, r4
 8007960:	d008      	beq.n	8007974 <memmove+0x28>
 8007962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800796a:	e7f8      	b.n	800795e <memmove+0x12>
 800796c:	4402      	add	r2, r0
 800796e:	4601      	mov	r1, r0
 8007970:	428a      	cmp	r2, r1
 8007972:	d100      	bne.n	8007976 <memmove+0x2a>
 8007974:	bd10      	pop	{r4, pc}
 8007976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800797a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800797e:	e7f7      	b.n	8007970 <memmove+0x24>

08007980 <strncmp>:
 8007980:	b510      	push	{r4, lr}
 8007982:	b16a      	cbz	r2, 80079a0 <strncmp+0x20>
 8007984:	3901      	subs	r1, #1
 8007986:	1884      	adds	r4, r0, r2
 8007988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800798c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007990:	429a      	cmp	r2, r3
 8007992:	d103      	bne.n	800799c <strncmp+0x1c>
 8007994:	42a0      	cmp	r0, r4
 8007996:	d001      	beq.n	800799c <strncmp+0x1c>
 8007998:	2a00      	cmp	r2, #0
 800799a:	d1f5      	bne.n	8007988 <strncmp+0x8>
 800799c:	1ad0      	subs	r0, r2, r3
 800799e:	bd10      	pop	{r4, pc}
 80079a0:	4610      	mov	r0, r2
 80079a2:	e7fc      	b.n	800799e <strncmp+0x1e>

080079a4 <_sbrk_r>:
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	4d06      	ldr	r5, [pc, #24]	@ (80079c0 <_sbrk_r+0x1c>)
 80079a8:	2300      	movs	r3, #0
 80079aa:	4604      	mov	r4, r0
 80079ac:	4608      	mov	r0, r1
 80079ae:	602b      	str	r3, [r5, #0]
 80079b0:	f7f9 ffa0 	bl	80018f4 <_sbrk>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d102      	bne.n	80079be <_sbrk_r+0x1a>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	b103      	cbz	r3, 80079be <_sbrk_r+0x1a>
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	bd38      	pop	{r3, r4, r5, pc}
 80079c0:	20000ac8 	.word	0x20000ac8

080079c4 <memcpy>:
 80079c4:	440a      	add	r2, r1
 80079c6:	4291      	cmp	r1, r2
 80079c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80079cc:	d100      	bne.n	80079d0 <memcpy+0xc>
 80079ce:	4770      	bx	lr
 80079d0:	b510      	push	{r4, lr}
 80079d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079da:	4291      	cmp	r1, r2
 80079dc:	d1f9      	bne.n	80079d2 <memcpy+0xe>
 80079de:	bd10      	pop	{r4, pc}

080079e0 <nan>:
 80079e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80079e8 <nan+0x8>
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	00000000 	.word	0x00000000
 80079ec:	7ff80000 	.word	0x7ff80000

080079f0 <__assert_func>:
 80079f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079f2:	4614      	mov	r4, r2
 80079f4:	461a      	mov	r2, r3
 80079f6:	4b09      	ldr	r3, [pc, #36]	@ (8007a1c <__assert_func+0x2c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4605      	mov	r5, r0
 80079fc:	68d8      	ldr	r0, [r3, #12]
 80079fe:	b954      	cbnz	r4, 8007a16 <__assert_func+0x26>
 8007a00:	4b07      	ldr	r3, [pc, #28]	@ (8007a20 <__assert_func+0x30>)
 8007a02:	461c      	mov	r4, r3
 8007a04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a08:	9100      	str	r1, [sp, #0]
 8007a0a:	462b      	mov	r3, r5
 8007a0c:	4905      	ldr	r1, [pc, #20]	@ (8007a24 <__assert_func+0x34>)
 8007a0e:	f000 fba7 	bl	8008160 <fiprintf>
 8007a12:	f000 fbb7 	bl	8008184 <abort>
 8007a16:	4b04      	ldr	r3, [pc, #16]	@ (8007a28 <__assert_func+0x38>)
 8007a18:	e7f4      	b.n	8007a04 <__assert_func+0x14>
 8007a1a:	bf00      	nop
 8007a1c:	2000001c 	.word	0x2000001c
 8007a20:	08008ae5 	.word	0x08008ae5
 8007a24:	08008ab7 	.word	0x08008ab7
 8007a28:	08008aaa 	.word	0x08008aaa

08007a2c <_calloc_r>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	fba1 5402 	umull	r5, r4, r1, r2
 8007a32:	b93c      	cbnz	r4, 8007a44 <_calloc_r+0x18>
 8007a34:	4629      	mov	r1, r5
 8007a36:	f7fe f9c3 	bl	8005dc0 <_malloc_r>
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	b928      	cbnz	r0, 8007a4a <_calloc_r+0x1e>
 8007a3e:	2600      	movs	r6, #0
 8007a40:	4630      	mov	r0, r6
 8007a42:	bd70      	pop	{r4, r5, r6, pc}
 8007a44:	220c      	movs	r2, #12
 8007a46:	6002      	str	r2, [r0, #0]
 8007a48:	e7f9      	b.n	8007a3e <_calloc_r+0x12>
 8007a4a:	462a      	mov	r2, r5
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	f7fd fa6e 	bl	8004f2e <memset>
 8007a52:	e7f5      	b.n	8007a40 <_calloc_r+0x14>

08007a54 <rshift>:
 8007a54:	6903      	ldr	r3, [r0, #16]
 8007a56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007a5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007a62:	f100 0414 	add.w	r4, r0, #20
 8007a66:	dd45      	ble.n	8007af4 <rshift+0xa0>
 8007a68:	f011 011f 	ands.w	r1, r1, #31
 8007a6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007a70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007a74:	d10c      	bne.n	8007a90 <rshift+0x3c>
 8007a76:	f100 0710 	add.w	r7, r0, #16
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	42b1      	cmp	r1, r6
 8007a7e:	d334      	bcc.n	8007aea <rshift+0x96>
 8007a80:	1a9b      	subs	r3, r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	1eea      	subs	r2, r5, #3
 8007a86:	4296      	cmp	r6, r2
 8007a88:	bf38      	it	cc
 8007a8a:	2300      	movcc	r3, #0
 8007a8c:	4423      	add	r3, r4
 8007a8e:	e015      	b.n	8007abc <rshift+0x68>
 8007a90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007a94:	f1c1 0820 	rsb	r8, r1, #32
 8007a98:	40cf      	lsrs	r7, r1
 8007a9a:	f105 0e04 	add.w	lr, r5, #4
 8007a9e:	46a1      	mov	r9, r4
 8007aa0:	4576      	cmp	r6, lr
 8007aa2:	46f4      	mov	ip, lr
 8007aa4:	d815      	bhi.n	8007ad2 <rshift+0x7e>
 8007aa6:	1a9a      	subs	r2, r3, r2
 8007aa8:	0092      	lsls	r2, r2, #2
 8007aaa:	3a04      	subs	r2, #4
 8007aac:	3501      	adds	r5, #1
 8007aae:	42ae      	cmp	r6, r5
 8007ab0:	bf38      	it	cc
 8007ab2:	2200      	movcc	r2, #0
 8007ab4:	18a3      	adds	r3, r4, r2
 8007ab6:	50a7      	str	r7, [r4, r2]
 8007ab8:	b107      	cbz	r7, 8007abc <rshift+0x68>
 8007aba:	3304      	adds	r3, #4
 8007abc:	1b1a      	subs	r2, r3, r4
 8007abe:	42a3      	cmp	r3, r4
 8007ac0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007ac4:	bf08      	it	eq
 8007ac6:	2300      	moveq	r3, #0
 8007ac8:	6102      	str	r2, [r0, #16]
 8007aca:	bf08      	it	eq
 8007acc:	6143      	streq	r3, [r0, #20]
 8007ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ad2:	f8dc c000 	ldr.w	ip, [ip]
 8007ad6:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ada:	ea4c 0707 	orr.w	r7, ip, r7
 8007ade:	f849 7b04 	str.w	r7, [r9], #4
 8007ae2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ae6:	40cf      	lsrs	r7, r1
 8007ae8:	e7da      	b.n	8007aa0 <rshift+0x4c>
 8007aea:	f851 cb04 	ldr.w	ip, [r1], #4
 8007aee:	f847 cf04 	str.w	ip, [r7, #4]!
 8007af2:	e7c3      	b.n	8007a7c <rshift+0x28>
 8007af4:	4623      	mov	r3, r4
 8007af6:	e7e1      	b.n	8007abc <rshift+0x68>

08007af8 <__hexdig_fun>:
 8007af8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007afc:	2b09      	cmp	r3, #9
 8007afe:	d802      	bhi.n	8007b06 <__hexdig_fun+0xe>
 8007b00:	3820      	subs	r0, #32
 8007b02:	b2c0      	uxtb	r0, r0
 8007b04:	4770      	bx	lr
 8007b06:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007b0a:	2b05      	cmp	r3, #5
 8007b0c:	d801      	bhi.n	8007b12 <__hexdig_fun+0x1a>
 8007b0e:	3847      	subs	r0, #71	@ 0x47
 8007b10:	e7f7      	b.n	8007b02 <__hexdig_fun+0xa>
 8007b12:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007b16:	2b05      	cmp	r3, #5
 8007b18:	d801      	bhi.n	8007b1e <__hexdig_fun+0x26>
 8007b1a:	3827      	subs	r0, #39	@ 0x27
 8007b1c:	e7f1      	b.n	8007b02 <__hexdig_fun+0xa>
 8007b1e:	2000      	movs	r0, #0
 8007b20:	4770      	bx	lr
	...

08007b24 <__gethex>:
 8007b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b28:	b085      	sub	sp, #20
 8007b2a:	468a      	mov	sl, r1
 8007b2c:	9302      	str	r3, [sp, #8]
 8007b2e:	680b      	ldr	r3, [r1, #0]
 8007b30:	9001      	str	r0, [sp, #4]
 8007b32:	4690      	mov	r8, r2
 8007b34:	1c9c      	adds	r4, r3, #2
 8007b36:	46a1      	mov	r9, r4
 8007b38:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007b3c:	2830      	cmp	r0, #48	@ 0x30
 8007b3e:	d0fa      	beq.n	8007b36 <__gethex+0x12>
 8007b40:	eba9 0303 	sub.w	r3, r9, r3
 8007b44:	f1a3 0b02 	sub.w	fp, r3, #2
 8007b48:	f7ff ffd6 	bl	8007af8 <__hexdig_fun>
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d168      	bne.n	8007c24 <__gethex+0x100>
 8007b52:	49a0      	ldr	r1, [pc, #640]	@ (8007dd4 <__gethex+0x2b0>)
 8007b54:	2201      	movs	r2, #1
 8007b56:	4648      	mov	r0, r9
 8007b58:	f7ff ff12 	bl	8007980 <strncmp>
 8007b5c:	4607      	mov	r7, r0
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d167      	bne.n	8007c32 <__gethex+0x10e>
 8007b62:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007b66:	4626      	mov	r6, r4
 8007b68:	f7ff ffc6 	bl	8007af8 <__hexdig_fun>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	d062      	beq.n	8007c36 <__gethex+0x112>
 8007b70:	4623      	mov	r3, r4
 8007b72:	7818      	ldrb	r0, [r3, #0]
 8007b74:	2830      	cmp	r0, #48	@ 0x30
 8007b76:	4699      	mov	r9, r3
 8007b78:	f103 0301 	add.w	r3, r3, #1
 8007b7c:	d0f9      	beq.n	8007b72 <__gethex+0x4e>
 8007b7e:	f7ff ffbb 	bl	8007af8 <__hexdig_fun>
 8007b82:	fab0 f580 	clz	r5, r0
 8007b86:	096d      	lsrs	r5, r5, #5
 8007b88:	f04f 0b01 	mov.w	fp, #1
 8007b8c:	464a      	mov	r2, r9
 8007b8e:	4616      	mov	r6, r2
 8007b90:	3201      	adds	r2, #1
 8007b92:	7830      	ldrb	r0, [r6, #0]
 8007b94:	f7ff ffb0 	bl	8007af8 <__hexdig_fun>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d1f8      	bne.n	8007b8e <__gethex+0x6a>
 8007b9c:	498d      	ldr	r1, [pc, #564]	@ (8007dd4 <__gethex+0x2b0>)
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f7ff feed 	bl	8007980 <strncmp>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d13f      	bne.n	8007c2a <__gethex+0x106>
 8007baa:	b944      	cbnz	r4, 8007bbe <__gethex+0x9a>
 8007bac:	1c74      	adds	r4, r6, #1
 8007bae:	4622      	mov	r2, r4
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	3201      	adds	r2, #1
 8007bb4:	7830      	ldrb	r0, [r6, #0]
 8007bb6:	f7ff ff9f 	bl	8007af8 <__hexdig_fun>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d1f8      	bne.n	8007bb0 <__gethex+0x8c>
 8007bbe:	1ba4      	subs	r4, r4, r6
 8007bc0:	00a7      	lsls	r7, r4, #2
 8007bc2:	7833      	ldrb	r3, [r6, #0]
 8007bc4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007bc8:	2b50      	cmp	r3, #80	@ 0x50
 8007bca:	d13e      	bne.n	8007c4a <__gethex+0x126>
 8007bcc:	7873      	ldrb	r3, [r6, #1]
 8007bce:	2b2b      	cmp	r3, #43	@ 0x2b
 8007bd0:	d033      	beq.n	8007c3a <__gethex+0x116>
 8007bd2:	2b2d      	cmp	r3, #45	@ 0x2d
 8007bd4:	d034      	beq.n	8007c40 <__gethex+0x11c>
 8007bd6:	1c71      	adds	r1, r6, #1
 8007bd8:	2400      	movs	r4, #0
 8007bda:	7808      	ldrb	r0, [r1, #0]
 8007bdc:	f7ff ff8c 	bl	8007af8 <__hexdig_fun>
 8007be0:	1e43      	subs	r3, r0, #1
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b18      	cmp	r3, #24
 8007be6:	d830      	bhi.n	8007c4a <__gethex+0x126>
 8007be8:	f1a0 0210 	sub.w	r2, r0, #16
 8007bec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007bf0:	f7ff ff82 	bl	8007af8 <__hexdig_fun>
 8007bf4:	f100 3cff 	add.w	ip, r0, #4294967295
 8007bf8:	fa5f fc8c 	uxtb.w	ip, ip
 8007bfc:	f1bc 0f18 	cmp.w	ip, #24
 8007c00:	f04f 030a 	mov.w	r3, #10
 8007c04:	d91e      	bls.n	8007c44 <__gethex+0x120>
 8007c06:	b104      	cbz	r4, 8007c0a <__gethex+0xe6>
 8007c08:	4252      	negs	r2, r2
 8007c0a:	4417      	add	r7, r2
 8007c0c:	f8ca 1000 	str.w	r1, [sl]
 8007c10:	b1ed      	cbz	r5, 8007c4e <__gethex+0x12a>
 8007c12:	f1bb 0f00 	cmp.w	fp, #0
 8007c16:	bf0c      	ite	eq
 8007c18:	2506      	moveq	r5, #6
 8007c1a:	2500      	movne	r5, #0
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	b005      	add	sp, #20
 8007c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c24:	2500      	movs	r5, #0
 8007c26:	462c      	mov	r4, r5
 8007c28:	e7b0      	b.n	8007b8c <__gethex+0x68>
 8007c2a:	2c00      	cmp	r4, #0
 8007c2c:	d1c7      	bne.n	8007bbe <__gethex+0x9a>
 8007c2e:	4627      	mov	r7, r4
 8007c30:	e7c7      	b.n	8007bc2 <__gethex+0x9e>
 8007c32:	464e      	mov	r6, r9
 8007c34:	462f      	mov	r7, r5
 8007c36:	2501      	movs	r5, #1
 8007c38:	e7c3      	b.n	8007bc2 <__gethex+0x9e>
 8007c3a:	2400      	movs	r4, #0
 8007c3c:	1cb1      	adds	r1, r6, #2
 8007c3e:	e7cc      	b.n	8007bda <__gethex+0xb6>
 8007c40:	2401      	movs	r4, #1
 8007c42:	e7fb      	b.n	8007c3c <__gethex+0x118>
 8007c44:	fb03 0002 	mla	r0, r3, r2, r0
 8007c48:	e7ce      	b.n	8007be8 <__gethex+0xc4>
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	e7de      	b.n	8007c0c <__gethex+0xe8>
 8007c4e:	eba6 0309 	sub.w	r3, r6, r9
 8007c52:	3b01      	subs	r3, #1
 8007c54:	4629      	mov	r1, r5
 8007c56:	2b07      	cmp	r3, #7
 8007c58:	dc0a      	bgt.n	8007c70 <__gethex+0x14c>
 8007c5a:	9801      	ldr	r0, [sp, #4]
 8007c5c:	f7fe f93c 	bl	8005ed8 <_Balloc>
 8007c60:	4604      	mov	r4, r0
 8007c62:	b940      	cbnz	r0, 8007c76 <__gethex+0x152>
 8007c64:	4b5c      	ldr	r3, [pc, #368]	@ (8007dd8 <__gethex+0x2b4>)
 8007c66:	4602      	mov	r2, r0
 8007c68:	21e4      	movs	r1, #228	@ 0xe4
 8007c6a:	485c      	ldr	r0, [pc, #368]	@ (8007ddc <__gethex+0x2b8>)
 8007c6c:	f7ff fec0 	bl	80079f0 <__assert_func>
 8007c70:	3101      	adds	r1, #1
 8007c72:	105b      	asrs	r3, r3, #1
 8007c74:	e7ef      	b.n	8007c56 <__gethex+0x132>
 8007c76:	f100 0a14 	add.w	sl, r0, #20
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	4655      	mov	r5, sl
 8007c7e:	469b      	mov	fp, r3
 8007c80:	45b1      	cmp	r9, r6
 8007c82:	d337      	bcc.n	8007cf4 <__gethex+0x1d0>
 8007c84:	f845 bb04 	str.w	fp, [r5], #4
 8007c88:	eba5 050a 	sub.w	r5, r5, sl
 8007c8c:	10ad      	asrs	r5, r5, #2
 8007c8e:	6125      	str	r5, [r4, #16]
 8007c90:	4658      	mov	r0, fp
 8007c92:	f7fe fa13 	bl	80060bc <__hi0bits>
 8007c96:	016d      	lsls	r5, r5, #5
 8007c98:	f8d8 6000 	ldr.w	r6, [r8]
 8007c9c:	1a2d      	subs	r5, r5, r0
 8007c9e:	42b5      	cmp	r5, r6
 8007ca0:	dd54      	ble.n	8007d4c <__gethex+0x228>
 8007ca2:	1bad      	subs	r5, r5, r6
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f7fe fda7 	bl	80067fa <__any_on>
 8007cac:	4681      	mov	r9, r0
 8007cae:	b178      	cbz	r0, 8007cd0 <__gethex+0x1ac>
 8007cb0:	1e6b      	subs	r3, r5, #1
 8007cb2:	1159      	asrs	r1, r3, #5
 8007cb4:	f003 021f 	and.w	r2, r3, #31
 8007cb8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007cbc:	f04f 0901 	mov.w	r9, #1
 8007cc0:	fa09 f202 	lsl.w	r2, r9, r2
 8007cc4:	420a      	tst	r2, r1
 8007cc6:	d003      	beq.n	8007cd0 <__gethex+0x1ac>
 8007cc8:	454b      	cmp	r3, r9
 8007cca:	dc36      	bgt.n	8007d3a <__gethex+0x216>
 8007ccc:	f04f 0902 	mov.w	r9, #2
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f7ff febe 	bl	8007a54 <rshift>
 8007cd8:	442f      	add	r7, r5
 8007cda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cde:	42bb      	cmp	r3, r7
 8007ce0:	da42      	bge.n	8007d68 <__gethex+0x244>
 8007ce2:	9801      	ldr	r0, [sp, #4]
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	f7fe f937 	bl	8005f58 <_Bfree>
 8007cea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cec:	2300      	movs	r3, #0
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	25a3      	movs	r5, #163	@ 0xa3
 8007cf2:	e793      	b.n	8007c1c <__gethex+0xf8>
 8007cf4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007cf8:	2a2e      	cmp	r2, #46	@ 0x2e
 8007cfa:	d012      	beq.n	8007d22 <__gethex+0x1fe>
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	d104      	bne.n	8007d0a <__gethex+0x1e6>
 8007d00:	f845 bb04 	str.w	fp, [r5], #4
 8007d04:	f04f 0b00 	mov.w	fp, #0
 8007d08:	465b      	mov	r3, fp
 8007d0a:	7830      	ldrb	r0, [r6, #0]
 8007d0c:	9303      	str	r3, [sp, #12]
 8007d0e:	f7ff fef3 	bl	8007af8 <__hexdig_fun>
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	f000 000f 	and.w	r0, r0, #15
 8007d18:	4098      	lsls	r0, r3
 8007d1a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007d1e:	3304      	adds	r3, #4
 8007d20:	e7ae      	b.n	8007c80 <__gethex+0x15c>
 8007d22:	45b1      	cmp	r9, r6
 8007d24:	d8ea      	bhi.n	8007cfc <__gethex+0x1d8>
 8007d26:	492b      	ldr	r1, [pc, #172]	@ (8007dd4 <__gethex+0x2b0>)
 8007d28:	9303      	str	r3, [sp, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f7ff fe27 	bl	8007980 <strncmp>
 8007d32:	9b03      	ldr	r3, [sp, #12]
 8007d34:	2800      	cmp	r0, #0
 8007d36:	d1e1      	bne.n	8007cfc <__gethex+0x1d8>
 8007d38:	e7a2      	b.n	8007c80 <__gethex+0x15c>
 8007d3a:	1ea9      	subs	r1, r5, #2
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f7fe fd5c 	bl	80067fa <__any_on>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d0c2      	beq.n	8007ccc <__gethex+0x1a8>
 8007d46:	f04f 0903 	mov.w	r9, #3
 8007d4a:	e7c1      	b.n	8007cd0 <__gethex+0x1ac>
 8007d4c:	da09      	bge.n	8007d62 <__gethex+0x23e>
 8007d4e:	1b75      	subs	r5, r6, r5
 8007d50:	4621      	mov	r1, r4
 8007d52:	9801      	ldr	r0, [sp, #4]
 8007d54:	462a      	mov	r2, r5
 8007d56:	f7fe fb17 	bl	8006388 <__lshift>
 8007d5a:	1b7f      	subs	r7, r7, r5
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	f100 0a14 	add.w	sl, r0, #20
 8007d62:	f04f 0900 	mov.w	r9, #0
 8007d66:	e7b8      	b.n	8007cda <__gethex+0x1b6>
 8007d68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007d6c:	42bd      	cmp	r5, r7
 8007d6e:	dd6f      	ble.n	8007e50 <__gethex+0x32c>
 8007d70:	1bed      	subs	r5, r5, r7
 8007d72:	42ae      	cmp	r6, r5
 8007d74:	dc34      	bgt.n	8007de0 <__gethex+0x2bc>
 8007d76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d022      	beq.n	8007dc4 <__gethex+0x2a0>
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d024      	beq.n	8007dcc <__gethex+0x2a8>
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d115      	bne.n	8007db2 <__gethex+0x28e>
 8007d86:	42ae      	cmp	r6, r5
 8007d88:	d113      	bne.n	8007db2 <__gethex+0x28e>
 8007d8a:	2e01      	cmp	r6, #1
 8007d8c:	d10b      	bne.n	8007da6 <__gethex+0x282>
 8007d8e:	9a02      	ldr	r2, [sp, #8]
 8007d90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	2301      	movs	r3, #1
 8007d98:	6123      	str	r3, [r4, #16]
 8007d9a:	f8ca 3000 	str.w	r3, [sl]
 8007d9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007da0:	2562      	movs	r5, #98	@ 0x62
 8007da2:	601c      	str	r4, [r3, #0]
 8007da4:	e73a      	b.n	8007c1c <__gethex+0xf8>
 8007da6:	1e71      	subs	r1, r6, #1
 8007da8:	4620      	mov	r0, r4
 8007daa:	f7fe fd26 	bl	80067fa <__any_on>
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d1ed      	bne.n	8007d8e <__gethex+0x26a>
 8007db2:	9801      	ldr	r0, [sp, #4]
 8007db4:	4621      	mov	r1, r4
 8007db6:	f7fe f8cf 	bl	8005f58 <_Bfree>
 8007dba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	6013      	str	r3, [r2, #0]
 8007dc0:	2550      	movs	r5, #80	@ 0x50
 8007dc2:	e72b      	b.n	8007c1c <__gethex+0xf8>
 8007dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1f3      	bne.n	8007db2 <__gethex+0x28e>
 8007dca:	e7e0      	b.n	8007d8e <__gethex+0x26a>
 8007dcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1dd      	bne.n	8007d8e <__gethex+0x26a>
 8007dd2:	e7ee      	b.n	8007db2 <__gethex+0x28e>
 8007dd4:	08008938 	.word	0x08008938
 8007dd8:	080087cd 	.word	0x080087cd
 8007ddc:	08008ae6 	.word	0x08008ae6
 8007de0:	1e6f      	subs	r7, r5, #1
 8007de2:	f1b9 0f00 	cmp.w	r9, #0
 8007de6:	d130      	bne.n	8007e4a <__gethex+0x326>
 8007de8:	b127      	cbz	r7, 8007df4 <__gethex+0x2d0>
 8007dea:	4639      	mov	r1, r7
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7fe fd04 	bl	80067fa <__any_on>
 8007df2:	4681      	mov	r9, r0
 8007df4:	117a      	asrs	r2, r7, #5
 8007df6:	2301      	movs	r3, #1
 8007df8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007dfc:	f007 071f 	and.w	r7, r7, #31
 8007e00:	40bb      	lsls	r3, r7
 8007e02:	4213      	tst	r3, r2
 8007e04:	4629      	mov	r1, r5
 8007e06:	4620      	mov	r0, r4
 8007e08:	bf18      	it	ne
 8007e0a:	f049 0902 	orrne.w	r9, r9, #2
 8007e0e:	f7ff fe21 	bl	8007a54 <rshift>
 8007e12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007e16:	1b76      	subs	r6, r6, r5
 8007e18:	2502      	movs	r5, #2
 8007e1a:	f1b9 0f00 	cmp.w	r9, #0
 8007e1e:	d047      	beq.n	8007eb0 <__gethex+0x38c>
 8007e20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d015      	beq.n	8007e54 <__gethex+0x330>
 8007e28:	2b03      	cmp	r3, #3
 8007e2a:	d017      	beq.n	8007e5c <__gethex+0x338>
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d109      	bne.n	8007e44 <__gethex+0x320>
 8007e30:	f019 0f02 	tst.w	r9, #2
 8007e34:	d006      	beq.n	8007e44 <__gethex+0x320>
 8007e36:	f8da 3000 	ldr.w	r3, [sl]
 8007e3a:	ea49 0903 	orr.w	r9, r9, r3
 8007e3e:	f019 0f01 	tst.w	r9, #1
 8007e42:	d10e      	bne.n	8007e62 <__gethex+0x33e>
 8007e44:	f045 0510 	orr.w	r5, r5, #16
 8007e48:	e032      	b.n	8007eb0 <__gethex+0x38c>
 8007e4a:	f04f 0901 	mov.w	r9, #1
 8007e4e:	e7d1      	b.n	8007df4 <__gethex+0x2d0>
 8007e50:	2501      	movs	r5, #1
 8007e52:	e7e2      	b.n	8007e1a <__gethex+0x2f6>
 8007e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e56:	f1c3 0301 	rsb	r3, r3, #1
 8007e5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0f0      	beq.n	8007e44 <__gethex+0x320>
 8007e62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007e66:	f104 0314 	add.w	r3, r4, #20
 8007e6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007e6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007e72:	f04f 0c00 	mov.w	ip, #0
 8007e76:	4618      	mov	r0, r3
 8007e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007e80:	d01b      	beq.n	8007eba <__gethex+0x396>
 8007e82:	3201      	adds	r2, #1
 8007e84:	6002      	str	r2, [r0, #0]
 8007e86:	2d02      	cmp	r5, #2
 8007e88:	f104 0314 	add.w	r3, r4, #20
 8007e8c:	d13c      	bne.n	8007f08 <__gethex+0x3e4>
 8007e8e:	f8d8 2000 	ldr.w	r2, [r8]
 8007e92:	3a01      	subs	r2, #1
 8007e94:	42b2      	cmp	r2, r6
 8007e96:	d109      	bne.n	8007eac <__gethex+0x388>
 8007e98:	1171      	asrs	r1, r6, #5
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ea0:	f006 061f 	and.w	r6, r6, #31
 8007ea4:	fa02 f606 	lsl.w	r6, r2, r6
 8007ea8:	421e      	tst	r6, r3
 8007eaa:	d13a      	bne.n	8007f22 <__gethex+0x3fe>
 8007eac:	f045 0520 	orr.w	r5, r5, #32
 8007eb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007eb2:	601c      	str	r4, [r3, #0]
 8007eb4:	9b02      	ldr	r3, [sp, #8]
 8007eb6:	601f      	str	r7, [r3, #0]
 8007eb8:	e6b0      	b.n	8007c1c <__gethex+0xf8>
 8007eba:	4299      	cmp	r1, r3
 8007ebc:	f843 cc04 	str.w	ip, [r3, #-4]
 8007ec0:	d8d9      	bhi.n	8007e76 <__gethex+0x352>
 8007ec2:	68a3      	ldr	r3, [r4, #8]
 8007ec4:	459b      	cmp	fp, r3
 8007ec6:	db17      	blt.n	8007ef8 <__gethex+0x3d4>
 8007ec8:	6861      	ldr	r1, [r4, #4]
 8007eca:	9801      	ldr	r0, [sp, #4]
 8007ecc:	3101      	adds	r1, #1
 8007ece:	f7fe f803 	bl	8005ed8 <_Balloc>
 8007ed2:	4681      	mov	r9, r0
 8007ed4:	b918      	cbnz	r0, 8007ede <__gethex+0x3ba>
 8007ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8007f40 <__gethex+0x41c>)
 8007ed8:	4602      	mov	r2, r0
 8007eda:	2184      	movs	r1, #132	@ 0x84
 8007edc:	e6c5      	b.n	8007c6a <__gethex+0x146>
 8007ede:	6922      	ldr	r2, [r4, #16]
 8007ee0:	3202      	adds	r2, #2
 8007ee2:	f104 010c 	add.w	r1, r4, #12
 8007ee6:	0092      	lsls	r2, r2, #2
 8007ee8:	300c      	adds	r0, #12
 8007eea:	f7ff fd6b 	bl	80079c4 <memcpy>
 8007eee:	4621      	mov	r1, r4
 8007ef0:	9801      	ldr	r0, [sp, #4]
 8007ef2:	f7fe f831 	bl	8005f58 <_Bfree>
 8007ef6:	464c      	mov	r4, r9
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f00:	6122      	str	r2, [r4, #16]
 8007f02:	2201      	movs	r2, #1
 8007f04:	615a      	str	r2, [r3, #20]
 8007f06:	e7be      	b.n	8007e86 <__gethex+0x362>
 8007f08:	6922      	ldr	r2, [r4, #16]
 8007f0a:	455a      	cmp	r2, fp
 8007f0c:	dd0b      	ble.n	8007f26 <__gethex+0x402>
 8007f0e:	2101      	movs	r1, #1
 8007f10:	4620      	mov	r0, r4
 8007f12:	f7ff fd9f 	bl	8007a54 <rshift>
 8007f16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f1a:	3701      	adds	r7, #1
 8007f1c:	42bb      	cmp	r3, r7
 8007f1e:	f6ff aee0 	blt.w	8007ce2 <__gethex+0x1be>
 8007f22:	2501      	movs	r5, #1
 8007f24:	e7c2      	b.n	8007eac <__gethex+0x388>
 8007f26:	f016 061f 	ands.w	r6, r6, #31
 8007f2a:	d0fa      	beq.n	8007f22 <__gethex+0x3fe>
 8007f2c:	4453      	add	r3, sl
 8007f2e:	f1c6 0620 	rsb	r6, r6, #32
 8007f32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007f36:	f7fe f8c1 	bl	80060bc <__hi0bits>
 8007f3a:	42b0      	cmp	r0, r6
 8007f3c:	dbe7      	blt.n	8007f0e <__gethex+0x3ea>
 8007f3e:	e7f0      	b.n	8007f22 <__gethex+0x3fe>
 8007f40:	080087cd 	.word	0x080087cd

08007f44 <L_shift>:
 8007f44:	f1c2 0208 	rsb	r2, r2, #8
 8007f48:	0092      	lsls	r2, r2, #2
 8007f4a:	b570      	push	{r4, r5, r6, lr}
 8007f4c:	f1c2 0620 	rsb	r6, r2, #32
 8007f50:	6843      	ldr	r3, [r0, #4]
 8007f52:	6804      	ldr	r4, [r0, #0]
 8007f54:	fa03 f506 	lsl.w	r5, r3, r6
 8007f58:	432c      	orrs	r4, r5
 8007f5a:	40d3      	lsrs	r3, r2
 8007f5c:	6004      	str	r4, [r0, #0]
 8007f5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007f62:	4288      	cmp	r0, r1
 8007f64:	d3f4      	bcc.n	8007f50 <L_shift+0xc>
 8007f66:	bd70      	pop	{r4, r5, r6, pc}

08007f68 <__match>:
 8007f68:	b530      	push	{r4, r5, lr}
 8007f6a:	6803      	ldr	r3, [r0, #0]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f72:	b914      	cbnz	r4, 8007f7a <__match+0x12>
 8007f74:	6003      	str	r3, [r0, #0]
 8007f76:	2001      	movs	r0, #1
 8007f78:	bd30      	pop	{r4, r5, pc}
 8007f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007f82:	2d19      	cmp	r5, #25
 8007f84:	bf98      	it	ls
 8007f86:	3220      	addls	r2, #32
 8007f88:	42a2      	cmp	r2, r4
 8007f8a:	d0f0      	beq.n	8007f6e <__match+0x6>
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	e7f3      	b.n	8007f78 <__match+0x10>

08007f90 <__hexnan>:
 8007f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f94:	680b      	ldr	r3, [r1, #0]
 8007f96:	6801      	ldr	r1, [r0, #0]
 8007f98:	115e      	asrs	r6, r3, #5
 8007f9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007f9e:	f013 031f 	ands.w	r3, r3, #31
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	bf18      	it	ne
 8007fa6:	3604      	addne	r6, #4
 8007fa8:	2500      	movs	r5, #0
 8007faa:	1f37      	subs	r7, r6, #4
 8007fac:	4682      	mov	sl, r0
 8007fae:	4690      	mov	r8, r2
 8007fb0:	9301      	str	r3, [sp, #4]
 8007fb2:	f846 5c04 	str.w	r5, [r6, #-4]
 8007fb6:	46b9      	mov	r9, r7
 8007fb8:	463c      	mov	r4, r7
 8007fba:	9502      	str	r5, [sp, #8]
 8007fbc:	46ab      	mov	fp, r5
 8007fbe:	784a      	ldrb	r2, [r1, #1]
 8007fc0:	1c4b      	adds	r3, r1, #1
 8007fc2:	9303      	str	r3, [sp, #12]
 8007fc4:	b342      	cbz	r2, 8008018 <__hexnan+0x88>
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	9105      	str	r1, [sp, #20]
 8007fca:	9204      	str	r2, [sp, #16]
 8007fcc:	f7ff fd94 	bl	8007af8 <__hexdig_fun>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d151      	bne.n	8008078 <__hexnan+0xe8>
 8007fd4:	9a04      	ldr	r2, [sp, #16]
 8007fd6:	9905      	ldr	r1, [sp, #20]
 8007fd8:	2a20      	cmp	r2, #32
 8007fda:	d818      	bhi.n	800800e <__hexnan+0x7e>
 8007fdc:	9b02      	ldr	r3, [sp, #8]
 8007fde:	459b      	cmp	fp, r3
 8007fe0:	dd13      	ble.n	800800a <__hexnan+0x7a>
 8007fe2:	454c      	cmp	r4, r9
 8007fe4:	d206      	bcs.n	8007ff4 <__hexnan+0x64>
 8007fe6:	2d07      	cmp	r5, #7
 8007fe8:	dc04      	bgt.n	8007ff4 <__hexnan+0x64>
 8007fea:	462a      	mov	r2, r5
 8007fec:	4649      	mov	r1, r9
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f7ff ffa8 	bl	8007f44 <L_shift>
 8007ff4:	4544      	cmp	r4, r8
 8007ff6:	d952      	bls.n	800809e <__hexnan+0x10e>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f1a4 0904 	sub.w	r9, r4, #4
 8007ffe:	f844 3c04 	str.w	r3, [r4, #-4]
 8008002:	f8cd b008 	str.w	fp, [sp, #8]
 8008006:	464c      	mov	r4, r9
 8008008:	461d      	mov	r5, r3
 800800a:	9903      	ldr	r1, [sp, #12]
 800800c:	e7d7      	b.n	8007fbe <__hexnan+0x2e>
 800800e:	2a29      	cmp	r2, #41	@ 0x29
 8008010:	d157      	bne.n	80080c2 <__hexnan+0x132>
 8008012:	3102      	adds	r1, #2
 8008014:	f8ca 1000 	str.w	r1, [sl]
 8008018:	f1bb 0f00 	cmp.w	fp, #0
 800801c:	d051      	beq.n	80080c2 <__hexnan+0x132>
 800801e:	454c      	cmp	r4, r9
 8008020:	d206      	bcs.n	8008030 <__hexnan+0xa0>
 8008022:	2d07      	cmp	r5, #7
 8008024:	dc04      	bgt.n	8008030 <__hexnan+0xa0>
 8008026:	462a      	mov	r2, r5
 8008028:	4649      	mov	r1, r9
 800802a:	4620      	mov	r0, r4
 800802c:	f7ff ff8a 	bl	8007f44 <L_shift>
 8008030:	4544      	cmp	r4, r8
 8008032:	d936      	bls.n	80080a2 <__hexnan+0x112>
 8008034:	f1a8 0204 	sub.w	r2, r8, #4
 8008038:	4623      	mov	r3, r4
 800803a:	f853 1b04 	ldr.w	r1, [r3], #4
 800803e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008042:	429f      	cmp	r7, r3
 8008044:	d2f9      	bcs.n	800803a <__hexnan+0xaa>
 8008046:	1b3b      	subs	r3, r7, r4
 8008048:	f023 0303 	bic.w	r3, r3, #3
 800804c:	3304      	adds	r3, #4
 800804e:	3401      	adds	r4, #1
 8008050:	3e03      	subs	r6, #3
 8008052:	42b4      	cmp	r4, r6
 8008054:	bf88      	it	hi
 8008056:	2304      	movhi	r3, #4
 8008058:	4443      	add	r3, r8
 800805a:	2200      	movs	r2, #0
 800805c:	f843 2b04 	str.w	r2, [r3], #4
 8008060:	429f      	cmp	r7, r3
 8008062:	d2fb      	bcs.n	800805c <__hexnan+0xcc>
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	b91b      	cbnz	r3, 8008070 <__hexnan+0xe0>
 8008068:	4547      	cmp	r7, r8
 800806a:	d128      	bne.n	80080be <__hexnan+0x12e>
 800806c:	2301      	movs	r3, #1
 800806e:	603b      	str	r3, [r7, #0]
 8008070:	2005      	movs	r0, #5
 8008072:	b007      	add	sp, #28
 8008074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008078:	3501      	adds	r5, #1
 800807a:	2d08      	cmp	r5, #8
 800807c:	f10b 0b01 	add.w	fp, fp, #1
 8008080:	dd06      	ble.n	8008090 <__hexnan+0x100>
 8008082:	4544      	cmp	r4, r8
 8008084:	d9c1      	bls.n	800800a <__hexnan+0x7a>
 8008086:	2300      	movs	r3, #0
 8008088:	f844 3c04 	str.w	r3, [r4, #-4]
 800808c:	2501      	movs	r5, #1
 800808e:	3c04      	subs	r4, #4
 8008090:	6822      	ldr	r2, [r4, #0]
 8008092:	f000 000f 	and.w	r0, r0, #15
 8008096:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800809a:	6020      	str	r0, [r4, #0]
 800809c:	e7b5      	b.n	800800a <__hexnan+0x7a>
 800809e:	2508      	movs	r5, #8
 80080a0:	e7b3      	b.n	800800a <__hexnan+0x7a>
 80080a2:	9b01      	ldr	r3, [sp, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d0dd      	beq.n	8008064 <__hexnan+0xd4>
 80080a8:	f1c3 0320 	rsb	r3, r3, #32
 80080ac:	f04f 32ff 	mov.w	r2, #4294967295
 80080b0:	40da      	lsrs	r2, r3
 80080b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80080b6:	4013      	ands	r3, r2
 80080b8:	f846 3c04 	str.w	r3, [r6, #-4]
 80080bc:	e7d2      	b.n	8008064 <__hexnan+0xd4>
 80080be:	3f04      	subs	r7, #4
 80080c0:	e7d0      	b.n	8008064 <__hexnan+0xd4>
 80080c2:	2004      	movs	r0, #4
 80080c4:	e7d5      	b.n	8008072 <__hexnan+0xe2>

080080c6 <__ascii_mbtowc>:
 80080c6:	b082      	sub	sp, #8
 80080c8:	b901      	cbnz	r1, 80080cc <__ascii_mbtowc+0x6>
 80080ca:	a901      	add	r1, sp, #4
 80080cc:	b142      	cbz	r2, 80080e0 <__ascii_mbtowc+0x1a>
 80080ce:	b14b      	cbz	r3, 80080e4 <__ascii_mbtowc+0x1e>
 80080d0:	7813      	ldrb	r3, [r2, #0]
 80080d2:	600b      	str	r3, [r1, #0]
 80080d4:	7812      	ldrb	r2, [r2, #0]
 80080d6:	1e10      	subs	r0, r2, #0
 80080d8:	bf18      	it	ne
 80080da:	2001      	movne	r0, #1
 80080dc:	b002      	add	sp, #8
 80080de:	4770      	bx	lr
 80080e0:	4610      	mov	r0, r2
 80080e2:	e7fb      	b.n	80080dc <__ascii_mbtowc+0x16>
 80080e4:	f06f 0001 	mvn.w	r0, #1
 80080e8:	e7f8      	b.n	80080dc <__ascii_mbtowc+0x16>

080080ea <_realloc_r>:
 80080ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ee:	4680      	mov	r8, r0
 80080f0:	4615      	mov	r5, r2
 80080f2:	460c      	mov	r4, r1
 80080f4:	b921      	cbnz	r1, 8008100 <_realloc_r+0x16>
 80080f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080fa:	4611      	mov	r1, r2
 80080fc:	f7fd be60 	b.w	8005dc0 <_malloc_r>
 8008100:	b92a      	cbnz	r2, 800810e <_realloc_r+0x24>
 8008102:	f7fd fde9 	bl	8005cd8 <_free_r>
 8008106:	2400      	movs	r4, #0
 8008108:	4620      	mov	r0, r4
 800810a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800810e:	f000 f840 	bl	8008192 <_malloc_usable_size_r>
 8008112:	4285      	cmp	r5, r0
 8008114:	4606      	mov	r6, r0
 8008116:	d802      	bhi.n	800811e <_realloc_r+0x34>
 8008118:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800811c:	d8f4      	bhi.n	8008108 <_realloc_r+0x1e>
 800811e:	4629      	mov	r1, r5
 8008120:	4640      	mov	r0, r8
 8008122:	f7fd fe4d 	bl	8005dc0 <_malloc_r>
 8008126:	4607      	mov	r7, r0
 8008128:	2800      	cmp	r0, #0
 800812a:	d0ec      	beq.n	8008106 <_realloc_r+0x1c>
 800812c:	42b5      	cmp	r5, r6
 800812e:	462a      	mov	r2, r5
 8008130:	4621      	mov	r1, r4
 8008132:	bf28      	it	cs
 8008134:	4632      	movcs	r2, r6
 8008136:	f7ff fc45 	bl	80079c4 <memcpy>
 800813a:	4621      	mov	r1, r4
 800813c:	4640      	mov	r0, r8
 800813e:	f7fd fdcb 	bl	8005cd8 <_free_r>
 8008142:	463c      	mov	r4, r7
 8008144:	e7e0      	b.n	8008108 <_realloc_r+0x1e>

08008146 <__ascii_wctomb>:
 8008146:	4603      	mov	r3, r0
 8008148:	4608      	mov	r0, r1
 800814a:	b141      	cbz	r1, 800815e <__ascii_wctomb+0x18>
 800814c:	2aff      	cmp	r2, #255	@ 0xff
 800814e:	d904      	bls.n	800815a <__ascii_wctomb+0x14>
 8008150:	228a      	movs	r2, #138	@ 0x8a
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	f04f 30ff 	mov.w	r0, #4294967295
 8008158:	4770      	bx	lr
 800815a:	700a      	strb	r2, [r1, #0]
 800815c:	2001      	movs	r0, #1
 800815e:	4770      	bx	lr

08008160 <fiprintf>:
 8008160:	b40e      	push	{r1, r2, r3}
 8008162:	b503      	push	{r0, r1, lr}
 8008164:	4601      	mov	r1, r0
 8008166:	ab03      	add	r3, sp, #12
 8008168:	4805      	ldr	r0, [pc, #20]	@ (8008180 <fiprintf+0x20>)
 800816a:	f853 2b04 	ldr.w	r2, [r3], #4
 800816e:	6800      	ldr	r0, [r0, #0]
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	f000 f83f 	bl	80081f4 <_vfiprintf_r>
 8008176:	b002      	add	sp, #8
 8008178:	f85d eb04 	ldr.w	lr, [sp], #4
 800817c:	b003      	add	sp, #12
 800817e:	4770      	bx	lr
 8008180:	2000001c 	.word	0x2000001c

08008184 <abort>:
 8008184:	b508      	push	{r3, lr}
 8008186:	2006      	movs	r0, #6
 8008188:	f000 fa08 	bl	800859c <raise>
 800818c:	2001      	movs	r0, #1
 800818e:	f7f9 fb38 	bl	8001802 <_exit>

08008192 <_malloc_usable_size_r>:
 8008192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008196:	1f18      	subs	r0, r3, #4
 8008198:	2b00      	cmp	r3, #0
 800819a:	bfbc      	itt	lt
 800819c:	580b      	ldrlt	r3, [r1, r0]
 800819e:	18c0      	addlt	r0, r0, r3
 80081a0:	4770      	bx	lr

080081a2 <__sfputc_r>:
 80081a2:	6893      	ldr	r3, [r2, #8]
 80081a4:	3b01      	subs	r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	b410      	push	{r4}
 80081aa:	6093      	str	r3, [r2, #8]
 80081ac:	da08      	bge.n	80081c0 <__sfputc_r+0x1e>
 80081ae:	6994      	ldr	r4, [r2, #24]
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	db01      	blt.n	80081b8 <__sfputc_r+0x16>
 80081b4:	290a      	cmp	r1, #10
 80081b6:	d103      	bne.n	80081c0 <__sfputc_r+0x1e>
 80081b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081bc:	f000 b932 	b.w	8008424 <__swbuf_r>
 80081c0:	6813      	ldr	r3, [r2, #0]
 80081c2:	1c58      	adds	r0, r3, #1
 80081c4:	6010      	str	r0, [r2, #0]
 80081c6:	7019      	strb	r1, [r3, #0]
 80081c8:	4608      	mov	r0, r1
 80081ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <__sfputs_r>:
 80081d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d2:	4606      	mov	r6, r0
 80081d4:	460f      	mov	r7, r1
 80081d6:	4614      	mov	r4, r2
 80081d8:	18d5      	adds	r5, r2, r3
 80081da:	42ac      	cmp	r4, r5
 80081dc:	d101      	bne.n	80081e2 <__sfputs_r+0x12>
 80081de:	2000      	movs	r0, #0
 80081e0:	e007      	b.n	80081f2 <__sfputs_r+0x22>
 80081e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e6:	463a      	mov	r2, r7
 80081e8:	4630      	mov	r0, r6
 80081ea:	f7ff ffda 	bl	80081a2 <__sfputc_r>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d1f3      	bne.n	80081da <__sfputs_r+0xa>
 80081f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081f4 <_vfiprintf_r>:
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	460d      	mov	r5, r1
 80081fa:	b09d      	sub	sp, #116	@ 0x74
 80081fc:	4614      	mov	r4, r2
 80081fe:	4698      	mov	r8, r3
 8008200:	4606      	mov	r6, r0
 8008202:	b118      	cbz	r0, 800820c <_vfiprintf_r+0x18>
 8008204:	6a03      	ldr	r3, [r0, #32]
 8008206:	b90b      	cbnz	r3, 800820c <_vfiprintf_r+0x18>
 8008208:	f7fc fdf8 	bl	8004dfc <__sinit>
 800820c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800820e:	07d9      	lsls	r1, r3, #31
 8008210:	d405      	bmi.n	800821e <_vfiprintf_r+0x2a>
 8008212:	89ab      	ldrh	r3, [r5, #12]
 8008214:	059a      	lsls	r2, r3, #22
 8008216:	d402      	bmi.n	800821e <_vfiprintf_r+0x2a>
 8008218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800821a:	f7fc ff06 	bl	800502a <__retarget_lock_acquire_recursive>
 800821e:	89ab      	ldrh	r3, [r5, #12]
 8008220:	071b      	lsls	r3, r3, #28
 8008222:	d501      	bpl.n	8008228 <_vfiprintf_r+0x34>
 8008224:	692b      	ldr	r3, [r5, #16]
 8008226:	b99b      	cbnz	r3, 8008250 <_vfiprintf_r+0x5c>
 8008228:	4629      	mov	r1, r5
 800822a:	4630      	mov	r0, r6
 800822c:	f000 f938 	bl	80084a0 <__swsetup_r>
 8008230:	b170      	cbz	r0, 8008250 <_vfiprintf_r+0x5c>
 8008232:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008234:	07dc      	lsls	r4, r3, #31
 8008236:	d504      	bpl.n	8008242 <_vfiprintf_r+0x4e>
 8008238:	f04f 30ff 	mov.w	r0, #4294967295
 800823c:	b01d      	add	sp, #116	@ 0x74
 800823e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008242:	89ab      	ldrh	r3, [r5, #12]
 8008244:	0598      	lsls	r0, r3, #22
 8008246:	d4f7      	bmi.n	8008238 <_vfiprintf_r+0x44>
 8008248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800824a:	f7fc feef 	bl	800502c <__retarget_lock_release_recursive>
 800824e:	e7f3      	b.n	8008238 <_vfiprintf_r+0x44>
 8008250:	2300      	movs	r3, #0
 8008252:	9309      	str	r3, [sp, #36]	@ 0x24
 8008254:	2320      	movs	r3, #32
 8008256:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800825a:	f8cd 800c 	str.w	r8, [sp, #12]
 800825e:	2330      	movs	r3, #48	@ 0x30
 8008260:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008410 <_vfiprintf_r+0x21c>
 8008264:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008268:	f04f 0901 	mov.w	r9, #1
 800826c:	4623      	mov	r3, r4
 800826e:	469a      	mov	sl, r3
 8008270:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008274:	b10a      	cbz	r2, 800827a <_vfiprintf_r+0x86>
 8008276:	2a25      	cmp	r2, #37	@ 0x25
 8008278:	d1f9      	bne.n	800826e <_vfiprintf_r+0x7a>
 800827a:	ebba 0b04 	subs.w	fp, sl, r4
 800827e:	d00b      	beq.n	8008298 <_vfiprintf_r+0xa4>
 8008280:	465b      	mov	r3, fp
 8008282:	4622      	mov	r2, r4
 8008284:	4629      	mov	r1, r5
 8008286:	4630      	mov	r0, r6
 8008288:	f7ff ffa2 	bl	80081d0 <__sfputs_r>
 800828c:	3001      	adds	r0, #1
 800828e:	f000 80a7 	beq.w	80083e0 <_vfiprintf_r+0x1ec>
 8008292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008294:	445a      	add	r2, fp
 8008296:	9209      	str	r2, [sp, #36]	@ 0x24
 8008298:	f89a 3000 	ldrb.w	r3, [sl]
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 809f 	beq.w	80083e0 <_vfiprintf_r+0x1ec>
 80082a2:	2300      	movs	r3, #0
 80082a4:	f04f 32ff 	mov.w	r2, #4294967295
 80082a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ac:	f10a 0a01 	add.w	sl, sl, #1
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	9307      	str	r3, [sp, #28]
 80082b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80082ba:	4654      	mov	r4, sl
 80082bc:	2205      	movs	r2, #5
 80082be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082c2:	4853      	ldr	r0, [pc, #332]	@ (8008410 <_vfiprintf_r+0x21c>)
 80082c4:	f7f7 ff94 	bl	80001f0 <memchr>
 80082c8:	9a04      	ldr	r2, [sp, #16]
 80082ca:	b9d8      	cbnz	r0, 8008304 <_vfiprintf_r+0x110>
 80082cc:	06d1      	lsls	r1, r2, #27
 80082ce:	bf44      	itt	mi
 80082d0:	2320      	movmi	r3, #32
 80082d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082d6:	0713      	lsls	r3, r2, #28
 80082d8:	bf44      	itt	mi
 80082da:	232b      	movmi	r3, #43	@ 0x2b
 80082dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082e0:	f89a 3000 	ldrb.w	r3, [sl]
 80082e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80082e6:	d015      	beq.n	8008314 <_vfiprintf_r+0x120>
 80082e8:	9a07      	ldr	r2, [sp, #28]
 80082ea:	4654      	mov	r4, sl
 80082ec:	2000      	movs	r0, #0
 80082ee:	f04f 0c0a 	mov.w	ip, #10
 80082f2:	4621      	mov	r1, r4
 80082f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082f8:	3b30      	subs	r3, #48	@ 0x30
 80082fa:	2b09      	cmp	r3, #9
 80082fc:	d94b      	bls.n	8008396 <_vfiprintf_r+0x1a2>
 80082fe:	b1b0      	cbz	r0, 800832e <_vfiprintf_r+0x13a>
 8008300:	9207      	str	r2, [sp, #28]
 8008302:	e014      	b.n	800832e <_vfiprintf_r+0x13a>
 8008304:	eba0 0308 	sub.w	r3, r0, r8
 8008308:	fa09 f303 	lsl.w	r3, r9, r3
 800830c:	4313      	orrs	r3, r2
 800830e:	9304      	str	r3, [sp, #16]
 8008310:	46a2      	mov	sl, r4
 8008312:	e7d2      	b.n	80082ba <_vfiprintf_r+0xc6>
 8008314:	9b03      	ldr	r3, [sp, #12]
 8008316:	1d19      	adds	r1, r3, #4
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	9103      	str	r1, [sp, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	bfbb      	ittet	lt
 8008320:	425b      	neglt	r3, r3
 8008322:	f042 0202 	orrlt.w	r2, r2, #2
 8008326:	9307      	strge	r3, [sp, #28]
 8008328:	9307      	strlt	r3, [sp, #28]
 800832a:	bfb8      	it	lt
 800832c:	9204      	strlt	r2, [sp, #16]
 800832e:	7823      	ldrb	r3, [r4, #0]
 8008330:	2b2e      	cmp	r3, #46	@ 0x2e
 8008332:	d10a      	bne.n	800834a <_vfiprintf_r+0x156>
 8008334:	7863      	ldrb	r3, [r4, #1]
 8008336:	2b2a      	cmp	r3, #42	@ 0x2a
 8008338:	d132      	bne.n	80083a0 <_vfiprintf_r+0x1ac>
 800833a:	9b03      	ldr	r3, [sp, #12]
 800833c:	1d1a      	adds	r2, r3, #4
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	9203      	str	r2, [sp, #12]
 8008342:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008346:	3402      	adds	r4, #2
 8008348:	9305      	str	r3, [sp, #20]
 800834a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008420 <_vfiprintf_r+0x22c>
 800834e:	7821      	ldrb	r1, [r4, #0]
 8008350:	2203      	movs	r2, #3
 8008352:	4650      	mov	r0, sl
 8008354:	f7f7 ff4c 	bl	80001f0 <memchr>
 8008358:	b138      	cbz	r0, 800836a <_vfiprintf_r+0x176>
 800835a:	9b04      	ldr	r3, [sp, #16]
 800835c:	eba0 000a 	sub.w	r0, r0, sl
 8008360:	2240      	movs	r2, #64	@ 0x40
 8008362:	4082      	lsls	r2, r0
 8008364:	4313      	orrs	r3, r2
 8008366:	3401      	adds	r4, #1
 8008368:	9304      	str	r3, [sp, #16]
 800836a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836e:	4829      	ldr	r0, [pc, #164]	@ (8008414 <_vfiprintf_r+0x220>)
 8008370:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008374:	2206      	movs	r2, #6
 8008376:	f7f7 ff3b 	bl	80001f0 <memchr>
 800837a:	2800      	cmp	r0, #0
 800837c:	d03f      	beq.n	80083fe <_vfiprintf_r+0x20a>
 800837e:	4b26      	ldr	r3, [pc, #152]	@ (8008418 <_vfiprintf_r+0x224>)
 8008380:	bb1b      	cbnz	r3, 80083ca <_vfiprintf_r+0x1d6>
 8008382:	9b03      	ldr	r3, [sp, #12]
 8008384:	3307      	adds	r3, #7
 8008386:	f023 0307 	bic.w	r3, r3, #7
 800838a:	3308      	adds	r3, #8
 800838c:	9303      	str	r3, [sp, #12]
 800838e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008390:	443b      	add	r3, r7
 8008392:	9309      	str	r3, [sp, #36]	@ 0x24
 8008394:	e76a      	b.n	800826c <_vfiprintf_r+0x78>
 8008396:	fb0c 3202 	mla	r2, ip, r2, r3
 800839a:	460c      	mov	r4, r1
 800839c:	2001      	movs	r0, #1
 800839e:	e7a8      	b.n	80082f2 <_vfiprintf_r+0xfe>
 80083a0:	2300      	movs	r3, #0
 80083a2:	3401      	adds	r4, #1
 80083a4:	9305      	str	r3, [sp, #20]
 80083a6:	4619      	mov	r1, r3
 80083a8:	f04f 0c0a 	mov.w	ip, #10
 80083ac:	4620      	mov	r0, r4
 80083ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083b2:	3a30      	subs	r2, #48	@ 0x30
 80083b4:	2a09      	cmp	r2, #9
 80083b6:	d903      	bls.n	80083c0 <_vfiprintf_r+0x1cc>
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d0c6      	beq.n	800834a <_vfiprintf_r+0x156>
 80083bc:	9105      	str	r1, [sp, #20]
 80083be:	e7c4      	b.n	800834a <_vfiprintf_r+0x156>
 80083c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80083c4:	4604      	mov	r4, r0
 80083c6:	2301      	movs	r3, #1
 80083c8:	e7f0      	b.n	80083ac <_vfiprintf_r+0x1b8>
 80083ca:	ab03      	add	r3, sp, #12
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	462a      	mov	r2, r5
 80083d0:	4b12      	ldr	r3, [pc, #72]	@ (800841c <_vfiprintf_r+0x228>)
 80083d2:	a904      	add	r1, sp, #16
 80083d4:	4630      	mov	r0, r6
 80083d6:	f7fb feb9 	bl	800414c <_printf_float>
 80083da:	4607      	mov	r7, r0
 80083dc:	1c78      	adds	r0, r7, #1
 80083de:	d1d6      	bne.n	800838e <_vfiprintf_r+0x19a>
 80083e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083e2:	07d9      	lsls	r1, r3, #31
 80083e4:	d405      	bmi.n	80083f2 <_vfiprintf_r+0x1fe>
 80083e6:	89ab      	ldrh	r3, [r5, #12]
 80083e8:	059a      	lsls	r2, r3, #22
 80083ea:	d402      	bmi.n	80083f2 <_vfiprintf_r+0x1fe>
 80083ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ee:	f7fc fe1d 	bl	800502c <__retarget_lock_release_recursive>
 80083f2:	89ab      	ldrh	r3, [r5, #12]
 80083f4:	065b      	lsls	r3, r3, #25
 80083f6:	f53f af1f 	bmi.w	8008238 <_vfiprintf_r+0x44>
 80083fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083fc:	e71e      	b.n	800823c <_vfiprintf_r+0x48>
 80083fe:	ab03      	add	r3, sp, #12
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	462a      	mov	r2, r5
 8008404:	4b05      	ldr	r3, [pc, #20]	@ (800841c <_vfiprintf_r+0x228>)
 8008406:	a904      	add	r1, sp, #16
 8008408:	4630      	mov	r0, r6
 800840a:	f7fc f937 	bl	800467c <_printf_i>
 800840e:	e7e4      	b.n	80083da <_vfiprintf_r+0x1e6>
 8008410:	08008a91 	.word	0x08008a91
 8008414:	08008a9b 	.word	0x08008a9b
 8008418:	0800414d 	.word	0x0800414d
 800841c:	080081d1 	.word	0x080081d1
 8008420:	08008a97 	.word	0x08008a97

08008424 <__swbuf_r>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	460e      	mov	r6, r1
 8008428:	4614      	mov	r4, r2
 800842a:	4605      	mov	r5, r0
 800842c:	b118      	cbz	r0, 8008436 <__swbuf_r+0x12>
 800842e:	6a03      	ldr	r3, [r0, #32]
 8008430:	b90b      	cbnz	r3, 8008436 <__swbuf_r+0x12>
 8008432:	f7fc fce3 	bl	8004dfc <__sinit>
 8008436:	69a3      	ldr	r3, [r4, #24]
 8008438:	60a3      	str	r3, [r4, #8]
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	071a      	lsls	r2, r3, #28
 800843e:	d501      	bpl.n	8008444 <__swbuf_r+0x20>
 8008440:	6923      	ldr	r3, [r4, #16]
 8008442:	b943      	cbnz	r3, 8008456 <__swbuf_r+0x32>
 8008444:	4621      	mov	r1, r4
 8008446:	4628      	mov	r0, r5
 8008448:	f000 f82a 	bl	80084a0 <__swsetup_r>
 800844c:	b118      	cbz	r0, 8008456 <__swbuf_r+0x32>
 800844e:	f04f 37ff 	mov.w	r7, #4294967295
 8008452:	4638      	mov	r0, r7
 8008454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	6922      	ldr	r2, [r4, #16]
 800845a:	1a98      	subs	r0, r3, r2
 800845c:	6963      	ldr	r3, [r4, #20]
 800845e:	b2f6      	uxtb	r6, r6
 8008460:	4283      	cmp	r3, r0
 8008462:	4637      	mov	r7, r6
 8008464:	dc05      	bgt.n	8008472 <__swbuf_r+0x4e>
 8008466:	4621      	mov	r1, r4
 8008468:	4628      	mov	r0, r5
 800846a:	f7ff fa47 	bl	80078fc <_fflush_r>
 800846e:	2800      	cmp	r0, #0
 8008470:	d1ed      	bne.n	800844e <__swbuf_r+0x2a>
 8008472:	68a3      	ldr	r3, [r4, #8]
 8008474:	3b01      	subs	r3, #1
 8008476:	60a3      	str	r3, [r4, #8]
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	6022      	str	r2, [r4, #0]
 800847e:	701e      	strb	r6, [r3, #0]
 8008480:	6962      	ldr	r2, [r4, #20]
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	429a      	cmp	r2, r3
 8008486:	d004      	beq.n	8008492 <__swbuf_r+0x6e>
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	07db      	lsls	r3, r3, #31
 800848c:	d5e1      	bpl.n	8008452 <__swbuf_r+0x2e>
 800848e:	2e0a      	cmp	r6, #10
 8008490:	d1df      	bne.n	8008452 <__swbuf_r+0x2e>
 8008492:	4621      	mov	r1, r4
 8008494:	4628      	mov	r0, r5
 8008496:	f7ff fa31 	bl	80078fc <_fflush_r>
 800849a:	2800      	cmp	r0, #0
 800849c:	d0d9      	beq.n	8008452 <__swbuf_r+0x2e>
 800849e:	e7d6      	b.n	800844e <__swbuf_r+0x2a>

080084a0 <__swsetup_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4b29      	ldr	r3, [pc, #164]	@ (8008548 <__swsetup_r+0xa8>)
 80084a4:	4605      	mov	r5, r0
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	460c      	mov	r4, r1
 80084aa:	b118      	cbz	r0, 80084b4 <__swsetup_r+0x14>
 80084ac:	6a03      	ldr	r3, [r0, #32]
 80084ae:	b90b      	cbnz	r3, 80084b4 <__swsetup_r+0x14>
 80084b0:	f7fc fca4 	bl	8004dfc <__sinit>
 80084b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b8:	0719      	lsls	r1, r3, #28
 80084ba:	d422      	bmi.n	8008502 <__swsetup_r+0x62>
 80084bc:	06da      	lsls	r2, r3, #27
 80084be:	d407      	bmi.n	80084d0 <__swsetup_r+0x30>
 80084c0:	2209      	movs	r2, #9
 80084c2:	602a      	str	r2, [r5, #0]
 80084c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084c8:	81a3      	strh	r3, [r4, #12]
 80084ca:	f04f 30ff 	mov.w	r0, #4294967295
 80084ce:	e033      	b.n	8008538 <__swsetup_r+0x98>
 80084d0:	0758      	lsls	r0, r3, #29
 80084d2:	d512      	bpl.n	80084fa <__swsetup_r+0x5a>
 80084d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084d6:	b141      	cbz	r1, 80084ea <__swsetup_r+0x4a>
 80084d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084dc:	4299      	cmp	r1, r3
 80084de:	d002      	beq.n	80084e6 <__swsetup_r+0x46>
 80084e0:	4628      	mov	r0, r5
 80084e2:	f7fd fbf9 	bl	8005cd8 <_free_r>
 80084e6:	2300      	movs	r3, #0
 80084e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80084ea:	89a3      	ldrh	r3, [r4, #12]
 80084ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084f0:	81a3      	strh	r3, [r4, #12]
 80084f2:	2300      	movs	r3, #0
 80084f4:	6063      	str	r3, [r4, #4]
 80084f6:	6923      	ldr	r3, [r4, #16]
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	89a3      	ldrh	r3, [r4, #12]
 80084fc:	f043 0308 	orr.w	r3, r3, #8
 8008500:	81a3      	strh	r3, [r4, #12]
 8008502:	6923      	ldr	r3, [r4, #16]
 8008504:	b94b      	cbnz	r3, 800851a <__swsetup_r+0x7a>
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800850c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008510:	d003      	beq.n	800851a <__swsetup_r+0x7a>
 8008512:	4621      	mov	r1, r4
 8008514:	4628      	mov	r0, r5
 8008516:	f000 f883 	bl	8008620 <__smakebuf_r>
 800851a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851e:	f013 0201 	ands.w	r2, r3, #1
 8008522:	d00a      	beq.n	800853a <__swsetup_r+0x9a>
 8008524:	2200      	movs	r2, #0
 8008526:	60a2      	str	r2, [r4, #8]
 8008528:	6962      	ldr	r2, [r4, #20]
 800852a:	4252      	negs	r2, r2
 800852c:	61a2      	str	r2, [r4, #24]
 800852e:	6922      	ldr	r2, [r4, #16]
 8008530:	b942      	cbnz	r2, 8008544 <__swsetup_r+0xa4>
 8008532:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008536:	d1c5      	bne.n	80084c4 <__swsetup_r+0x24>
 8008538:	bd38      	pop	{r3, r4, r5, pc}
 800853a:	0799      	lsls	r1, r3, #30
 800853c:	bf58      	it	pl
 800853e:	6962      	ldrpl	r2, [r4, #20]
 8008540:	60a2      	str	r2, [r4, #8]
 8008542:	e7f4      	b.n	800852e <__swsetup_r+0x8e>
 8008544:	2000      	movs	r0, #0
 8008546:	e7f7      	b.n	8008538 <__swsetup_r+0x98>
 8008548:	2000001c 	.word	0x2000001c

0800854c <_raise_r>:
 800854c:	291f      	cmp	r1, #31
 800854e:	b538      	push	{r3, r4, r5, lr}
 8008550:	4605      	mov	r5, r0
 8008552:	460c      	mov	r4, r1
 8008554:	d904      	bls.n	8008560 <_raise_r+0x14>
 8008556:	2316      	movs	r3, #22
 8008558:	6003      	str	r3, [r0, #0]
 800855a:	f04f 30ff 	mov.w	r0, #4294967295
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008562:	b112      	cbz	r2, 800856a <_raise_r+0x1e>
 8008564:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008568:	b94b      	cbnz	r3, 800857e <_raise_r+0x32>
 800856a:	4628      	mov	r0, r5
 800856c:	f000 f830 	bl	80085d0 <_getpid_r>
 8008570:	4622      	mov	r2, r4
 8008572:	4601      	mov	r1, r0
 8008574:	4628      	mov	r0, r5
 8008576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800857a:	f000 b817 	b.w	80085ac <_kill_r>
 800857e:	2b01      	cmp	r3, #1
 8008580:	d00a      	beq.n	8008598 <_raise_r+0x4c>
 8008582:	1c59      	adds	r1, r3, #1
 8008584:	d103      	bne.n	800858e <_raise_r+0x42>
 8008586:	2316      	movs	r3, #22
 8008588:	6003      	str	r3, [r0, #0]
 800858a:	2001      	movs	r0, #1
 800858c:	e7e7      	b.n	800855e <_raise_r+0x12>
 800858e:	2100      	movs	r1, #0
 8008590:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008594:	4620      	mov	r0, r4
 8008596:	4798      	blx	r3
 8008598:	2000      	movs	r0, #0
 800859a:	e7e0      	b.n	800855e <_raise_r+0x12>

0800859c <raise>:
 800859c:	4b02      	ldr	r3, [pc, #8]	@ (80085a8 <raise+0xc>)
 800859e:	4601      	mov	r1, r0
 80085a0:	6818      	ldr	r0, [r3, #0]
 80085a2:	f7ff bfd3 	b.w	800854c <_raise_r>
 80085a6:	bf00      	nop
 80085a8:	2000001c 	.word	0x2000001c

080085ac <_kill_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	4d07      	ldr	r5, [pc, #28]	@ (80085cc <_kill_r+0x20>)
 80085b0:	2300      	movs	r3, #0
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	602b      	str	r3, [r5, #0]
 80085ba:	f7f9 f912 	bl	80017e2 <_kill>
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	d102      	bne.n	80085c8 <_kill_r+0x1c>
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	b103      	cbz	r3, 80085c8 <_kill_r+0x1c>
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	bd38      	pop	{r3, r4, r5, pc}
 80085ca:	bf00      	nop
 80085cc:	20000ac8 	.word	0x20000ac8

080085d0 <_getpid_r>:
 80085d0:	f7f9 b8ff 	b.w	80017d2 <_getpid>

080085d4 <__swhatbuf_r>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	460c      	mov	r4, r1
 80085d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085dc:	2900      	cmp	r1, #0
 80085de:	b096      	sub	sp, #88	@ 0x58
 80085e0:	4615      	mov	r5, r2
 80085e2:	461e      	mov	r6, r3
 80085e4:	da0d      	bge.n	8008602 <__swhatbuf_r+0x2e>
 80085e6:	89a3      	ldrh	r3, [r4, #12]
 80085e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085ec:	f04f 0100 	mov.w	r1, #0
 80085f0:	bf14      	ite	ne
 80085f2:	2340      	movne	r3, #64	@ 0x40
 80085f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085f8:	2000      	movs	r0, #0
 80085fa:	6031      	str	r1, [r6, #0]
 80085fc:	602b      	str	r3, [r5, #0]
 80085fe:	b016      	add	sp, #88	@ 0x58
 8008600:	bd70      	pop	{r4, r5, r6, pc}
 8008602:	466a      	mov	r2, sp
 8008604:	f000 f848 	bl	8008698 <_fstat_r>
 8008608:	2800      	cmp	r0, #0
 800860a:	dbec      	blt.n	80085e6 <__swhatbuf_r+0x12>
 800860c:	9901      	ldr	r1, [sp, #4]
 800860e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008612:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008616:	4259      	negs	r1, r3
 8008618:	4159      	adcs	r1, r3
 800861a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800861e:	e7eb      	b.n	80085f8 <__swhatbuf_r+0x24>

08008620 <__smakebuf_r>:
 8008620:	898b      	ldrh	r3, [r1, #12]
 8008622:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008624:	079d      	lsls	r5, r3, #30
 8008626:	4606      	mov	r6, r0
 8008628:	460c      	mov	r4, r1
 800862a:	d507      	bpl.n	800863c <__smakebuf_r+0x1c>
 800862c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	6123      	str	r3, [r4, #16]
 8008634:	2301      	movs	r3, #1
 8008636:	6163      	str	r3, [r4, #20]
 8008638:	b003      	add	sp, #12
 800863a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800863c:	ab01      	add	r3, sp, #4
 800863e:	466a      	mov	r2, sp
 8008640:	f7ff ffc8 	bl	80085d4 <__swhatbuf_r>
 8008644:	9f00      	ldr	r7, [sp, #0]
 8008646:	4605      	mov	r5, r0
 8008648:	4639      	mov	r1, r7
 800864a:	4630      	mov	r0, r6
 800864c:	f7fd fbb8 	bl	8005dc0 <_malloc_r>
 8008650:	b948      	cbnz	r0, 8008666 <__smakebuf_r+0x46>
 8008652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008656:	059a      	lsls	r2, r3, #22
 8008658:	d4ee      	bmi.n	8008638 <__smakebuf_r+0x18>
 800865a:	f023 0303 	bic.w	r3, r3, #3
 800865e:	f043 0302 	orr.w	r3, r3, #2
 8008662:	81a3      	strh	r3, [r4, #12]
 8008664:	e7e2      	b.n	800862c <__smakebuf_r+0xc>
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	6020      	str	r0, [r4, #0]
 800866a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800866e:	81a3      	strh	r3, [r4, #12]
 8008670:	9b01      	ldr	r3, [sp, #4]
 8008672:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008676:	b15b      	cbz	r3, 8008690 <__smakebuf_r+0x70>
 8008678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800867c:	4630      	mov	r0, r6
 800867e:	f000 f81d 	bl	80086bc <_isatty_r>
 8008682:	b128      	cbz	r0, 8008690 <__smakebuf_r+0x70>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f023 0303 	bic.w	r3, r3, #3
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	431d      	orrs	r5, r3
 8008694:	81a5      	strh	r5, [r4, #12]
 8008696:	e7cf      	b.n	8008638 <__smakebuf_r+0x18>

08008698 <_fstat_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4d07      	ldr	r5, [pc, #28]	@ (80086b8 <_fstat_r+0x20>)
 800869c:	2300      	movs	r3, #0
 800869e:	4604      	mov	r4, r0
 80086a0:	4608      	mov	r0, r1
 80086a2:	4611      	mov	r1, r2
 80086a4:	602b      	str	r3, [r5, #0]
 80086a6:	f7f9 f8fc 	bl	80018a2 <_fstat>
 80086aa:	1c43      	adds	r3, r0, #1
 80086ac:	d102      	bne.n	80086b4 <_fstat_r+0x1c>
 80086ae:	682b      	ldr	r3, [r5, #0]
 80086b0:	b103      	cbz	r3, 80086b4 <_fstat_r+0x1c>
 80086b2:	6023      	str	r3, [r4, #0]
 80086b4:	bd38      	pop	{r3, r4, r5, pc}
 80086b6:	bf00      	nop
 80086b8:	20000ac8 	.word	0x20000ac8

080086bc <_isatty_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4d06      	ldr	r5, [pc, #24]	@ (80086d8 <_isatty_r+0x1c>)
 80086c0:	2300      	movs	r3, #0
 80086c2:	4604      	mov	r4, r0
 80086c4:	4608      	mov	r0, r1
 80086c6:	602b      	str	r3, [r5, #0]
 80086c8:	f7f9 f8fb 	bl	80018c2 <_isatty>
 80086cc:	1c43      	adds	r3, r0, #1
 80086ce:	d102      	bne.n	80086d6 <_isatty_r+0x1a>
 80086d0:	682b      	ldr	r3, [r5, #0]
 80086d2:	b103      	cbz	r3, 80086d6 <_isatty_r+0x1a>
 80086d4:	6023      	str	r3, [r4, #0]
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
 80086d8:	20000ac8 	.word	0x20000ac8

080086dc <_init>:
 80086dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086de:	bf00      	nop
 80086e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e2:	bc08      	pop	{r3}
 80086e4:	469e      	mov	lr, r3
 80086e6:	4770      	bx	lr

080086e8 <_fini>:
 80086e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ea:	bf00      	nop
 80086ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ee:	bc08      	pop	{r3}
 80086f0:	469e      	mov	lr, r3
 80086f2:	4770      	bx	lr
